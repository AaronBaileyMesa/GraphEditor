## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-07 00:27:39
Table of Contents:
1. GraphEditorWatch/Views/GraphCanvasView.swift
2. GraphEditorWatch/Views/GraphGesturesModifier.swift
3. GraphEditorWatch/Views/GraphSection.swift--------------------------------------------------
File: GraphCanvasView.swift
Path: GraphEditorWatch/Views/GraphCanvasView.swift
Last modified: 2025-10-03 15:51:25

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared

// Reverted: Custom wrapper for reliable crown focus (without crownâ€”handled in ContentView now)
struct FocusableView<Content: View>: View {
    let content: Content
    @FocusState private var isFocused: Bool
    
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        content
            .id("CrownFocusableCanvas")
            .focused($isFocused)
            .onAppear {
                isFocused = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    isFocused = true  // Double-focus for WatchOS reliability
                }
            }
            .onChange(of: isFocused) { oldValue, newValue in
                print("Canvas focus changed: from \(oldValue) to \(newValue)")
                if !newValue {
                    isFocused = true  // Auto-recover focus loss
                }
            }
    }
}

struct GraphCanvasView: View {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var zoomTimer: Timer?
    @Binding var selectedEdgeID: UUID?
    @Binding var showOverlays: Bool
    @Binding var isAddingEdge: Bool
    
    init(
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<(any NodeProtocol)?>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<(any NodeProtocol)?>,
        selectedNodeID: Binding<NodeID?>,
        viewSize: CGSize,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        onUpdateZoomRanges: @escaping () -> Void,
        selectedEdgeID: Binding<UUID?>,
        showOverlays: Binding<Bool>,
        isAddingEdge: Binding<Bool>
    ) {
        self.viewModel = viewModel
        self._zoomScale = zoomScale
        self._offset = offset
        self._draggedNode = draggedNode
        self._dragOffset = dragOffset
        self._potentialEdgeTarget = potentialEdgeTarget
        self._selectedNodeID = selectedNodeID
        self.viewSize = viewSize
        self._panStartOffset = panStartOffset
        self._showMenu = showMenu
        self.maxZoom = maxZoom
        self._crownPosition = crownPosition
        self.onUpdateZoomRanges = onUpdateZoomRanges
        self._selectedEdgeID = selectedEdgeID
        self._showOverlays = showOverlays
        self._isAddingEdge = isAddingEdge
    }
    
    private var boundingBoxOverlay: some View {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let minScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.minX, y: graphBounds.minY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let maxScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.maxX, y: graphBounds.maxY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let scaledBounds = CGRect(x: minScreen.x, y: minScreen.y, width: maxScreen.x - minScreen.x, height: maxScreen.y - minScreen.y)
        return Rectangle()
            .stroke(Color.blue, lineWidth: 2)
            .frame(width: scaledBounds.width, height: scaledBounds.height)
            .position(x: scaledBounds.midX, y: scaledBounds.midY)
            .opacity(0.5)
    }
    
    private var accessibleCanvas: some View {
        ZStack {
            Canvas { context, size in
                // Define visibleNodes and visibleEdges
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // Fix: Use visibleEdges() instead of all edges
                let hiddenIDs = viewModel.model.hiddenNodeIDs.map { $0.uuidString.prefix(8) }
                print("Visible: \(visibleNodes.count), Hidden IDs: \(hiddenIDs)")
                
                if visibleNodes.isEmpty {
                    print("Warning: No visible nodes")  // Transient; remove if desired
                    return
                }
                
                // Compute effectiveCentroid: True model center (fixes panning/offset)
                let effectiveCentroid = centroid(of: visibleNodes)  // Non-optional CGPoint
                
                print("Drawing: \(visibleNodes.count) nodes, \(visibleEdges.count) edges | Centroid: \(effectiveCentroid) | Zoom: \(zoomScale) | Offset: \(offset)")  // Debug
                
                // Draw elements using helpers
                drawNodes(in: context, size: size, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawEdgeLines(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawEdgeArrows(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawDraggedNodeAndPotentialEdge(in: context, size: size, effectiveCentroid: effectiveCentroid)
            }
            .frame(width: viewSize.width, height: viewSize.height)
            .accessibilityLabel(viewModel.model.graphDescription(selectedID: selectedNodeID, selectedEdgeID: selectedEdgeID))
            .accessibilityIdentifier("GraphCanvas")  // Add this line
            .accessibilityHint("Tap menu button on bottom edge.")
            
            if showOverlays {
                boundingBoxOverlay
            }
            
            if let selectedID = selectedNodeID {
                Text("Selected: \(selectedID.uuidString.prefix(8))")  // Debug label
                    .position(x: 20, y: 10)
                    .foregroundColor(.yellow)
            }
        }
    }
    
    private func centroid(of nodes: [any NodeProtocol]) -> CGPoint {
        guard !nodes.isEmpty else { return .zero }  // Safe default (no optional)
        let sumX = nodes.reduce(0.0) { $0 + $1.position.x }
        let sumY = nodes.reduce(0.0) { $0 + $1.position.y }
        return CGPoint(x: sumX / CGFloat(nodes.count), y: sumY / CGFloat(nodes.count))
    }
    
    var body: some View {
        Group {
            FocusableView {  // Reverted: No crown params
                accessibleCanvas
            }
            .modifier(GraphGesturesModifier(
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                viewSize: viewSize,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                onUpdateZoomRanges: onUpdateZoomRanges,
                isAddingEdge: $isAddingEdge  // Pass to modifier
            ))
        }
        .onChange(of: selectedNodeID) {
            do {
                try viewModel.saveViewState()  // Existing: Triggers view state save on selection change
            } catch {
                print("Failed to save view state on selectedNodeID change: \(error)")
            }
        }
        .onChange(of: selectedEdgeID) {
            do {
                try viewModel.saveViewState()  // Existing
            } catch {
                print("Failed to save view state on selectedEdgeID change: \(error)")
            }
        }
        .onChange(of: offset) {  // NEW: Save on offset/zoom changes for full view persistence
            do {
                try viewModel.saveViewState()
            } catch {
                print("Failed to save view state on offset change: \(error)")
            }
        }
        .onChange(of: zoomScale) {
            do {
                try viewModel.saveViewState()
            } catch {
                print("Failed to save view state on zoomScale change: \(error)")
            }
        }
        .ignoresSafeArea()
    }
}

extension GraphCanvasView {
    func drawNodes(in context: GraphicsContext, size: CGSize, visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 0: Draw nodes FIRST (under edges/arrows)
        for node in visibleNodes {
            let screenPos = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let isSelected = (node.id == selectedNodeID)
            print("Drawing node \(node.label) at screen \(screenPos), selected: \(isSelected)")  // Debug
            node.draw(in: context, at: screenPos, zoomScale: zoomScale, isSelected: isSelected)
        }
    }
    
    func drawEdgeLines(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 1: Draw edges (lines only)
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
            let length = hypot(direction.dx, direction.dy)
            if length <= 0 { continue }
            
            let unitDx = direction.dx / length
            let unitDy = direction.dy / length
            let fromRadiusScreen = fromNode.radius * zoomScale
            let toRadiusScreen = toNode.radius * zoomScale
            let margin: CGFloat = 3.0
            
            let isSelected = edge.id == selectedEdgeID
            let lineColor: Color = isSelected ? .red : .gray
            let lineWidth: CGFloat = 3.0
            
            let startPoint = CGPoint(x: fromScreen.x + unitDx * (fromRadiusScreen + margin),
                                     y: fromScreen.y + unitDy * (fromRadiusScreen + margin))
            let endPoint = CGPoint(x: toScreen.x - unitDx * (toRadiusScreen + margin),
                                   y: toScreen.y - unitDy * (toRadiusScreen + margin))
            
            let linePath = Path { path in
                path.move(to: startPoint)
                path.addLine(to: endPoint)
            }
            
            context.stroke(linePath, with: .color(lineColor), lineWidth: lineWidth)
            print("Drawing line for edge \(edge.id.uuidString.prefix(8)) from \(startPoint) to \(endPoint)")  // Debug
        }
    }
    
    func drawEdgeArrows(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 2: Draw arrows (over lines)
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
            let length = hypot(direction.dx, direction.dy)
            if length <= 0 { continue }
            
            let unitDx = direction.dx / length
            let unitDy = direction.dy / length
            let toRadiusScreen = toNode.radius * zoomScale
            let boundaryPoint = CGPoint(x: toScreen.x - unitDx * toRadiusScreen,
                                        y: toScreen.y - unitDy * toRadiusScreen)
            
            let lineAngle = atan2(unitDy, unitDx)
            let arrowLength: CGFloat = 10.0
            let arrowAngle: CGFloat = .pi / 6
            let arrowPoint1 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle - arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle - arrowAngle)
            )
            let arrowPoint2 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle + arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle + arrowAngle)
            )
            
            let arrowPath = Path { path in
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint1)
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint2)
            }
            
            let isSelected = edge.id == selectedEdgeID
            let arrowColor: Color = isSelected ? .red : .gray
            let arrowLineWidth: CGFloat = 3.0
            
            context.stroke(arrowPath, with: .color(arrowColor), lineWidth: arrowLineWidth)
            print("Drawing arrow for edge \(edge.id.uuidString.prefix(8)) to boundary \(boundaryPoint)")  // Debug
        }
    }
    
    func drawDraggedNodeAndPotentialEdge(in context: GraphicsContext, size: CGSize, effectiveCentroid: CGPoint) {
        // Draw dragged node and potential edge
        if let dragged = draggedNode {
            let draggedScreen = CoordinateTransformer.modelToScreen(
                dragged.position + dragOffset,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            context.fill(Circle().path(in: CGRect(center: draggedScreen, size: CGSize(width: Constants.App.nodeModelRadius * 2 * zoomScale, height: Constants.App.nodeModelRadius * 2 * zoomScale))), with: .color(.green))
            
            if let target = potentialEdgeTarget {
                let targetScreen = CoordinateTransformer.modelToScreen(
                    target.position,
                    effectiveCentroid: effectiveCentroid,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: size
                )
                let tempLinePath = Path { path in
                    path.move(to: draggedScreen)
                    path.addLine(to: targetScreen)
                }
                context.stroke(tempLinePath, with: .color(.green), lineWidth: 2.0)
            }
        }
    }
}

struct Line: Shape, Animatable {
    var from: CGPoint
    var end: CGPoint
    
    var animatableData: AnimatablePair<CGPoint.AnimatableData, CGPoint.AnimatableData> {
        get { AnimatablePair(from.animatableData, end.animatableData) }
        set {
            from.animatableData = newValue.first
            end.animatableData = newValue.second
        }
    }
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        path.move(to: from)
        path.addLine(to: end)
        return path
    }
}

extension CGRect {
    init(center: CGPoint, size: CGSize) {
        self.init(x: center.x - size.width / 2, y: center.y - size.height / 2, width: size.width, height: size.height)
    }
}
----------------------------------------------------------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-10-03 15:50:34

Contents:
//
//  GraphGesturesModifier.swift
//  GraphEditorWatch
//
//  Created by handcart on 2025-08-16

import SwiftUI
import WatchKit
import GraphEditorShared
import os.log  // Added for optimized logging

enum HitType {
    case node
    case edge
}

struct GestureContext {
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    let effectiveCentroid: CGPoint
}

struct NodeDistanceInfo {
    let label: Int
    let screenPos: CGPoint
    let dist: CGFloat
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    
    @State private var dragStartNode: (any NodeProtocol)?
    @State private var isMovingSelectedNode: Bool = false
    @State private var gestureStartCentroid: CGPoint = .zero
    @State private var startLocation: CGPoint?
    
    private let dragStartThreshold: CGFloat = 10.0  // Increased for better tap vs. drag distinction
    
    // Optimized logger
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "gestures")
    
    func body(content: Content) -> some View {
        let dragGesture = DragGesture(minimumDistance: 0, coordinateSpace: .local)  // Zero for immediate detection
            .onChanged { value in
                let visibleNodes = viewModel.model.visibleNodes()  // Or viewModel.model.nodes if no visibleNodes()
                let effectiveCentroid = viewModel.effectiveCentroid  // From ViewModel
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragChanged(value: value, visibleNodes: visibleNodes, context: context)
            }
            .onEnded { value in
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // NEW: Get visible edges (assume method exists; use model.edges if not)
                let effectiveCentroid = viewModel.effectiveCentroid
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragEnded(value: value, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            }
        content
            .highPriorityGesture(dragGesture)
    }
}

extension GraphGesturesModifier {
    
    /*
    // Screen-space hit test for nodes (consistent usability)
    func hitTestNodesInScreenSpace(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], context: GestureContext) -> (any NodeProtocol)? {
        var closestNode: (any NodeProtocol)?
        var minScreenDist: CGFloat = .infinity
        let minHitRadius: CGFloat = 10.0  // Minimum tappable radius in screen points for small zooms
        let padding: CGFloat = 5.0  // Extra padding in screen points for forgiveness

    #if DEBUG
        var nodeDistances: [NodeDistanceInfo] = []  // For logging
        logger.debug("Using centroid: \(String(describing: context.effectiveCentroid)) for this gesture")
    #endif

        for node in visibleNodes {
            let safeZoom = max(context.zoomScale, 0.1)
            let nodeScreenPos = CoordinateTransformer.modelToScreen(node.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let dist = distance(screenPos, nodeScreenPos)

            let visibleRadius = node.radius * safeZoom
            let nodeHitRadius = max(minHitRadius, visibleRadius) + padding  // Matches visible size, with min and padding

    #if DEBUG
            nodeDistances.append(NodeDistanceInfo(label: node.label, screenPos: nodeScreenPos, dist: dist))
            // Optional: Log per-node hit radius for debugging
            logger.debug("Node \(node.label): visibleRadius \(visibleRadius), nodeHitRadius \(nodeHitRadius)")
    #endif

            if dist <= nodeHitRadius && dist < minScreenDist {
                minScreenDist = dist
                closestNode = node
            }
        }

    #if DEBUG
        // Log sorted by distance for verification
        nodeDistances.sort { $0.dist < $1.dist }
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: screenPos))")
        for info in nodeDistances.prefix(5) {  // Limit to top 5 closest
            logger.debug("Node \(info.label): screen pos \(String(describing: info.screenPos)), dist \(info.dist)")
        }
        if let closest = closestNode {
            logger.debug("Hit: Node \(closest.label) (dist \(minScreenDist))")
        } else {
            logger.debug("Miss: Closest dist \(nodeDistances.first?.dist ?? .infinity)")
        }
    #endif
        return closestNode
    }
    
    // Screen-space hit test for edges (for consistency with nodes)
    func hitTestEdgesInScreenSpace(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], context: GestureContext) -> GraphEdge? {
        var closestEdge: GraphEdge?
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius / 2  // Smaller for edges to avoid overlapping node taps
        
#if DEBUG
        var edgeDistances: [(id: UUID, dist: CGFloat)] = []  // For logging
#endif
        
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let safeZoom = max(context.zoomScale, 0.1)
            let fromScreen = CoordinateTransformer.modelToScreen(fromNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let toScreen = CoordinateTransformer.modelToScreen(toNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, endPoint: toScreen)
            
#if DEBUG
            edgeDistances.append((edge.id, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestEdge = edge
            }
        }
        
#if DEBUG
        // Log sorted by distance
        edgeDistances.sort { $0.dist < $1.dist }
        logger.debug("Edge Hit Test at screen \(String(describing: screenPos))")
        for (id, dist) in edgeDistances.prefix(3) {
            logger.debug("Edge \(id): dist \(dist)")
        }
        if let closest = closestEdge {
            logger.debug("Hit: Edge \(closest.id) (dist \(minScreenDist) <= \(hitScreenRadius))")
        } else {
            logger.debug("Miss: Closest dist \(edgeDistances.first?.dist ?? .infinity) > \(hitScreenRadius)")
        }
#endif
        return closestEdge
    }
    */
     
    private func resetGestureState() {
        dragStartNode = nil
        isMovingSelectedNode = false
        draggedNode = nil
        dragOffset = .zero
        potentialEdgeTarget = nil
        panStartOffset = nil
        startLocation = nil
        isAddingEdge = false
        onUpdateZoomRanges()
        gestureStartCentroid = .zero
    }
    
    func handleTap(at location: CGPoint, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) -> Bool {
    #if DEBUG
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: location))")
        logger.debug("Visible Nodes Count: \(visibleNodes.count)")
        logger.debug("--------------------------------")
    #endif
      
        // Pause simulation first (mimics handleTap)
        Task { await viewModel.model.pauseSimulation() }
      
        let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
        let hitNode = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext)
        if let node = hitNode {
            // Node hit: Handle toggle or selection (replicates viewModel.handleTap logic)
            if let toggleNode = node as? ToggleNode {
                // Toggle without selection
                let updated = toggleNode.handlingTap()
                if let index = viewModel.model.nodes.firstIndex(where: { $0.id == toggleNode.id }) {
                    viewModel.model.nodes[index] = AnyNode(updated)
                }
                selectedNodeID = nil
                selectedEdgeID = nil
                logger.debug("Toggled ToggleNode \(toggleNode.label)")
            } else {
                // Select regular node (toggle off if already)
                selectedNodeID = (node.id == selectedNodeID) ? nil : node.id
                selectedEdgeID = nil
                logger.debug("Selected regular Node \(node.label)")
            }
            // Sync with ViewModel (triggers onChange in ContentView)
            viewModel.objectWillChange.send()
          
            // Resume simulation after delay (mimics handleTap)
            Task { await viewModel.resumeSimulationAfterDelay() }
            return true  // Hit occurred
        } else {
            // No node: Check edges
            let hitEdge = HitTestHelper.closestEdge(at: location, visibleEdges: visibleEdges, visibleNodes: visibleNodes, context: hitContext)
            if let edge = hitEdge {
                // Select edge, clear node
                selectedEdgeID = edge.id
                selectedNodeID = nil
                logger.debug("Tap selected Edge \(edge.id.uuidString.prefix(8))")
              
                // Sync with ViewModel (triggers onChange in ContentView)
                viewModel.objectWillChange.send()
              
                // Resume simulation after delay (mimics handleTap)
                Task { await viewModel.resumeSimulationAfterDelay() }
                return true  // Hit occurred
            } else {
                // Miss: Clear all
                selectedNodeID = nil
                selectedEdgeID = nil
                logger.debug("Tap missed; cleared selections")
              
                // Sync with ViewModel (triggers onChange in ContentView)
                viewModel.objectWillChange.send()
              
                // Resume simulation after delay (mimics handleTap)
                Task { await viewModel.resumeSimulationAfterDelay() }
                return false  // No hit
            }
        }
    }
  
    private func handleDragChanged(value: DragGesture.Value, visibleNodes: [any NodeProtocol], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
      
        // Initial hit if no dragStartNode (start of drag)
        if dragStartNode == nil {
            let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
            let hitNode = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext)
            if let node = hitNode {
                dragStartNode = node
                draggedNode = node
                dragOffset = .zero
                isAddingEdge = true  // Enter edge creation mode
                logger.debug("Drag of \(dragMagnitude) started from Node \(node.label)")
            } else {
                // Pan the canvas instead
                if panStartOffset == nil {
                    panStartOffset = offset
                }
                let delta = CGSize(width: translation.width, height: translation.height)
                offset = panStartOffset! + delta
            }
            startLocation = location  // For tap threshold in onEnded
            gestureStartCentroid = context.effectiveCentroid
            return
        }
      
        // Ongoing drag: Update drag offset and check for potential target
        if let node = draggedNode {
            dragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
            let potential = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext)
            potentialEdgeTarget = (potential?.id != node.id) ? potential : nil  // Avoid self-edges
            if let target = potentialEdgeTarget {
                logger.debug("Potential edge target: Node \(target.label)")
            }
        }
    }
    
    private func handleDragEnded(value: DragGesture.Value, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
        
        // Defer cleanup (ensures reset even on errors/taps)
        defer { resetGestureState() }
        
        // Early exit for taps (short drag) - enhanced for node/edge selection
        if let start = startLocation, dragMagnitude < dragStartThreshold, distance(start, location) < dragStartThreshold {
            let wasHit = handleTap(at: location, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            if wasHit {
                WKInterfaceDevice.current().play(.click)  // Subtler haptic feedback (short tick/tap) on successful hit
            }
            return  // Exit early
        }
        
        print("Processing as drag: magnitude \(dragMagnitude), translation \(translation)")
        
        if let dragged = draggedNode {
            Task { await viewModel.model.snapshot() }
            let modelDragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            print("Drag offset in model: \(modelDragOffset)")
            
            if let target = potentialEdgeTarget, target.id != dragged.id, isAddingEdge {
                handleEdgeCreation(from: dragged, to: target, translation: translation)
            } else {
                handleNodeMovement(for: dragged, with: modelDragOffset)
            }
        }
        withAnimation(.spring(duration: 0.3, bounce: 0.2)) {
            onUpdateZoomRanges()
        }
    }
    
    private func handleEdgeCreation(from dragged: any NodeProtocol, to target: any NodeProtocol, translation: CGSize) {
        // Duplicate check with logging
        let exists = viewModel.model.edges.contains { edge in
            (edge.from == dragged.id && edge.target == target.id) || (edge.from == target.id && edge.target == dragged.id)
        }
        if !exists {
            print("No duplicate; adding edge")
            // Heuristic: Downward = hierarchy
            let type = (translation.height > 0) ? .hierarchy : viewModel.pendingEdgeType
            viewModel.pendingEdgeType = type  // Update for UI
            Task {
                await viewModel.addEdge(from: dragged.id, to: target.id, type: type)  // Async call
            }
            print("Created edge of type \(type.rawValue) from node \(dragged.label) to \(target.label)")
            isAddingEdge = false
        } else {
            print("Duplicate edge ignored between \(dragged.label) and \(target.label)")
        }
    }
    
    private func handleNodeMovement(for dragged: any NodeProtocol, with modelDragOffset: CGPoint) {
        // No target: Move the node (with casts for .with, as it's not on protocol)
        if let index = viewModel.model.nodes.firstIndex(where: { $0.id == dragged.id }) {
            let oldNode = viewModel.model.nodes[index]
            let unwrapped = oldNode.unwrapped
            let newPos = unwrapped.position + modelDragOffset
            let updatedNode: AnyNode
            if let concrete = unwrapped as? Node {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else if let concrete = unwrapped as? ToggleNode {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else {
                logger.error("Unsupported node type for move: \(type(of: unwrapped))")
                return
            }
            viewModel.model.nodes[index] = updatedNode
            print("Moved node \(unwrapped.label) to new position \(newPos)")
            Task { await viewModel.model.startSimulation() }
        }
    }
}
extension GraphGesturesModifier {
    public func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return distance(point, startPoint)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return distance(point, proj)
    }
}
----------------------------------------------------------------------------------------------------
File: GraphSection.swift
Path: GraphEditorWatch/Views/GraphSection.swift
Last modified: 2025-10-06 22:57:52

Contents:
//
//  GraphSection.swift
//  GraphEditorWatch
//
//  Created by handcart on 10/5/25.  // Updated date for refactor
//

import SwiftUI

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    @State private var graphName: String = ""
    @State private var showNewSheet: Bool = false
    @State private var newGraphName: String = ""
    @State private var graphs: [String] = []
    @State private var errorMessage: String?
    
    var body: some View {
        Section(header: Text("Graph")) {
            TextField("Graph Name", text: $graphName)
                .accessibilityIdentifier("graphNameTextField")
            if viewModel.canRedo || viewModel.canUndo {
                Section(header: Text("Undo")) {
                    if viewModel.canUndo {
                        Button("Undo") {
                            Task { await viewModel.undo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("undoButton")
                    }
                    if viewModel.canRedo {
                        Button("Redo") {
                            Task { await viewModel.redo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("redoButton")
                    }
                }
            }
            
            TextField("Graph Name", text: $graphName)
                .onAppear { graphName = viewModel.currentGraphName }
            
            Button("New Graph") {
                newGraphName = ""
                showNewSheet = true
            }
            .accessibilityIdentifier("newGraphButton")
            .onSubmit { /* Same as above */ }
            .sheet(isPresented: $showNewSheet) {
                VStack {
                    TextField("New Graph Name", text: $newGraphName)
                    Button("Create") {
                        Task {
                            do {
                                try await viewModel.model.createNewGraph(name: newGraphName)
                                viewModel.currentGraphName = newGraphName
                                showNewSheet = false
                                onDismiss()
                            } catch {
                                errorMessage = error.localizedDescription
                            }
                        }
                    }
                    .accessibilityIdentifier("createButton")
                }
            }
            
            Button("Save Graph") {
                Task {
                    viewModel.currentGraphName = graphName
                    do {
                        try await viewModel.model.saveGraph()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("saveButton")
            .onSubmit { /* Same as above */ }
            
            Button("Load Graph") {
                Task {
                    do {
                        try await viewModel.model.loadGraph(name: graphName)
                        viewModel.currentGraphName = graphName
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("loadButton")
            .onSubmit { /* Same as above */ }
            
            Button("List Graphs") {
                Task {
                    do {
                        graphs = try await viewModel.model.listGraphNames()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .accessibilityIdentifier("listGraphsButton")
            .onSubmit { /* Same as above */ }
            
            ForEach(graphs, id: \.self) { name in
                Button(name) {
                    Task {
                        do {
                            try await viewModel.model.loadGraph(name: name)
                            viewModel.currentGraphName = name
                            graphName = name
                            onDismiss()
                        } catch {
                            errorMessage = error.localizedDescription
                        }
                    }
                }
            }
            
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.clearGraph() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
            .accessibilityIdentifier("resetGraphButton")
            
            Button("Delete Graph", role: .destructive) {
                Task {
                    do {
                        try await viewModel.model.deleteGraph(name: graphName)
                        graphName = "default"
                        try await viewModel.model.loadGraph(name: "default")
                        onDismiss()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .onSubmit { /* Same as above */ }
            .accessibilityLabel("deleteGraphButton")
            
            if let error = errorMessage {
                Text(error).foregroundColor(.red)
            }
        }
        .accessibilityLabel("Graph section")  // NEW: Accessibility
    }
}
--------------------------------------------------
