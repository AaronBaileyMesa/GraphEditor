## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-13 08:27:20
Table of Contents:
1. GraphEditorWatch/Views/GraphCanvasView.swift
2. GraphEditorWatch/Views/GraphGesturesModifier.swift
3. GraphEditorWatch/Views/GraphSection.swift
4. GraphEditorWatch/Views/GraphUtilities.swift
5. GraphEditorWatch/Views/InnerView.swift
6. GraphEditorWatch/Views/MenuView.swift
7. GraphEditorWatch/Views/NodeView.swift
8. GraphEditorWatch/Views/ViewSection.swift--------------------------------------------------
File: GraphCanvasView.swift
Path: GraphEditorWatch/Views/GraphCanvasView.swift
Last modified: 2025-10-11 18:36:40

Contents:
// GraphCanvasView.swift
import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for logging

struct GraphCanvasView: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "graphcanvasview")  // Changed to computed static for consistency
    }
    
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var zoomTimer: Timer?
    @Binding var selectedEdgeID: UUID?
    @Binding var showOverlays: Bool
    @Binding var isAddingEdge: Bool
    @Binding var isDragging: Bool
    
    init(
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<(any NodeProtocol)?>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<(any NodeProtocol)?>,
        selectedNodeID: Binding<NodeID?>,
        viewSize: CGSize,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        onUpdateZoomRanges: @escaping () -> Void,
        selectedEdgeID: Binding<UUID?>,
        showOverlays: Binding<Bool>,
        isAddingEdge: Binding<Bool>,
        isDragging: Binding<Bool>  // Add this new parameter
    ) {
        self.viewModel = viewModel
        self._zoomScale = zoomScale
        self._offset = offset
        self._draggedNode = draggedNode
        self._dragOffset = dragOffset
        self._potentialEdgeTarget = potentialEdgeTarget
        self._selectedNodeID = selectedNodeID
        self.viewSize = viewSize
        self._panStartOffset = panStartOffset
        self._showMenu = showMenu
        self.maxZoom = maxZoom
        self._crownPosition = crownPosition
        self.onUpdateZoomRanges = onUpdateZoomRanges
        self._selectedEdgeID = selectedEdgeID
        self._showOverlays = showOverlays
        self._isAddingEdge = isAddingEdge
        self._isDragging = isDragging  // Add this
    }
    
    private var boundingBoxOverlay: some View {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let minScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.minX, y: graphBounds.minY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let maxScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.maxX, y: graphBounds.maxY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let scaledBounds = CGRect(x: minScreen.x, y: minScreen.y, width: maxScreen.x - minScreen.x, height: maxScreen.y - minScreen.y)
        return Rectangle()
            .stroke(Color.blue, lineWidth: 2)
            .frame(width: scaledBounds.width, height: scaledBounds.height)
            .position(x: scaledBounds.midX, y: scaledBounds.midY)
            .opacity(0.5)
    }
    
    private func drawEdges(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            var path = Path()
            path.move(to: fromScreen)
            path.addLine(to: toScreen)
            
            let isSelected = edge.id == selectedEdgeID
            let edgeColor: Color = isSelected ? .red : .gray
            context.stroke(path, with: .color(edgeColor), lineWidth: 2 * zoomScale)
        }
    }
    
    private func drawArrows(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let arrowSize = 10 * zoomScale
            let delta = toScreen - fromScreen
            let length = hypot(delta.x, delta.y)
            if length == 0 { continue }
            let unitDelta = delta / length
            let arrowPoint = toScreen - unitDelta * (toNode.radius * zoomScale)
            
            let perpX = -unitDelta.y
            let perpY = unitDelta.x
            let arrowPath = Path { path in
                path.move(to: arrowPoint)
                path.addLine(to: arrowPoint - unitDelta * arrowSize + CGPoint(x: perpX * arrowSize / 2, y: perpY * arrowSize / 2))
                path.move(to: arrowPoint)
                path.addLine(to: arrowPoint - unitDelta * arrowSize - CGPoint(x: perpX * arrowSize / 2, y: perpY * arrowSize / 2))
            }
            context.stroke(arrowPath, with: .color(.gray), lineWidth: 1 * zoomScale)
        }
    }
    
    private func drawDraggedNodeAndPotentialEdge(in context: GraphicsContext, size: CGSize, effectiveCentroid: CGPoint) {
        if let dragged = draggedNode {
            let draggedScreen = CoordinateTransformer.modelToScreen(
                draggedNode?.position ?? .zero + dragOffset,  // Virtual position
                effectiveCentroid: effectiveCentroid,  // Use virtual
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let draggedRadius = Constants.App.nodeModelRadius * zoomScale
            let draggedPath = Circle().path(in: CGRect(center: draggedScreen, size: CGSize(width: draggedRadius * 2, height: draggedRadius * 2)))
            context.fill(draggedPath, with: .color(.green.opacity(0.5)))
            
            if let target = potentialEdgeTarget {
                let targetScreen = CoordinateTransformer.modelToScreen(
                    target.position,
                    effectiveCentroid: effectiveCentroid,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: size
                )
                var potentialPath = Path()
                potentialPath.move(to: draggedScreen)
                potentialPath.addLine(to: targetScreen)
                context.stroke(potentialPath, with: .color(.green), style: StrokeStyle(lineWidth: 2 * zoomScale, dash: [5 * zoomScale]))
            }
        }
    }
    
    private func drawNodes(in context: GraphicsContext, size: CGSize, visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        for node in visibleNodes {
            let nodeScreen = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let nodeRadius = Constants.App.nodeModelRadius * zoomScale
            
            let isSelected = node.id == selectedNodeID
            let nodeColor: Color = isSelected ? .red : .blue
            let nodePath = Circle().path(in: CGRect(center: nodeScreen, size: CGSize(width: nodeRadius * 2, height: nodeRadius * 2)))
            context.fill(nodePath, with: .color(nodeColor))
            
            // Draw label
            let labelText = Text("\(node.label)").font(.system(size: 12 * zoomScale))
            context.draw(labelText, at: nodeScreen, anchor: .center)
        }
    }
    
    private var accessibleCanvas: some View {
        ZStack {
            Canvas { context, size in
                // Define visibleNodes and visibleEdges
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // Fix: Use visibleEdges() instead of all edges
                
#if DEBUG
                Self.logger.debug("Visible: \(visibleNodes.count)")
#endif
                
                let effectiveCentroid = viewModel.effectiveCentroid
                
                // Draw edges (Pass 1: Lines only)
                drawEdges(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                
                // Draw nodes
                drawNodes(in: context, size: size, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                
                // Draw arrows (Pass 2: Over lines)
                drawArrows(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                
                // Draw dragged node and potential edge
                drawDraggedNodeAndPotentialEdge(in: context, size: size, effectiveCentroid: effectiveCentroid)
            }
            .frame(width: viewSize.width, height: viewSize.height)
            .accessibilityLabel(accessibilityLabel())
            .accessibilityIdentifier("GraphCanvas")
            
            if showOverlays {
                boundingBoxOverlay
            }
        }
    }
    
    var body: some View {
        accessibleCanvas
            .modifier(GraphGesturesModifier(
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                viewSize: viewSize,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                onUpdateZoomRanges: onUpdateZoomRanges,
                isAddingEdge: $isAddingEdge,
                isDragging: $isDragging  // Add this to pass down the binding
            ))
    }
    
    private func accessibilityLabel() -> String {
        let nodeCount = viewModel.model.visibleNodes().count
        let edgeCount = viewModel.model.visibleEdges().count
        let selectedNodeLabel = selectedNodeID.flatMap { id in viewModel.model.nodes.first(where: { $0.id == id })?.label }?.description ?? "none"
        let selectedEdgeLabel = selectedEdgeID.flatMap { id in viewModel.model.edges.first(where: { $0.id == id }).map { "\($0.from) to \($0.target)" } } ?? "none"
        return "Graph with \(nodeCount) nodes and \(edgeCount) edges. Selected node: \(selectedNodeLabel), selected edge: \(selectedEdgeLabel)."
    }
}

extension CGRect {
    init(center: CGPoint, size: CGSize) {
        self.init(x: center.x - size.width / 2, y: center.y - size.height / 2, width: size.width, height: size.height)
    }
}

extension CGPoint {
    static func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)
    }
    
    static func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)
    }
}

extension GraphCanvasView {
    func moveDraggedNode() async {
        guard let dragged = draggedNode else { return }
        let modelDragOffset = dragOffset / zoomScale
        if let index = viewModel.model.nodes.firstIndex(where: { $0.id == dragged.id }) {
            let oldNode = viewModel.model.nodes[index]
            let unwrapped = oldNode.unwrapped
            let tentativePos = unwrapped.position + dragOffset
            let bounds = viewModel.model.physicsEngine.simulationBounds
            let newPos = CGPoint(
                x: max(0, min(tentativePos.x, bounds.width)),
                y: max(0, min(tentativePos.y, bounds.height))
            )
            let updatedNode: AnyNode
            if let concrete = unwrapped as? Node {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else if let concrete = unwrapped as? ToggleNode {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else {
                Self.logger.error("Unsupported node type for move: \(type(of: unwrapped))")
                return
            }
            viewModel.model.nodes[index] = updatedNode
            
#if DEBUG
            Self.logger.debug("Moved node \(unwrapped.label) to new position x=\(newPos.x), y=\(newPos.y)")
#endif
            
            Task { await viewModel.model.startSimulation() }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-10-11 18:46:49

Contents:
// GraphGesturesModifier.swift
// Reduced length by extracting utilities and heavy methods to extensions/utils

import SwiftUI
import GraphEditorShared

struct GestureContext {
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    let effectiveCentroid: CGPoint
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    @Binding var isDragging: Bool
    @State private var longPressLocation: CGPoint?
    @State private var longPressTimer: Timer?
    
    private let minDragDistance: CGFloat = 10.0
    private let longPressDuration: TimeInterval = 0.5
    
    func body(content: Content) -> some View {
        content
            .digitalCrownRotation(
                $crownPosition,
                from: 0,
                through: Double(AppConstants.crownZoomSteps),
                sensitivity: .high,
                isContinuous: true,
                isHapticFeedbackEnabled: true
            )
            .onChange(of: crownPosition) { oldValue, newValue in
                handleCrownRotation(oldValue: oldValue, newValue: newValue)
            }
            .onTapGesture { location in
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: viewModel.effectiveCentroid)
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()
                handleTap(at: location, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            }
            .gesture(dragGesture)
            .gesture(longPressGesture)
            .simultaneousGesture(panGesture)
    }
    
    private var dragGesture: some Gesture {
            DragGesture(minimumDistance: minDragDistance)
                .onChanged { value in
                    // If handleDragChanged has async calls, it's fine as long as they're wrapped in Task inside it
                    handleDragChanged(value: value)
                }
                .onEnded { value in
                    handleDragEnded(value: value)
                }
        }
    
    private var longPressGesture: some Gesture {
        LongPressGesture(minimumDuration: longPressDuration)
            .onEnded { _ in
                handleLongPressEnded()
            }
    }
    
    private var panGesture: some Gesture {
        DragGesture()
            .onChanged { value in
                handlePanChanged(value: value)
            }
            .onEnded { value in
                handlePanEnded(value: value)
            }
    }
    
    private func handleCrownRotation(oldValue: Double, newValue: Double) {
        let delta = newValue - oldValue
        let zoomDelta = delta / Double(AppConstants.crownZoomSteps) * (maxZoom - 1.0)
        zoomScale = (zoomScale + zoomDelta).clamped(to: 0.2...maxZoom)
        onUpdateZoomRanges()
    }
    
    private var currentCentroid: CGPoint {
        if let node = draggedNode {
            return node.position + dragOffset  // Virtual for single selected node drag
        }
        return viewModel.effectiveCentroid
    }
}

extension GraphGesturesModifier {
    func handleTap(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) {
        _ = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: context.effectiveCentroid, zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize)
        
        let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
        let hitNode = GestureUtils.closestNode(at: screenPos, visibleNodes: visibleNodes, context: hitContext)
        
        if let node = hitNode {
            selectedNodeID = node.id
            selectedEdgeID = nil
            if isAddingEdge, let from = draggedNode {
                addEdge(from: from.id, to: node.id)
            }
            return
        }
        
        let hitEdge = GestureUtils.closestEdge(at: screenPos, visibleEdges: visibleEdges, visibleNodes: visibleNodes, context: hitContext)
        if let edge = hitEdge {
            selectedEdgeID = edge.id
            selectedNodeID = nil
            return
        }
        
        selectedNodeID = nil
        selectedEdgeID = nil
    }
    
    // Keep this sync; wrap async inside Task
    private func handleDragChanged(value: DragGesture.Value) {
        isDragging = true
        let screenPos = value.location
        let context = HitTestContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: currentCentroid)
        
        var localDraggedNode: (any NodeProtocol)? = draggedNode  // Local to handle immediate set
        
        if localDraggedNode == nil {
            let visibleNodes = viewModel.model.visibleNodes()
            print("Drag start: Visible nodes count = \(visibleNodes.count)")  // Debug: Confirm nodes
            
            if let closest = GestureUtils.closestNode(at: screenPos, visibleNodes: visibleNodes, context: context) {
                print("Node hit: ID \(closest.id.uuidString)")  // Debug: Confirm hit (fixed UUID to String)
                draggedNode = closest  // Set state
                localDraggedNode = closest  // Update local immediately
                dragOffset = .zero
                viewModel.selectedNodeID = closest.id
                
                // Wrap async call
                Task {
                    await viewModel.model.pauseSimulation()
                    print("Drag started: Simulation paused")  // Confirm in console
                }
            } else if let _ = GestureUtils.closestEdge(at: screenPos, visibleEdges: viewModel.model.visibleEdges(), visibleNodes: viewModel.model.visibleNodes(), context: context) {
                // Handle edge drag if needed (add Task if async)
            } else {
                print("No node hit; falling back to pan")  // Debug: Why pan?
                panStartOffset = offset
            }
        }
        
        if let node = localDraggedNode {
            let modelDelta = CGPoint(x: value.translation.width / zoomScale, y: value.translation.height / zoomScale)
            dragOffset = modelDelta
            isAddingEdge = distance(value.predictedEndLocation, value.startLocation) > 30.0  // Uses global distance func
            if isAddingEdge {
                if let target = GestureUtils.closestNode(at: value.predictedEndLocation, visibleNodes: viewModel.model.visibleNodes().filter { $0.id != node.id }, context: context) {
                    potentialEdgeTarget = target
                } else {
                    potentialEdgeTarget = nil
                }
            }
        } else if let startOffset = panStartOffset {
            offset = startOffset + CGSize(width: value.translation.width, height: value.translation.height)
        }
    }

    // Keep this sync; wrap async inside Task
    private func handleDragEnded(value: DragGesture.Value) {
        guard let node = draggedNode else {
            print("Drag end: No draggedNode (likely pan mode)")  // Debug: Why skipped?
            panStartOffset = nil
            isDragging = false
            return
        }
        
        let modelDelta = CGPoint(x: value.translation.width / zoomScale, y: value.translation.height / zoomScale)
        
        // Wrap all async + state clearing to ensure order
        Task {
            await viewModel.model.updateNodePosition(id: node.id, delta: modelDelta)
            if let target = potentialEdgeTarget, isAddingEdge {
                print("Adding edge from \(node.id.uuidString) to \(target.id.uuidString)")  // Debug: Confirm add (fixed UUID to String)
                await viewModel.addEdge(from: node.id, to: target.id, type: viewModel.pendingEdgeType)
            } else {
                print("No edge added: target=\(potentialEdgeTarget?.id.uuidString ?? "nil"), isAddingEdge=\(isAddingEdge)")  // Debug: Why not? (fixed UUID to String)
            }
            await viewModel.model.resumeSimulation()
            print("Drag ended: Simulation resumed")
            
            // Clear states after async completes (prevents premature clearing)
            draggedNode = nil
            dragOffset = .zero
            potentialEdgeTarget = nil
            isAddingEdge = false
            panStartOffset = nil
            isDragging = false
        }
    }
    
    private func handleLongPressEnded() {
        showMenu = true
    }
    
    private func handlePanChanged(value: DragGesture.Value) {
        if panStartOffset == nil {
            panStartOffset = offset
        }
        offset = CGSize(width: panStartOffset!.width + value.translation.width, height: panStartOffset!.height + value.translation.height)
    }
    
    private func handlePanEnded(value: DragGesture.Value) {
        panStartOffset = nil
    }
    
    private func addEdge(from fromID: NodeID, to targetID: NodeID) {
        Task {
            await viewModel.addEdge(from: fromID, to: targetID, type: viewModel.pendingEdgeType)
        }
    }
}
----------------------------------------------------------------------------------------------------
File: GraphSection.swift
Path: GraphEditorWatch/Views/GraphSection.swift
Last modified: 2025-10-11 10:22:33

Contents:
//
//  GraphSection.swift
//  GraphEditorWatch
//
//  Created by handcart on 10/5/25.  // Updated date for refactor
//

import SwiftUI

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    @State private var graphName: String = ""
    @State private var showNewSheet: Bool = false
    @State private var newGraphName: String = ""
    @State private var graphs: [String] = []
    @State private var errorMessage: String?
    
    var body: some View {
        Section(header: Text("Graph")) {
            TextField("Graph Name", text: $graphName)
                .accessibilityIdentifier("graphNameTextField")
            if viewModel.canRedo || viewModel.canUndo {
                Section(header: Text("Undo")) {
                    if viewModel.canUndo {
                        Button("Undo") {
                            Task { await viewModel.undo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("undoButton")
                    }
                    if viewModel.canRedo {
                        Button("Redo") {
                            Task { await viewModel.redo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("redoButton")
                    }
                }
            }
            
            TextField("Graph Name", text: $graphName)
                .onAppear { graphName = viewModel.currentGraphName }
            
            Button("New Graph") {
                newGraphName = ""
                showNewSheet = true
            }
            .accessibilityIdentifier("newGraphButton")
            .onSubmit { /* Same as above */ }
            .sheet(isPresented: $showNewSheet) {
                VStack {
                    TextField("New Graph Name", text: $newGraphName)
                        .accessibilityIdentifier("newGraphNameTextField")  // Add this
                    Button("Create") {
                        Task {
                            do {
                                try await viewModel.model.createNewGraph(name: newGraphName)
                                viewModel.currentGraphName = newGraphName
                                showNewSheet = false
                                onDismiss()
                            } catch {
                                errorMessage = error.localizedDescription
                            }
                        }
                    }
                    .accessibilityIdentifier("createButton")
                }
            }
            
            Button("Save Graph") {
                Task {
                    viewModel.currentGraphName = graphName
                    do {
                        try await viewModel.model.saveGraph()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("saveButton")
            .onSubmit { /* Same as above */ }
            
            Button("Load Graph") {
                Task {
                    do {
                        try await viewModel.model.loadGraph(name: graphName)
                        viewModel.currentGraphName = graphName
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("loadButton")
            .onSubmit { /* Same as above */ }
            
            Button("List Graphs") {
                Task {
                    do {
                        graphs = try await viewModel.model.listGraphNames()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .accessibilityIdentifier("listGraphsButton")
            .onSubmit { /* Same as above */ }
            
            ForEach(graphs, id: \.self) { name in
                Button(name) {
                    Task {
                        do {
                            try await viewModel.model.loadGraph(name: name)
                            viewModel.currentGraphName = name
                            graphName = name
                            onDismiss()
                        } catch {
                            errorMessage = error.localizedDescription
                        }
                    }
                }
            }
            
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.clearGraph() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
            .accessibilityIdentifier("resetGraphButton")
            
            Button("Delete Graph", role: .destructive) {
                Task {
                    do {
                        try await viewModel.model.deleteGraph(name: graphName)
                        graphName = "default"
                        try await viewModel.model.loadGraph(name: "default")
                        onDismiss()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .onSubmit { /* Same as above */ }
            .accessibilityLabel("deleteGraphButton")
            
            if let error = errorMessage {
                Text(error).foregroundColor(.red)
            }
        }
        .accessibilityLabel("Graph section")  // NEW: Accessibility
    }
}
----------------------------------------------------------------------------------------------------
File: GraphUtilities.swift
Path: GraphEditorWatch/Views/GraphUtilities.swift
Last modified: 2025-10-11 18:46:49

Contents:
// GraphUtilities.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//
import SwiftUI
import GraphEditorShared
import CoreGraphics

struct ViewSizeKey: PreferenceKey {
    static var defaultValue: CGSize = .zero
    static func reduce(value: inout CGSize, nextValue: () -> CGSize) {
        value = nextValue()
    }
}

struct NodeWrapper: Equatable, Identifiable {
    let id: UUID?
    let node: (any NodeProtocol)?
    
    init(node: (any NodeProtocol)?) {
        self.node = node
        self.id = node?.id
    }
    
    static func == (lhs: NodeWrapper, rhs: NodeWrapper) -> Bool {
        lhs.id == rhs.id
    }
}

struct InnerViewConfig {
    let geo: GeometryProxy
    let viewModel: GraphViewModel
    let zoomScale: Binding<CGFloat>
    let offset: Binding<CGSize>
    let draggedNode: Binding<NodeWrapper>
    let dragOffset: Binding<CGPoint>
    let potentialEdgeTarget: Binding<NodeWrapper>
    let panStartOffset: Binding<CGSize?>
    let showMenu: Binding<Bool>
    let showOverlays: Binding<Bool>
    let maxZoom: CGFloat
    let crownPosition: Binding<Double>
    let updateZoomRangesHandler: (CGSize) -> Void
    let selectedNodeID: Binding<NodeID?>
    let selectedEdgeID: Binding<UUID?>
    let canvasFocus: FocusState<Bool>
    let onCenterGraph: () -> Void
    let isAddingEdge: Binding<Bool>
    let isSimulatingBinding: Binding<Bool>
    let isDragging: Binding<Bool>
    
    init(
        geo: GeometryProxy,
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<NodeWrapper>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<NodeWrapper>,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        showOverlays: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        updateZoomRangesHandler: @escaping (CGSize) -> Void,
        selectedNodeID: Binding<NodeID?>,
        selectedEdgeID: Binding<UUID?>,
        canvasFocus: FocusState<Bool>,
        onCenterGraph: @escaping () -> Void,
        isAddingEdge: Binding<Bool>,
        isSimulatingBinding: Binding<Bool>,  // NEW: Add this param
        isDragging: Binding<Bool>
    ) {
        self.geo = geo
        self.viewModel = viewModel
        self.zoomScale = zoomScale
        self.offset = offset
        self.draggedNode = draggedNode
        self.dragOffset = dragOffset
        self.potentialEdgeTarget = potentialEdgeTarget
        self.panStartOffset = panStartOffset
        self.showMenu = showMenu
        self.showOverlays = showOverlays
        self.maxZoom = maxZoom
        self.crownPosition = crownPosition
        self.updateZoomRangesHandler = updateZoomRangesHandler
        self.selectedNodeID = selectedNodeID
        self.selectedEdgeID = selectedEdgeID
        self.canvasFocus = canvasFocus
        self.onCenterGraph = onCenterGraph
        self.isAddingEdge = isAddingEdge
        self.isSimulatingBinding = isSimulatingBinding  // NEW: Assign it
        self.isDragging = isDragging
    }
}
----------------------------------------------------------------------------------------------------
File: InnerView.swift
Path: GraphEditorWatch/Views/InnerView.swift
Last modified: 2025-10-11 18:40:05

Contents:
//
//  InnerView.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

// InnerView.swift

import SwiftUI
import GraphEditorShared

struct InnerView: View {
    let config: InnerViewConfig
    
    var body: some View {
        let draggedNodeBinding = Binding<(any NodeProtocol)?>(
            get: { config.draggedNode.wrappedValue.node },
            set: { config.draggedNode.wrappedValue = NodeWrapper(node: $0) }
        )
        let potentialEdgeTargetBinding = Binding<(any NodeProtocol)?>(
            get: { config.potentialEdgeTarget.wrappedValue.node },
            set: { config.potentialEdgeTarget.wrappedValue = NodeWrapper(node: $0) }
        )
        
        let canvasView = GraphCanvasView(
            viewModel: config.viewModel,
            zoomScale: config.zoomScale,
            offset: config.offset,
            draggedNode: draggedNodeBinding,
            dragOffset: config.dragOffset,
            potentialEdgeTarget: potentialEdgeTargetBinding,
            selectedNodeID: config.selectedNodeID,
            viewSize: config.geo.size,
            panStartOffset: config.panStartOffset,
            showMenu: config.showMenu,
            maxZoom: config.maxZoom,
            crownPosition: config.crownPosition,
            onUpdateZoomRanges: { config.updateZoomRangesHandler(config.geo.size) },
            selectedEdgeID: config.selectedEdgeID,
            showOverlays: config.showOverlays,
            isAddingEdge: config.isAddingEdge,
            isDragging: config.isDragging
        )
            .accessibilityIdentifier("GraphCanvas")
            .focused(config.canvasFocus.projectedValue)
            .focusable()
        
        if config.showMenu.wrappedValue {
            MenuView(
                viewModel: config.viewModel,
                isSimulatingBinding: config.isSimulatingBinding,
                onCenterGraph: config.onCenterGraph,
                showMenu: config.showMenu,
                showOverlays: config.showOverlays,
                selectedNodeID: config.selectedNodeID,    // NEW: Pass binding
                selectedEdgeID: config.selectedEdgeID     // NEW: Pass binding
            )
            .navigationTitle("Menu")
        } else {
            canvasView
        }
    }
}
----------------------------------------------------------------------------------------------------
File: MenuView.swift
Path: GraphEditorWatch/Views/MenuView.swift
Last modified: 2025-10-06 20:24:41

Contents:
//
//  MenuView.swift
//  GraphEditor
//
//  Created by handcart on 8/20/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct MenuView: View {
    let viewModel: GraphViewModel
    let isSimulatingBinding: Binding<Bool>
    let onCenterGraph: () -> Void
    @Binding var showMenu: Bool
    @Binding var showOverlays: Bool
    @Binding var selectedNodeID: NodeID?    // NEW: @Binding for reactivity
    @Binding var selectedEdgeID: UUID?      // NEW: @Binding for reactivity
    
    @FocusState private var isMenuFocused: Bool
    @State private var showEditSheet: Bool = false
    @State private var isAddingEdge: Bool = false
    
    var body: some View {
        List {
            AddSection(
                viewModel: viewModel,
                selectedNodeID: selectedNodeID,  // NEW: Use binding.wrappedValue
                onDismiss: { showMenu = false },
                onAddEdge: { type in
                    viewModel.pendingEdgeType = type
                    isAddingEdge = true
                }
            )
            
            // NEW: Conditional EditSection to avoid empty header
            if selectedNodeID != nil || selectedEdgeID != nil {  // NEW: Use bindings
                EditSection(
                    viewModel: viewModel,
                    selectedNodeID: selectedNodeID,      // NEW: Pass binding.wrappedValue
                    selectedEdgeID: selectedEdgeID,      // NEW: Pass binding.wrappedValue
                    onDismiss: { showMenu = false },
                    onEditNode: { showEditSheet = true }
                )
            }
            
            ViewSection(
                showOverlays: $showOverlays,  // Now in scope
                isSimulating: isSimulatingBinding,
                onCenterGraph: onCenterGraph,
                onDismiss: { showMenu = false },  // Now in scope
                onSimulationChange: { newValue in
                    viewModel.model.isSimulating = newValue
                    if newValue {
                        Task { await viewModel.model.startSimulation() }
                    } else {
                        Task { await viewModel.model.stopSimulation() }
                    }
                }
            )
            
            GraphSection(viewModel: viewModel, onDismiss: { showMenu = false })  // Now in scope
        }
        .accessibilityIdentifier("menuList")
        .navigationTitle("Menu")
        .focused($isMenuFocused)  // New: Bind focus to list
        .onAppear {
            isMenuFocused = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                isMenuFocused = true
            }
            // NEW: Debug log for selections
            print("Menu appeared: selectedNodeID=\(selectedNodeID?.uuidString.prefix(8) ?? "nil"), selectedEdgeID=\(selectedEdgeID?.uuidString.prefix(8) ?? "nil")")
        }
        .onChange(of: isMenuFocused) { _, newValue in
            print("Menu focus: \(newValue)") // Debug (fixed typo)
            if !newValue {
                isMenuFocused = true // Auto-recover
            }
        }
        .ignoresSafeArea(.keyboard)
        .sheet(isPresented: $showEditSheet) {  // New: Local sheet for edit
            if let selectedID = viewModel.selectedNodeID {
                EditContentSheet(selectedID: selectedID, viewModel: viewModel, onSave: { newContent in
                    Task { await viewModel.model.updateNodeContent(withID: selectedID, newContent: newContent) }
                    showEditSheet = false
                })
            }
        }
        .onChange(of: isAddingEdge) { _, newValue in  // New: Handle add edge mode (if needed; or pass to parent)
            if newValue {
                // Optionally notify viewModel or handle here
            }
        }
    }
}

#Preview {
    @Previewable @State var mockSelectedNodeID: NodeID?
    @Previewable @State var mockSelectedEdgeID: UUID? = UUID()  // Simulate
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    mockViewModel.setSelectedEdge(UUID())  // Simulate edge selection for preview
    return MenuView(
        viewModel: mockViewModel,
        isSimulatingBinding: .constant(false),
        onCenterGraph: {},
        showMenu: .constant(true),
        showOverlays: .constant(false),
        selectedNodeID: $mockSelectedNodeID,  // NEW
        selectedEdgeID: $mockSelectedEdgeID   // NEW
    )
}
----------------------------------------------------------------------------------------------------
File: NodeView.swift
Path: GraphEditorWatch/Views/NodeView.swift
Last modified: 2025-09-16 11:24:30

Contents:
//
//  NodeView.swift
//  GraphEditor
//
//  Created by handcart on 8/13/25.
//

import SwiftUI
import GraphEditorShared

struct NodeView: View {
    let node: any NodeProtocol
    let isSelected: Bool
    let zoomScale: CGFloat
    
    var body: some View {
        ZStack {
            if isSelected {
                Circle()
                    .stroke(Color.yellow, lineWidth: 4 * zoomScale)
                    .frame(width: node.radius * 2 * zoomScale + 4 * zoomScale, height: node.radius * 2 * zoomScale + 4 * zoomScale)
            }
            Circle()
                .fill(node.fillColor)  // Or dynamic based on node type
                .frame(width: node.radius * 2 * zoomScale, height: node.radius * 2 * zoomScale)
            
            // Add icon/label as in ToggleNode.draw
            if let toggleNode = node as? ToggleNode {
                Text(toggleNode.isExpanded ? "-" : "+")
                    .foregroundColor(.white)
                    .font(.system(size: max(8.0, 12.0 * zoomScale), weight: .bold))
            }
            
            Text("\(node.label)")
                .foregroundColor(.white)
                .font(.system(size: max(8.0, 12.0 * zoomScale)))
                .offset(y: -(node.radius + 10) * zoomScale)  // Position above
        }
    }
}
----------------------------------------------------------------------------------------------------
File: ViewSection.swift
Path: GraphEditorWatch/Views/ViewSection.swift
Last modified: 2025-10-05 16:02:44

Contents:
//
//  ViewSection.swift
//  GraphEditor
//
//  Created by handcart on 10/5/25.
//

import SwiftUI

struct ViewSection: View {
    @Binding var showOverlays: Bool
    let isSimulating: Binding<Bool>
    let onCenterGraph: () -> Void
    let onDismiss: () -> Void
    let onSimulationChange: (Bool) -> Void
    
    var body: some View {
        Section(header: Text("View")) {
            Toggle("Show Overlays", isOn: $showOverlays)
                .onSubmit { /* No-op for toggle */ }
            
            Toggle("Run Simulation", isOn: isSimulating)
                .onChange(of: isSimulating.wrappedValue) { _, newValue in
                    onSimulationChange(newValue)
                }
                .onSubmit { /* No-op for toggle */ }
            
            Button("Center Graph") {
                onCenterGraph()
                onDismiss()
            }
            .onSubmit { onCenterGraph(); onDismiss() }
        }
        .accessibilityLabel("View section")  // NEW: Accessibility
    }
}
--------------------------------------------------
