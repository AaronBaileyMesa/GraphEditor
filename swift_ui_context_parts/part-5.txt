## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-09-04 09:54:20
Table of Contents:
1. GraphEditorWatch/Views/GraphGesturesModifier.swift
2. GraphEditorWatch/Views/MenuView.swift
3. GraphEditorWatch/Views/NodeView.swift--------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-09-04 09:53:09

Contents:
//
//  GraphGesturesModifier.swift
//  GraphEditorWatch
//
//  Created by handcart on 2025-08-16

import SwiftUI
import WatchKit
import GraphEditorShared
import os.log  // Added for optimized logging

enum HitType {
    case node
    case edge
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    
    @State private var dragStartNode: (any NodeProtocol)? = nil
    @State private var isMovingSelectedNode: Bool = false
    @State private var longPressTimer: Timer? = nil
    @State private var isLongPressTriggered: Bool = false
    @State private var gestureStartCentroid: CGPoint = .zero  // New: Lock centroid at gesture start
    
    private let dragStartThreshold: CGFloat = 5.0
    
    // Optimized logger
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "gestures")
    
    // New helper: Model to screen conversion (inverse of screenToModel; use your existing if available)
    private func modelToScreen(_ modelPos: CGPoint, zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> CGPoint {
        let safeZoom = max(zoomScale, 0.1)
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let panOffset = CGPoint(x: offset.width, y: offset.height)
        let relative = modelPos - effectiveCentroid
        let scaled = relative * safeZoom
        let screenPos = scaled + viewCenter + panOffset
        return screenPos
    }
    
    // New: Screen-space hit test for nodes (consistent usability)
    private func hitTestNodesInScreenSpace(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> (any NodeProtocol)? {
        var closestNode: (any NodeProtocol)? = nil
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius  // Fixed screen size (e.g., 50pt)
        
#if DEBUG
        var nodeDistances: [(label: Int, screenPos: CGPoint, dist: CGFloat)] = []  // For logging
        logger.debug("Using centroid: \(String(describing: effectiveCentroid)) for this gesture")
#endif
        
        for node in visibleNodes {
            let nodeScreenPos = modelToScreen(node.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            let dist = hypot(screenPos.x - nodeScreenPos.x, screenPos.y - nodeScreenPos.y)
            
#if DEBUG
            nodeDistances.append((node.label, nodeScreenPos, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestNode = node
            }
        }
        
#if DEBUG
        // Log sorted by distance for verification
        nodeDistances.sort { $0.dist < $1.dist }
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: screenPos))")
        for (label, pos, dist) in nodeDistances.prefix(5) {  // Limit to top 5 closest
            logger.debug("Node \(label): screen pos \(String(describing: pos)), dist \(dist)")
        }
        if let closest = closestNode {
            logger.debug("Hit: Node \(closest.label) (dist \(minScreenDist) <= \(hitScreenRadius))")
        } else {
            logger.debug("Miss: Closest dist \(nodeDistances.first?.dist ?? .infinity) > \(hitScreenRadius)")
        }
#endif
        
        return closestNode
    }
    
    // New: Screen-space hit test for edges (for consistency with nodes)
    private func hitTestEdgesInScreenSpace(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> GraphEdge? {
        var closestEdge: GraphEdge? = nil
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius / 2  // Smaller for edges to avoid overlapping node taps
        
#if DEBUG
        var edgeDistances: [(id: UUID, dist: CGFloat)] = []  // For logging
#endif
        
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.to }) else { continue }
            
            let fromScreen = modelToScreen(fromNode.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            let toScreen = modelToScreen(toNode.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, to: toScreen)
            
#if DEBUG
            edgeDistances.append((edge.id, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestEdge = edge
            }
        }
        
#if DEBUG
        edgeDistances.sort { $0.dist < $1.dist }
        logger.debug("Edge Hit Test: Top distances \(edgeDistances.prefix(5).map { "\($0.id): \($0.dist)" }.joined(separator: ", "))")
        if let closest = closestEdge {
            logger.debug("Hit: Edge \(closest.id) (dist \(minScreenDist) <= \(hitScreenRadius))")
        }
#endif
        
        return closestEdge
    }
    
    private func hitTest(at modelPos: CGPoint, type: HitType) -> Any? {
        let minDist = viewModel.model.visibleNodes().map { distance($0.position, modelPos) }.min() ?? 0
        print("Tap at \(modelPos); closest node dist: \(minDist)")
        
        let modelHitRadius = Constants.App.hitScreenRadius / zoomScale * 2.0
        switch type {
        case .node:
            return viewModel.model.visibleNodes().first { distance($0.position, modelPos) < modelHitRadius }
        case .edge:
            return viewModel.model.visibleEdges().first { edge in
                guard let from = viewModel.model.nodes.first(where: { $0.id == edge.from }),
                      let to = viewModel.model.nodes.first(where: { $0.id == edge.to }) else { return false }
                let dist = pointToLineDistance(point: modelPos, from: from.position, to: to.position)
                return dist < modelHitRadius / 2  // Example usage if needed; adjust as per your logic
            }
        }
    }
    
    private func focalPointForCentering() -> CGPoint {
        let visibleNodes = viewModel.model.visibleNodes()
        guard !visibleNodes.isEmpty else { return .zero }
        var effectiveCentroid = centroid(of: visibleNodes) ?? .zero
        
        // Check if selectedNodeID is non-nil
        if let nodeID = selectedNodeID {
            // Find the selected node
            guard let selected = visibleNodes.first(where: { $0.id == nodeID }) else {
                return effectiveCentroid
            }
            effectiveCentroid = selected.position
        } else if let edgeID = selectedEdgeID {
            // Find the edge and its connected nodes
            guard let edge = viewModel.model.edges.first(where: { $0.id == edgeID }),
                  let from = visibleNodes.first(where: { $0.id == edge.from }),
                  let to = visibleNodes.first(where: { $0.id == edge.to }) else {
                return effectiveCentroid
            }
            effectiveCentroid = (from.position + to.position) / 2
        }
        
        #if DEBUG
        logger.debug("Focal point calculated: \(String(describing: effectiveCentroid))")
        #endif
        
        return effectiveCentroid
    }
    
    func body(content: Content) -> some View {
        let dragGesture = DragGesture(minimumDistance: dragStartThreshold, coordinateSpace: .local)
            .onChanged { value in
                Task { @MainActor in
                    gestureStartCentroid = focalPointForCentering()  // Lock at start if not already
                    
                    // Set panStartOffset early if no hit at current location (for immediate panning near nodes if not long-pressing)
                    let currentHit = hitTestNodesInScreenSpace(at: value.location, visibleNodes: viewModel.model.visibleNodes(), zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: gestureStartCentroid)
                    if currentHit == nil && !isLongPressTriggered {
                        if panStartOffset == nil {
                            panStartOffset = offset
                            #if DEBUG
                            logger.debug("Pan started: Initial offset \(String(describing: offset))")
                            #endif
                        }
                    }
                    
                    // Existing long press timer logic...
                    if longPressTimer == nil && !isLongPressTriggered {
                        longPressTimer = Timer.scheduledTimer(withTimeInterval: 0.5, repeats: false) { _ in
                            isLongPressTriggered = true
                            WKInterfaceDevice.current().play(.click)
                        }
                    }
                    
                    // Panning update (allow during gesture if no drag active)
                    if let startOffset = panStartOffset, draggedNode == nil {
                        offset = startOffset + CGSize(width: value.translation.width, height: value.translation.height)
                        #if DEBUG
                        logger.debug("Panning updated: New offset \(String(describing: offset)), Translation \(String(describing: value.translation))")
                        #endif
                    }
                    
                    if isLongPressTriggered {
                        // Initiate node drag only on long press
                        if let hitNode = hitTestNodesInScreenSpace(at: value.startLocation, visibleNodes: viewModel.model.visibleNodes(), zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: gestureStartCentroid) {
                            draggedNode = hitNode
                            dragStartNode = hitNode
                            dragOffset = .zero
                            if let currentID = selectedNodeID, currentID == hitNode.id {
                                isMovingSelectedNode = true
                            } else {
                                selectedNodeID = hitNode.id  // Select if not already
                            }
                            Task { await viewModel.model.pauseSimulation() }
                            Task { await viewModel.snapshot() }
                            showMenu = true  // Show menu only on long press
                        }
                        
                        if let node = draggedNode {
                            dragOffset = CGPoint(x: value.translation.width / zoomScale, y: value.translation.height / zoomScale)
                            let tempPos = node.position + dragOffset
                            let visibleNodes = viewModel.model.visibleNodes()
                            let nearby = viewModel.model.physicsEngine.queryNearby(position: tempPos, radius: Constants.Physics.minCollisionDist, nodes: visibleNodes)
                            potentialEdgeTarget = nearby.first { $0.id != node.id }
                        }
                    }
                    
                    // Existing diagnostic logs...
                    #if DEBUG
                    let effectiveCentroid = focalPointForCentering()
                    let translated = CGPoint(x: value.location.x - viewSize.width / 2 - offset.width, y: value.location.y - viewSize.height / 2 - offset.height)
                    let unscaled = CGPoint(x: translated.x / zoomScale, y: translated.y / zoomScale)
                    let touchPos = effectiveCentroid + unscaled
                    logger.debug("--- .onChanged Diagnostic ---")
                    logger.debug("Effective Centroid: \(String(describing: effectiveCentroid))")
                    logger.debug("Screen Pos: \(String(describing: value.location))")
                    logger.debug("Translated: \(String(describing: translated))")
                    logger.debug("Unscaled: \(String(describing: unscaled))")
                    logger.debug("Model Pos (touchPos): \(String(describing: touchPos))")
                    logger.debug("Visible Nodes Count: \(viewModel.model.visibleNodes().count)")
                    logger.debug("-----------------------------")
                    #endif
                }
            }
            .onEnded { value in
                Task { @MainActor in
                    longPressTimer?.invalidate()
                    longPressTimer = nil
                    isLongPressTriggered = false
                    
                    let translationMagnitude = hypot(value.translation.width, value.translation.height)
                    let isTap = translationMagnitude < dragStartThreshold
                    
                    let visibleNodes = viewModel.model.visibleNodes()
                    let visibleEdges = viewModel.model.visibleEdges()
                    
                    let tapScreenPos = value.startLocation
                    let translated = CGPoint(x: tapScreenPos.x - viewSize.width / 2 - offset.width, y: tapScreenPos.y - viewSize.height / 2 - offset.height)
                    let unscaled = CGPoint(x: translated.x / zoomScale, y: translated.y / zoomScale)
                    let tapModelPos = gestureStartCentroid + unscaled
                    
                    if isTap {
                        Task { await viewModel.snapshot() }
                        if let hitNode = hitTestNodesInScreenSpace(at: tapScreenPos, visibleNodes: visibleNodes, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: gestureStartCentroid) {
                            #if DEBUG
                            logger.debug("Tap hit node: \(hitNode.id)")
                            #endif
                            let updatedNode = hitNode.handlingTap()
                            // Fixed: Check for changes using Equatable properties to avoid existential != issues
                            if updatedNode.id == hitNode.id && (updatedNode.position != hitNode.position || updatedNode.velocity != hitNode.velocity || updatedNode.isExpanded != hitNode.isExpanded || updatedNode.content != hitNode.content) {
                                Task { await viewModel.model.updateNode(withID: updatedNode.id) }  // Fixed: Use withID to match function signature
                            }
                            if let currentNodeID = selectedNodeID {
                                if currentNodeID == hitNode.id {
                                    selectedNodeID = nil  // Deselect if already selected
                                } else {
                                    selectedNodeID = hitNode.id  // Select new
                                    selectedEdgeID = nil
                                }
                            } else {
                                selectedNodeID = hitNode.id  // Select if none
                                selectedEdgeID = nil
                            }
                            WKInterfaceDevice.current().play(.success)  // UX: Confirm selection
                            #if DEBUG
                            logger.debug("Tap selection updated: selectedNodeID \(selectedNodeID?.uuidString ?? "nil")")
                            #endif
                        } else {
                            // Edge hit test (now screen-space for consistency)
                            if let hitEdge = hitTestEdgesInScreenSpace(at: tapScreenPos, visibleEdges: visibleEdges, visibleNodes: visibleNodes, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: gestureStartCentroid) {
                                #if DEBUG
                                logger.debug("Tap hit edge: \(hitEdge.id)")
                                #endif
                                if let currentEdgeID = selectedEdgeID {
                                    if currentEdgeID == hitEdge.id {
                                        selectedEdgeID = nil
                                    } else {
                                        selectedEdgeID = hitEdge.id
                                        selectedNodeID = nil
                                    }
                                } else {
                                    selectedEdgeID = hitEdge.id
                                    selectedNodeID = nil
                                }
                                WKInterfaceDevice.current().play(.success)
                                #if DEBUG
                                logger.debug("Tap selection updated: selectedEdgeID \(selectedEdgeID?.uuidString ?? "nil")")
                                #endif
                            } else {
                                // Miss: Deselect all with feedback
                                selectedNodeID = nil
                                selectedEdgeID = nil
                                WKInterfaceDevice.current().play(.failure)  // UX: Indicate miss
                                #if DEBUG
                                logger.debug("Tap miss: Deselected all")
                                #endif
                            }
                        }
                        
#if DEBUG
                        logger.debug("SelectedNodeID after tap: \(selectedNodeID?.uuidString ?? "nil"), SelectedEdgeID after: \(selectedEdgeID?.uuidString ?? "nil")")
#endif
                        
                        // Diagnostic logs (gated and summarized)
#if DEBUG
                        let effectiveCentroid = focalPointForCentering()
                        let translated = CGPoint(x: value.startLocation.x - viewSize.width / 2 - offset.width, y: value.startLocation.y - viewSize.height / 2 - offset.height)
                        let unscaled = CGPoint(x: translated.x / zoomScale, y: translated.y / zoomScale)
                        logger.debug("--- Tap (.onEnded) Diagnostic ---")
                        logger.debug("Effective Centroid: \(String(describing: effectiveCentroid))")
                        logger.debug("Screen Pos: \(String(describing: value.startLocation))")
                        logger.debug("Translated: \(String(describing: translated))")
                        logger.debug("Unscaled: \(String(describing: unscaled))")
                        logger.debug("Model Pos (tapModelPos): \(String(describing: tapModelPos))")
                        logger.debug("Visible Nodes Count: \(visibleNodes.count)")  // Summarized
                        logger.debug("--------------------------------")
#endif
                    } else {
                        Task { await viewModel.snapshot() }
                        if let startNode = dragStartNode, let target = potentialEdgeTarget, target.id != startNode.id {
                            let newEdge = GraphEdge(from: startNode.id, to: target.id)
                            if !viewModel.model.hasCycle(adding: newEdge) &&
                                !viewModel.model.edges.contains(where: { $0.from == startNode.id && $0.to == target.id }) {
                                Task {  // Already wrapped, but ensure all async in Task
                                    await viewModel.model.addEdge(from: startNode.id, to: target.id)
                                    await MainActor.run { WKInterfaceDevice.current().play(.success) }
                                }
                            }
                        } else if isMovingSelectedNode, let node = dragStartNode,
                                  let index = viewModel.model.nodes.firstIndex(where: { $0.id == node.id }) {
                            var updatedNode = viewModel.model.nodes[index]
                            // Fixed: Update position immutably to avoid subproperty mutation issues on existentials
                            let newX = updatedNode.position.x + value.translation.width / zoomScale
                            let newY = updatedNode.position.y + value.translation.height / zoomScale
                            updatedNode.position = CGPoint(x: newX, y: newY)
                            viewModel.model.nodes[index] = updatedNode
                            Task { await viewModel.model.startSimulation() }
                            WKInterfaceDevice.current().play(.click)
                        }
                        // Removed: Task { await viewModel.handleTap() } — Assuming it's redundant; restore if needed for custom logic
                    }
                    
                    withAnimation(.spring(duration: 0.3, bounce: 0.2)) {
                        onUpdateZoomRanges()
                    }
                    
                    dragStartNode = nil
                    isMovingSelectedNode = false
                    draggedNode = nil
                    dragOffset = .zero
                    potentialEdgeTarget = nil
                    panStartOffset = nil
                    onUpdateZoomRanges()
                }
            }
        
        content
            .highPriorityGesture(dragGesture)  // New: Prioritize over system gestures on WatchOS
    }
    
    private func distance(_ p1: CGPoint, _ p2: CGPoint) -> CGFloat {
        hypot(p1.x - p2.x, p1.y - p2.y)
    }
    
    private func pointToLineDistance(point: CGPoint, from: CGPoint, to: CGPoint) -> CGFloat {
        let lineVec = to - from
        let pointVec = point - from
        let lineLen = hypot(lineVec.x, lineVec.y)
        if lineLen == 0 { return hypot(point.x - from.x, point.y - from.y) }
        let dot = pointVec.x * lineVec.x + pointVec.y * lineVec.y
        let denom = lineLen * lineLen
        let tUnclamped = dot / denom
        // Fixed: Explicit CGFloat literals to resolve type inference and conformance error
        let t = max(CGFloat(0), min(CGFloat(1), tUnclamped))
        let projection = from + (lineVec * t)
        return hypot(point.x - projection.x, point.y - projection.y)
    }
}
----------------------------------------------------------------------------------------------------
File: MenuView.swift
Path: GraphEditorWatch/Views/MenuView.swift
Last modified: 2025-09-02 09:42:47

Contents:
//
//  MenuView.swift
//  GraphEditor
//
//  Created by handcart on 8/20/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct AddSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let onDismiss: () -> Void
    let onAddEdge: () -> Void  // New: Callback for starting add edge mode
    
    var body: some View {
        Section(header: Text("Add")) {
            Button("Add Node") {
                Task { await viewModel.addNode(at: .zero) }
                onDismiss()
            }
            Button("Add Toggle Node") {
                Task { await viewModel.addToggleNode(at: .zero) }
                onDismiss()
            }
            if let selectedID = selectedNodeID {
                Button("Add Child") {
                    Task { await viewModel.addChild(to: selectedID) }
                    onDismiss()
                }
                Button("Add Edge") {  // New
                    onAddEdge()
                    onDismiss()
                }
            }
        }
    }
}

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let selectedEdgeID: UUID?
    let onDismiss: () -> Void
    let onEditNode: () -> Void  // New: Callback for showing edit sheet
    
    var body: some View {
        Section(header: Text("Edit")) {
            if let selectedID = selectedNodeID {
                Button("Edit Node") {  // New
                    onEditNode()
                    onDismiss()
                }
                Button("Delete Node", role: .destructive) {  // Line ~67?
                    Task { await viewModel.deleteNode(withID: selectedID) }
                    onDismiss()
                }
            }
            if let selectedEdgeID = selectedEdgeID,
               let selectedEdge = viewModel.model.edges.first(where: { $0.id == selectedEdgeID }) {
                let fromID = selectedEdge.from
                let toID = selectedEdge.to
                let isBi = viewModel.model.isBidirectionalBetween(fromID, toID)
                Button(isBi ? "Delete Both Edges" : "Delete Edge", role: .destructive) {
                    Task { await viewModel.snapshot() }
                    if isBi {
                        let pair = viewModel.model.edgesBetween(fromID, toID)
                        viewModel.model.edges.removeAll { pair.contains($0) }
                    } else {
                        viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                    }
                    Task { await viewModel.model.startSimulation() }
                    onDismiss()
                }
                Button("Reverse Edge") {  // New
                    Task { await viewModel.snapshot() }
                    viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                    viewModel.model.edges.append(GraphEdge(from: toID, to: fromID))
                    Task { await viewModel.model.startSimulation() }
                    onDismiss()
                }
            }
            if viewModel.canUndo {
                Button("Undo") {
                    Task { await viewModel.undo() }
                    onDismiss()
                }
            }
            if viewModel.canRedo {
                Button("Redo") {
                    Task { await viewModel.redo() }
                    onDismiss()
                }
            }
        }
    }
}

struct ViewSection: View {
    @Binding var showOverlays: Bool
    let isSimulating: Binding<Bool>
    let onCenterGraph: () -> Void
    let onDismiss: () -> Void
    let onSimulationChange: (Bool) -> Void
    
    var body: some View {
        Section(header: Text("View")) {
            Toggle("Show Overlays", isOn: $showOverlays)
            Toggle("Run Simulation", isOn: isSimulating)
                .onChange(of: isSimulating.wrappedValue) { oldValue, newValue in
                    onSimulationChange(newValue)
                }
            
            Button("Center Graph") {
                onCenterGraph()
                onDismiss()
            }
        }
    }
}

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    var body: some View {
        Section(header: Text("Graph")) {
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.resetGraph() }
                onDismiss()
            }
            Button("Save Graph") {
                Task { await viewModel.model.save() }
                onDismiss()
            }
            Button("Load Graph") {
                Task { await viewModel.loadGraph() }
                onDismiss()
            }
        }
    }
}

struct MenuView: View {
    let viewModel: GraphViewModel
    @Binding var showOverlays: Bool
    @Binding var showMenu: Bool
    let onCenterGraph: () -> Void
    @State private var showEditSheet: Bool = false  // New: Local state for edit sheet
    @State private var isAddingEdge: Bool = false  // New: Local state for add edge mode
    @FocusState private var isMenuFocused: Bool  // New
    
    private var isSimulatingBinding: Binding<Bool> {
        Binding(
            get: { viewModel.model.isSimulating },
            set: { viewModel.model.isSimulating = $0 }
        )
    }
    
    var body: some View {
        List {
            if let selected = viewModel.selectedNodeID {
                Button("Edit Node") { showEditSheet = true }  // If sheet in MenuView, add @State showEditSheet: Bool = false and .sheet similar to ContentView
                Button("Delete Node") {
                    Task { await viewModel.deleteNode(withID: selected) }
                    showMenu = false
                }
                Button("Add Edge from Node") { isAddingEdge = true; showMenu = false }
            }
            if let selectedEdge = viewModel.selectedEdgeID {
                Button("Delete Edge") {
                    Task { await viewModel.deleteEdge(withID: selectedEdge) }
                    showMenu = false
                }
                Button("Reverse Edge") {
                    if let edgeIndex = viewModel.model.edges.firstIndex(where: { $0.id == selectedEdge }) {
                        let edge = viewModel.model.edges[edgeIndex]
                        viewModel.model.edges[edgeIndex] = GraphEdge(id: edge.id, from: edge.to, to: edge.from)
                        Task { await viewModel.model.startSimulation() }
                    }
                    WKInterfaceDevice.current().play(.success)
                    showMenu = false
                }
            }
            
            ViewSection(
                showOverlays: $showOverlays,
                isSimulating: isSimulatingBinding,
                onCenterGraph: onCenterGraph, onDismiss: { showMenu = false },
                onSimulationChange: { newValue in
                    viewModel.model.isSimulating = newValue
                    if newValue {
                        Task { await viewModel.model.startSimulation() }
                    } else {
                        Task { await viewModel.model.stopSimulation() }
                    }
                }
            )
            
            GraphSection(viewModel: viewModel, onDismiss: { showMenu = false })
        }
        .navigationTitle("Menu")
        .focused($isMenuFocused)  // New: Bind focus to list
        .onAppear {
            isMenuFocused = true  // Force focus on appear
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                isMenuFocused = true  // Double-focus for reliability
            }
        }
        .onChange(of: isMenuFocused) { oldValue, newValue in
            print("Menu focus: (newValue)") // Debug
            if !newValue {
                isMenuFocused = true // Auto-recover
            }
        }
        .ignoresSafeArea(.keyboard)
        .sheet(isPresented: $showEditSheet) {  // New: Local sheet for edit
            if let selectedID = viewModel.selectedNodeID {
                EditContentSheet(selectedID: selectedID, viewModel: viewModel, onSave: { newContent in
                    Task { await viewModel.updateNodeContent(withID: selectedID, newContent: newContent) }
                    showEditSheet = false
                })
            }
        }
        .onChange(of: isAddingEdge) { oldValue, newValue in  // New: Handle add edge mode (if needed; or pass to parent)
            if newValue {
                // Optionally notify viewModel or handle here
            }
        }
    }
}

#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    ContentView(viewModel: mockViewModel)  // <-- If ContentView now takes viewModel, add it here too (see next fix)
}
----------------------------------------------------------------------------------------------------
File: NodeView.swift
Path: GraphEditorWatch/Views/NodeView.swift
Last modified: 2025-08-16 10:12:42

Contents:
//
//  NodeView.swift
//  GraphEditor
//
//  Created by handcart on 8/13/25.
//

import SwiftUI
import GraphEditorShared


struct NodeView: View {
    let node: any NodeProtocol
    let isSelected: Bool
    let zoomScale: CGFloat
    
    var body: some View {
        ZStack {
            if isSelected {
                Circle()
                    .stroke(Color.yellow, lineWidth: 4 * zoomScale)
                    .frame(width: node.radius * 2 * zoomScale + 4 * zoomScale, height: node.radius * 2 * zoomScale + 4 * zoomScale)
            }
            Circle()
                .fill(node.fillColor)  // Or dynamic based on node type
                .frame(width: node.radius * 2 * zoomScale, height: node.radius * 2 * zoomScale)
            
            // Add icon/label as in ToggleNode.draw
            if let toggleNode = node as? ToggleNode {
                Text(toggleNode.isExpanded ? "-" : "+")
                    .foregroundColor(.white)
                    .font(.system(size: max(8.0, 12.0 * zoomScale), weight: .bold))
            }
            
            Text("\(node.label)")
                .foregroundColor(.white)
                .font(.system(size: max(8.0, 12.0 * zoomScale)))
                .offset(y: -(node.radius + 10) * zoomScale)  // Position above
        }
    }
}
--------------------------------------------------
