## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-09-26 08:21:15
Table of Contents:
1. GraphEditorWatch/Views/GraphGesturesModifier.swift
2. GraphEditorWatch/Views/GraphUtilities.swift
3. GraphEditorWatch/Views/InnerView.swift
4. GraphEditorWatch/Views/MenuView.swift
5. GraphEditorWatch/Views/NodeView.swift
6. GraphEditorWatchTests/AccessibilityTests.swift
7. GraphEditorWatchTests/CoordinateTransformerTests.swift
8. GraphEditorWatchTests/EditContentSheetTests.swift--------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-09-25 17:07:07

Contents:
//
//  GraphGesturesModifier.swift
//  GraphEditorWatch
//
//  Created by handcart on 2025-08-16

import SwiftUI
import WatchKit
import GraphEditorShared
import os.log  // Added for optimized logging

enum HitType {
    case node
    case edge
}

struct GestureContext {
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    let effectiveCentroid: CGPoint
}

struct NodeDistanceInfo {
    let label: Int
    let screenPos: CGPoint
    let dist: CGFloat
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    
    @State private var dragStartNode: (any NodeProtocol)?
    @State private var isMovingSelectedNode: Bool = false
    @State private var gestureStartCentroid: CGPoint = .zero
    @State private var startLocation: CGPoint?
    
    private let dragStartThreshold: CGFloat = 10.0  // Increased for better tap vs. drag distinction
    
    // Optimized logger
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "gestures")
    
    func body(content: Content) -> some View {
        let dragGesture = DragGesture(minimumDistance: 0, coordinateSpace: .local)  // Zero for immediate detection
            .onChanged { value in
                let visibleNodes = viewModel.model.visibleNodes()  // Or viewModel.model.nodes if no visibleNodes()
                let effectiveCentroid = viewModel.effectiveCentroid  // From ViewModel
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragChanged(value: value, visibleNodes: visibleNodes, context: context)
            }
            .onEnded { value in
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // NEW: Get visible edges (assume method exists; use model.edges if not)
                let effectiveCentroid = viewModel.effectiveCentroid
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragEnded(value: value, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            }
        content
            .highPriorityGesture(dragGesture)
    }
}

extension GraphGesturesModifier {
    // Screen-space hit test for nodes (consistent usability)
    func hitTestNodesInScreenSpace(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], context: GestureContext) -> (any NodeProtocol)? {
        var closestNode: (any NodeProtocol)?
        var minScreenDist: CGFloat = .infinity
        let minHitRadius: CGFloat = 10.0  // Minimum tappable radius in screen points for small zooms
        let padding: CGFloat = 5.0  // Extra padding in screen points for forgiveness

    #if DEBUG
        var nodeDistances: [NodeDistanceInfo] = []  // For logging
        logger.debug("Using centroid: \(String(describing: context.effectiveCentroid)) for this gesture")
    #endif

        for node in visibleNodes {
            let safeZoom = max(context.zoomScale, 0.1)
            let nodeScreenPos = CoordinateTransformer.modelToScreen(node.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let dist = distance(screenPos, nodeScreenPos)

            let visibleRadius = node.radius * safeZoom
            let nodeHitRadius = max(minHitRadius, visibleRadius) + padding  // Matches visible size, with min and padding

    #if DEBUG
            nodeDistances.append(NodeDistanceInfo(label: node.label, screenPos: nodeScreenPos, dist: dist))
            // Optional: Log per-node hit radius for debugging
            logger.debug("Node \(node.label): visibleRadius \(visibleRadius), nodeHitRadius \(nodeHitRadius)")
    #endif

            if dist <= nodeHitRadius && dist < minScreenDist {
                minScreenDist = dist
                closestNode = node
            }
        }

    #if DEBUG
        // Log sorted by distance for verification
        nodeDistances.sort { $0.dist < $1.dist }
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: screenPos))")
        for info in nodeDistances.prefix(5) {  // Limit to top 5 closest
            logger.debug("Node \(info.label): screen pos \(String(describing: info.screenPos)), dist \(info.dist)")
        }
        if let closest = closestNode {
            logger.debug("Hit: Node \(closest.label) (dist \(minScreenDist))")
        } else {
            logger.debug("Miss: Closest dist \(nodeDistances.first?.dist ?? .infinity)")
        }
    #endif
        return closestNode
    }
    
    // Screen-space hit test for edges (for consistency with nodes)
    func hitTestEdgesInScreenSpace(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], context: GestureContext) -> GraphEdge? {
        var closestEdge: GraphEdge?
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius / 2  // Smaller for edges to avoid overlapping node taps
        
#if DEBUG
        var edgeDistances: [(id: UUID, dist: CGFloat)] = []  // For logging
#endif
        
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let safeZoom = max(context.zoomScale, 0.1)
            let fromScreen = CoordinateTransformer.modelToScreen(fromNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let toScreen = CoordinateTransformer.modelToScreen(toNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, endPoint: toScreen)
            
#if DEBUG
            edgeDistances.append((edge.id, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestEdge = edge
            }
        }
        
#if DEBUG
        // Log sorted by distance
        edgeDistances.sort { $0.dist < $1.dist }
        logger.debug("Edge Hit Test at screen \(String(describing: screenPos))")
        for (id, dist) in edgeDistances.prefix(3) {
            logger.debug("Edge \(id): dist \(dist)")
        }
        if let closest = closestEdge {
            logger.debug("Hit: Edge \(closest.id) (dist \(minScreenDist) <= \(hitScreenRadius))")
        } else {
            logger.debug("Miss: Closest dist \(edgeDistances.first?.dist ?? .infinity) > \(hitScreenRadius)")
        }
#endif
        return closestEdge
    }
    
    private func resetGestureState() {
        dragStartNode = nil
        isMovingSelectedNode = false
        draggedNode = nil
        dragOffset = .zero
        potentialEdgeTarget = nil
        panStartOffset = nil
        startLocation = nil
        isAddingEdge = false
        onUpdateZoomRanges()
        gestureStartCentroid = .zero
    }
    
    func handleTap(at location: CGPoint, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) -> Bool {
    #if DEBUG
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: location))")
        logger.debug("Visible Nodes Count: \(visibleNodes.count)")
        logger.debug("--------------------------------")
    #endif
        
        // Pause simulation first (mimics handleTap)
        Task { await viewModel.model.pauseSimulation() }
        
        let hitNode = hitTestNodesInScreenSpace(at: location, visibleNodes: visibleNodes, context: context)
        if let node = hitNode {
            // Node hit: Handle toggle or selection (replicates viewModel.handleTap logic)
            if let toggleNode = node as? ToggleNode {
                // Toggle without selection
                let updated = toggleNode.handlingTap()
                if let index = viewModel.model.nodes.firstIndex(where: { $0.id == toggleNode.id }) {
                    viewModel.model.nodes[index] = AnyNode(updated)
                }
                selectedNodeID = nil
                selectedEdgeID = nil
                logger.debug("Toggled ToggleNode \(toggleNode.label)")
            } else {
                // Select regular node (toggle off if already)
                selectedNodeID = (node.id == selectedNodeID) ? nil : node.id
                selectedEdgeID = nil
                logger.debug("Selected regular Node \(node.label)")
            }
            // Sync with ViewModel (triggers onChange in ContentView)
            viewModel.objectWillChange.send()
            
            // Resume simulation after delay (mimics handleTap)
            Task { await viewModel.resumeSimulationAfterDelay() }
            return true  // Hit occurred
        } else {
            // No node: Check edges
            let hitEdge = hitTestEdgesInScreenSpace(at: location, visibleEdges: visibleEdges, visibleNodes: visibleNodes, context: context)
            if let edge = hitEdge {
                // Select edge, clear node
                selectedEdgeID = edge.id
                selectedNodeID = nil
                logger.debug("Tap selected Edge \(edge.id.uuidString.prefix(8))")
                
                // Sync with ViewModel (triggers onChange in ContentView)
                viewModel.objectWillChange.send()
                
                // Resume simulation after delay (mimics handleTap)
                Task { await viewModel.resumeSimulationAfterDelay() }
                return true  // Hit occurred
            } else {
                // Miss: Clear all
                selectedNodeID = nil
                selectedEdgeID = nil
                logger.debug("Tap missed; cleared selections")
                
                // Sync with ViewModel (triggers onChange in ContentView)
                viewModel.objectWillChange.send()
                
                // Resume simulation after delay (mimics handleTap)
                Task { await viewModel.resumeSimulationAfterDelay() }
                return false  // No hit
            }
        }
    }
    
    private func handleDragChanged(value: DragGesture.Value, visibleNodes: [any NodeProtocol], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
        
        // Initial hit if no dragStartNode (start of drag)
        if dragStartNode == nil {
            let hitNode = hitTestNodesInScreenSpace(at: location, visibleNodes: visibleNodes, context: context)
            if let node = hitNode {
                dragStartNode = node
                draggedNode = node
                dragOffset = .zero
                isAddingEdge = true  // Enter edge creation mode
                logger.debug("Drag of \(dragMagnitude) started from Node \(node.label)")
            } else {
                // Pan the canvas instead
                if panStartOffset == nil {
                    panStartOffset = offset
                }
                let delta = CGSize(width: translation.width, height: translation.height)
                offset = panStartOffset! + delta
            }
            startLocation = location  // For tap threshold in onEnded
            gestureStartCentroid = context.effectiveCentroid
            return
        }
        
        // Ongoing drag: Update drag offset and check for potential target
        if let node = draggedNode {
            dragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            let potential = hitTestNodesInScreenSpace(at: location, visibleNodes: visibleNodes, context: context)
            potentialEdgeTarget = (potential?.id != node.id) ? potential : nil  // Avoid self-edges
            if let target = potentialEdgeTarget {
                logger.debug("Potential edge target: Node \(target.label)")
            }
        }
    }
    
    private func handleDragEnded(value: DragGesture.Value, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
        
        // Defer cleanup (ensures reset even on errors/taps)
        defer { resetGestureState() }
        
        // Early exit for taps (short drag) - enhanced for node/edge selection
        if let start = startLocation, dragMagnitude < dragStartThreshold, distance(start, location) < dragStartThreshold {
            let wasHit = handleTap(at: location, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            if wasHit {
                WKInterfaceDevice.current().play(.click)  // Subtler haptic feedback (short tick/tap) on successful hit
            }
            return  // Exit early
        }
        
        print("Processing as drag: magnitude \(dragMagnitude), translation \(translation)")
        
        if let dragged = draggedNode {
            Task { await viewModel.model.snapshot() }
            let modelDragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            print("Drag offset in model: \(modelDragOffset)")
            
            if let target = potentialEdgeTarget, target.id != dragged.id, isAddingEdge {
                handleEdgeCreation(from: dragged, to: target, translation: translation)
            } else {
                handleNodeMovement(for: dragged, with: modelDragOffset)
            }
        }
        withAnimation(.spring(duration: 0.3, bounce: 0.2)) {
            onUpdateZoomRanges()
        }
    }
    
    private func handleEdgeCreation(from dragged: any NodeProtocol, to target: any NodeProtocol, translation: CGSize) {
        // Duplicate check with logging
        let exists = viewModel.model.edges.contains { edge in
            (edge.from == dragged.id && edge.target == target.id) || (edge.from == target.id && edge.target == dragged.id)
        }
        if !exists {
            print("No duplicate; adding edge")
            // Heuristic: Downward = hierarchy
            let type = (translation.height > 0) ? .hierarchy : viewModel.pendingEdgeType
            viewModel.pendingEdgeType = type  // Update for UI
            Task {
                await viewModel.addEdge(from: dragged.id, target: target.id, type: type)  // Async call
            }
            print("Created edge of type \(type.rawValue) from node \(dragged.label) to \(target.label)")
            isAddingEdge = false
        } else {
            print("Duplicate edge ignored between \(dragged.label) and \(target.label)")
        }
    }
    
    private func handleNodeMovement(for dragged: any NodeProtocol, with modelDragOffset: CGPoint) {
        // No target: Move the node (with casts for .with, as it's not on protocol)
        if let index = viewModel.model.nodes.firstIndex(where: { $0.id == dragged.id }) {
            let oldNode = viewModel.model.nodes[index]
            let unwrapped = oldNode.unwrapped
            let newPos = unwrapped.position + modelDragOffset
            let updatedNode: AnyNode
            if let concrete = unwrapped as? Node {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else if let concrete = unwrapped as? ToggleNode {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else {
                logger.error("Unsupported node type for move: \(type(of: unwrapped))")
                return
            }
            viewModel.model.nodes[index] = updatedNode
            print("Moved node \(unwrapped.label) to new position \(newPos)")
            Task { await viewModel.model.startSimulation() }
        }
    }
}
extension GraphGesturesModifier {
    func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return distance(point, startPoint)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return distance(point, proj)
    }
}
----------------------------------------------------------------------------------------------------
File: GraphUtilities.swift
Path: GraphEditorWatch/Views/GraphUtilities.swift
Last modified: 2025-09-19 14:46:52

Contents:
// GraphUtilities.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//
import SwiftUI
import GraphEditorShared
import CoreGraphics

struct ViewSizeKey: PreferenceKey {
    static var defaultValue: CGSize = .zero
    static func reduce(value: inout CGSize, nextValue: () -> CGSize) {
        value = nextValue()
    }
}

struct NodeWrapper: Equatable, Identifiable {
    let id: UUID?
    let node: (any NodeProtocol)?
    
    init(node: (any NodeProtocol)?) {
        self.node = node
        self.id = node?.id
    }
    
    static func == (lhs: NodeWrapper, rhs: NodeWrapper) -> Bool {
        lhs.id == rhs.id
    }
}

struct InnerViewConfig {
    let geo: GeometryProxy
    let viewModel: GraphViewModel
    let zoomScale: Binding<CGFloat>
    let offset: Binding<CGSize>
    let draggedNode: Binding<NodeWrapper>
    let dragOffset: Binding<CGPoint>
    let potentialEdgeTarget: Binding<NodeWrapper>
    let panStartOffset: Binding<CGSize?>
    let showMenu: Binding<Bool>
    let showOverlays: Binding<Bool>
    let maxZoom: CGFloat
    let crownPosition: Binding<Double>
    let updateZoomRangesHandler: (CGSize) -> Void
    let selectedNodeID: Binding<NodeID?>
    let selectedEdgeID: Binding<UUID?>
    let canvasFocus: FocusState<Bool>
    let onCenterGraph: () -> Void
    let isAddingEdge: Binding<Bool>
    let isSimulatingBinding: Binding<Bool>
    
    init(
        geo: GeometryProxy,
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<NodeWrapper>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<NodeWrapper>,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        showOverlays: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        updateZoomRangesHandler: @escaping (CGSize) -> Void,
        selectedNodeID: Binding<NodeID?>,
        selectedEdgeID: Binding<UUID?>,
        canvasFocus: FocusState<Bool>,
        onCenterGraph: @escaping () -> Void,
        isAddingEdge: Binding<Bool>,
        isSimulatingBinding: Binding<Bool>  // NEW: Add this param
    ) {
        self.geo = geo
        self.viewModel = viewModel
        self.zoomScale = zoomScale
        self.offset = offset
        self.draggedNode = draggedNode
        self.dragOffset = dragOffset
        self.potentialEdgeTarget = potentialEdgeTarget
        self.panStartOffset = panStartOffset
        self.showMenu = showMenu
        self.showOverlays = showOverlays
        self.maxZoom = maxZoom
        self.crownPosition = crownPosition
        self.updateZoomRangesHandler = updateZoomRangesHandler
        self.selectedNodeID = selectedNodeID
        self.selectedEdgeID = selectedEdgeID
        self.canvasFocus = canvasFocus
        self.onCenterGraph = onCenterGraph
        self.isAddingEdge = isAddingEdge
        self.isSimulatingBinding = isSimulatingBinding  // NEW: Assign it
    }
}
----------------------------------------------------------------------------------------------------
File: InnerView.swift
Path: GraphEditorWatch/Views/InnerView.swift
Last modified: 2025-09-19 14:46:52

Contents:
//
//  InnerView.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

// InnerView.swift

import SwiftUI
import GraphEditorShared

struct InnerView: View {
    let config: InnerViewConfig
    
    var body: some View {
        let draggedNodeBinding = Binding<(any NodeProtocol)?>(
            get: { config.draggedNode.wrappedValue.node },
            set: { config.draggedNode.wrappedValue = NodeWrapper(node: $0) }
        )
        let potentialEdgeTargetBinding = Binding<(any NodeProtocol)?>(
            get: { config.potentialEdgeTarget.wrappedValue.node },
            set: { config.potentialEdgeTarget.wrappedValue = NodeWrapper(node: $0) }
        )
        
        let canvasView = GraphCanvasView(
            viewModel: config.viewModel,
            zoomScale: config.zoomScale,
            offset: config.offset,
            draggedNode: draggedNodeBinding,
            dragOffset: config.dragOffset,
            potentialEdgeTarget: potentialEdgeTargetBinding,
            selectedNodeID: config.selectedNodeID,
            viewSize: config.geo.size,
            panStartOffset: config.panStartOffset,
            showMenu: config.showMenu,
            maxZoom: config.maxZoom,
            crownPosition: config.crownPosition,
            onUpdateZoomRanges: { config.updateZoomRangesHandler(config.geo.size) },
            selectedEdgeID: config.selectedEdgeID,
            showOverlays: config.showOverlays,
            isAddingEdge: config.isAddingEdge
        )
            .accessibilityIdentifier("GraphCanvas")
            .focused(config.canvasFocus.projectedValue)
            .focusable()
        
        if config.showMenu.wrappedValue {
            MenuView(
                viewModel: config.viewModel,
                isSimulatingBinding: config.isSimulatingBinding,
                onCenterGraph: config.onCenterGraph,
                showMenu: config.showMenu,
                showOverlays: config.showOverlays,
                selectedNodeID: config.selectedNodeID,    // NEW: Pass binding
                selectedEdgeID: config.selectedEdgeID     // NEW: Pass binding
            )
            .navigationTitle("Menu")
        } else {
            canvasView
        }
    }
}
----------------------------------------------------------------------------------------------------
File: MenuView.swift
Path: GraphEditorWatch/Views/MenuView.swift
Last modified: 2025-09-19 12:38:29

Contents:
//
//  MenuView.swift
//  GraphEditor
//
//  Created by handcart on 8/20/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct AddSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let onDismiss: () -> Void
    let onAddEdge: (EdgeType) -> Void  // UPDATED: Pass type to callback
    
    @State private var selectedEdgeType: EdgeType = .association  // NEW: Local state for Picker
    
    var body: some View {
        Section(header: Text("Add")) {
            Button("Add Node") {
                Task { await viewModel.addNode(at: .zero) }
                onDismiss()
            }
            .onSubmit { onDismiss() }  // NEW: WatchOS focus improvement
            
            Button("Add Toggle Node") {
                Task { await viewModel.addToggleNode(at: .zero) }
                onDismiss()
            }
            .onSubmit { onDismiss() }
            
            if let selectedID = selectedNodeID {
                Button("Add Child") {
                    Task { await viewModel.addChild(to: selectedID) }
                    onDismiss()
                }
                .onSubmit { onDismiss() }
                
                // NEW: Picker for edge type
                Picker("Edge Type", selection: $selectedEdgeType) {
                    Text("Association").tag(EdgeType.association)
                    Text("Hierarchy").tag(EdgeType.hierarchy)
                }
                .accessibilityLabel("Select edge type: \(selectedEdgeType.rawValue)")
                
                Button("Add Edge") {  // UPDATED: Pass selected type
                    onAddEdge(selectedEdgeType)
                    onDismiss()
                }
                .onSubmit { onAddEdge(selectedEdgeType); onDismiss() }
                .disabled(selectedNodeID == nil)  // Improvement: Explicit disable
            }
        }
        .accessibilityLabel("Add section")  // NEW: Accessibility
    }
}

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?  // Keep let for now (uses wrappedValue)
    let selectedEdgeID: UUID?    // Keep let for now (uses wrappedValue)
    let onDismiss: () -> Void
    let onEditNode: () -> Void
    
    @State private var isProcessing = false  // NEW: Loading state
    
    private func findSelectedEdge() -> GraphEdge? {
        viewModel.model.edges.first { $0.id == selectedEdgeID }
    }
    
    private func clearSelections() {
        // NEW: Clear bindings (passed as let, so call ViewModel to sync)
        viewModel.setSelectedNode(nil)
        viewModel.setSelectedEdge(nil)
    }
    
    var body: some View {
        Section(header: Text("Edit")) {
            if let selectedID = selectedNodeID {
                Button("Edit Node") {  // New
                    onEditNode()
                    onDismiss()
                    
                }
                .onSubmit { onEditNode(); onDismiss() }
                .disabled(isProcessing)

                if viewModel.isSelectedToggleNode {
                                Button("Toggle Expand/Collapse") {
                                    Task { await viewModel.toggleSelectedNode() }
                                    onDismiss()
                                }
                                .onSubmit { /* Same as above */ }
                            }
                    
                Button("Delete Node", role: .destructive) {
                    Task {
                        isProcessing = true
                        do {
                            await viewModel.deleteNode(withID: selectedID)
                        }
                        clearSelections()  // NEW: Clear after delete
                        isProcessing = false
                    }
                    onDismiss()
                }
                .onSubmit { /* Same as above, but for focus */ }
                .disabled(isProcessing)
            }
            
            if let selectedEdgeID = selectedEdgeID,
               let selectedEdge = findSelectedEdge() {
                let fromID = selectedEdge.from
                let toID = selectedEdge.target
                let isBi = viewModel.model.isBidirectionalBetween(fromID, toID)
                let fromLabel = viewModel.model.nodes.first(where: { $0.id == fromID })?.label ?? 0
                let toLabel = viewModel.model.nodes.first(where: { $0.id == toID })?.label ?? 0
                
                // Display edge info
                Text("Edge: \(fromLabel) → \(toLabel) (\(selectedEdge.type.rawValue))")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Button(isBi ? "Delete Both Edges" : "Delete Edge", role: .destructive) {
                    Task {
                        isProcessing = true
                        await viewModel.model.snapshot()
                        if isBi {
                            let pair = viewModel.model.edgesBetween(fromID, toID)
                            viewModel.model.edges.removeAll { pair.contains($0) }
                        } else {
                            viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                        }
                        await viewModel.model.startSimulation()
                        clearSelections()  // NEW: Clear after delete
                        isProcessing = false
                    }
                    onDismiss()
                }
                .onSubmit { /* Same as above */ }
                .disabled(isProcessing)
                
                if selectedEdge.type == .hierarchy {  // NEW: Only for directed edges
                    Button("Reverse Edge") {
                        Task {
                            isProcessing = true
                            await viewModel.model.snapshot()
                            viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                            viewModel.model.edges.append(GraphEdge(from: toID, target: fromID, type: .hierarchy))
                            await viewModel.model.startSimulation()
                            clearSelections()  // NEW: Clear after reverse
                            isProcessing = false
                        }
                        onDismiss()
                    }
                    .onSubmit { /* Same as above */ }
                    .disabled(isProcessing)
                }
            }
        }
        .accessibilityLabel("Edit section")  // NEW: Accessibility
        .foregroundColor(isProcessing ? .gray : .primary)  // NEW: Visual feedback for processing
    }
}

struct ViewSection: View {
    @Binding var showOverlays: Bool
    let isSimulating: Binding<Bool>
    let onCenterGraph: () -> Void
    let onDismiss: () -> Void
    let onSimulationChange: (Bool) -> Void
    
    var body: some View {
        Section(header: Text("View")) {
            Toggle("Show Overlays", isOn: $showOverlays)
                .onSubmit { /* No-op for toggle */ }
            
            Toggle("Run Simulation", isOn: isSimulating)
                .onChange(of: isSimulating.wrappedValue) { _, newValue in
                    onSimulationChange(newValue)
                }
                .onSubmit { /* No-op for toggle */ }
            
            Button("Center Graph") {
                onCenterGraph()
                onDismiss()
            }
            .onSubmit { onCenterGraph(); onDismiss() }
        }
        .accessibilityLabel("View section")  // NEW: Accessibility
    }
}

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    var body: some View {
        Section(header: Text("Graph")) {
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.clearGraph() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
            
            Button("Save Graph") {
                Task { await viewModel.model.save() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
            
            Button("Load Graph") {
                Task { await viewModel.loadGraph() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
        }
        .accessibilityLabel("Graph section")  // NEW: Accessibility
    }
}

struct MenuView: View {
    let viewModel: GraphViewModel
    let isSimulatingBinding: Binding<Bool>
    let onCenterGraph: () -> Void
    @Binding var showMenu: Bool
    @Binding var showOverlays: Bool
    @Binding var selectedNodeID: NodeID?    // NEW: @Binding for reactivity
    @Binding var selectedEdgeID: UUID?      // NEW: @Binding for reactivity
    
    @FocusState private var isMenuFocused: Bool
    @State private var showEditSheet: Bool = false
    @State private var isAddingEdge: Bool = false
    
    var body: some View {
        List {
            AddSection(
                viewModel: viewModel,
                selectedNodeID: selectedNodeID,  // NEW: Use binding.wrappedValue
                onDismiss: { showMenu = false },
                onAddEdge: { type in
                    viewModel.pendingEdgeType = type
                    isAddingEdge = true
                }
            )
            
            // NEW: Conditional EditSection to avoid empty header
            if selectedNodeID != nil || selectedEdgeID != nil {  // NEW: Use bindings
                EditSection(
                    viewModel: viewModel,
                    selectedNodeID: selectedNodeID,      // NEW: Pass binding.wrappedValue
                    selectedEdgeID: selectedEdgeID,      // NEW: Pass binding.wrappedValue
                    onDismiss: { showMenu = false },
                    onEditNode: { showEditSheet = true }
                )
            }
            
            // Keep your existing ViewSection and GraphSection here
            ViewSection(
                showOverlays: $showOverlays,  // Now in scope
                isSimulating: isSimulatingBinding,
                onCenterGraph: onCenterGraph,
                onDismiss: { showMenu = false },  // Now in scope
                onSimulationChange: { newValue in
                    viewModel.model.isSimulating = newValue
                    if newValue {
                        Task { await viewModel.model.startSimulation() }
                    } else {
                        Task { await viewModel.model.stopSimulation() }
                    }
                }
            )
            
            GraphSection(viewModel: viewModel, onDismiss: { showMenu = false })  // Now in scope
        }
        .navigationTitle("Menu")
        .focused($isMenuFocused)  // New: Bind focus to list
        .onAppear {
            isMenuFocused = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                isMenuFocused = true
            }
            // NEW: Debug log for selections
            print("Menu appeared: selectedNodeID=\(selectedNodeID?.uuidString.prefix(8) ?? "nil"), selectedEdgeID=\(selectedEdgeID?.uuidString.prefix(8) ?? "nil")")
        }
        .onChange(of: isMenuFocused) { _, newValue in
            print("Menu focus: \(newValue)") // Debug (fixed typo)
            if !newValue {
                isMenuFocused = true // Auto-recover
            }
        }
        .ignoresSafeArea(.keyboard)
        .sheet(isPresented: $showEditSheet) {  // New: Local sheet for edit
            if let selectedID = viewModel.selectedNodeID {
                EditContentSheet(selectedID: selectedID, viewModel: viewModel, onSave: { newContent in
                    Task { await viewModel.model.updateNodeContent(withID: selectedID, newContent: newContent) }
                    showEditSheet = false
                })
            }
        }
        .onChange(of: isAddingEdge) { _, newValue in  // New: Handle add edge mode (if needed; or pass to parent)
            if newValue {
                // Optionally notify viewModel or handle here
            }
        }
    }
}

#Preview {
    @Previewable @State var mockSelectedNodeID: NodeID?
    @Previewable @State var mockSelectedEdgeID: UUID? = UUID()  // Simulate
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    // UPDATED: Pass new bindings for preview (use placeholders); simulate selection for testing
    mockViewModel.setSelectedEdge(UUID())  // Simulate edge selection for preview
    return MenuView(
        viewModel: mockViewModel,
        isSimulatingBinding: .constant(false),
        onCenterGraph: {},
        showMenu: .constant(true),
        showOverlays: .constant(false),
        selectedNodeID: $mockSelectedNodeID,  // NEW
        selectedEdgeID: $mockSelectedEdgeID   // NEW
    )
}
----------------------------------------------------------------------------------------------------
File: NodeView.swift
Path: GraphEditorWatch/Views/NodeView.swift
Last modified: 2025-09-16 11:24:30

Contents:
//
//  NodeView.swift
//  GraphEditor
//
//  Created by handcart on 8/13/25.
//

import SwiftUI
import GraphEditorShared

struct NodeView: View {
    let node: any NodeProtocol
    let isSelected: Bool
    let zoomScale: CGFloat
    
    var body: some View {
        ZStack {
            if isSelected {
                Circle()
                    .stroke(Color.yellow, lineWidth: 4 * zoomScale)
                    .frame(width: node.radius * 2 * zoomScale + 4 * zoomScale, height: node.radius * 2 * zoomScale + 4 * zoomScale)
            }
            Circle()
                .fill(node.fillColor)  // Or dynamic based on node type
                .frame(width: node.radius * 2 * zoomScale, height: node.radius * 2 * zoomScale)
            
            // Add icon/label as in ToggleNode.draw
            if let toggleNode = node as? ToggleNode {
                Text(toggleNode.isExpanded ? "-" : "+")
                    .foregroundColor(.white)
                    .font(.system(size: max(8.0, 12.0 * zoomScale), weight: .bold))
            }
            
            Text("\(node.label)")
                .foregroundColor(.white)
                .font(.system(size: max(8.0, 12.0 * zoomScale)))
                .offset(y: -(node.radius + 10) * zoomScale)  // Position above
        }
    }
}
----------------------------------------------------------------------------------------------------
File: AccessibilityTests.swift
Path: GraphEditorWatchTests/AccessibilityTests.swift
Last modified: 2025-09-22 11:21:14

Contents:
//
//  AccessibilityTests.swift
//  GraphEditor
//
//  Created by handcart on 9/22/25.
//
import Testing
import Foundation
import CoreGraphics
@testable import GraphEditorWatch
@testable import GraphEditorShared
import XCTest
import SwiftUI

struct AccessibilityTests {
    private func mockPhysicsEngine() -> GraphEditorShared.PhysicsEngine {
        GraphEditorShared.PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
    }
    
    @Test func testGraphDescription() async throws {
        let storage = MockGraphStorage()
        storage.nodes = [Node(label: 0, position: .zero)]
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        await MainActor.run { model.nextNodeLabel = 1 }
        await model.addNode(at: .zero)
        await model.addNode(at: CGPoint(x: 10, y: 10))
        
        await MainActor.run { model.edges.append(GraphEdge(from: model.nodes[0].id, target: model.nodes[1].id)) }
        
        let descNoSelect = await MainActor.run { model.graphDescription(selectedID: nil, selectedEdgeID: nil) }
        #expect(descNoSelect == "Graph with 2 nodes and 1 directed edge. No node or edge selected.", "Correct desc without selection")
        
        let descWithSelect = await MainActor.run { model.graphDescription(selectedID: model.nodes[0].id, selectedEdgeID: nil) }
        #expect(descWithSelect == "Graph with 2 nodes and 1 directed edge. Node 1 selected, outgoing to: 2; incoming from: none.", "Correct desc with selection")
    }
}
----------------------------------------------------------------------------------------------------
File: CoordinateTransformerTests.swift
Path: GraphEditorWatchTests/CoordinateTransformerTests.swift
Last modified: 2025-09-22 11:21:14

Contents:
//
//  CoordinateTransformerTests.swift
//  GraphEditor
//
//  Created by handcart on 9/22/25.
//
import Testing
import Foundation
import CoreGraphics
@testable import GraphEditorWatch
@testable import GraphEditorShared
import XCTest
import SwiftUI

struct CoordinateTransformerTests {
    @Test func testCoordinateRoundTrip() {
        let viewSize = CGSize(width: 205, height: 251)
        let centroid = CGPoint(x: 150, y: 150)
        let modelPos = CGPoint(x: 167.78, y: 165.66)
        let zoom: CGFloat = 1.0
        let offset = CGSize.zero
        
        let screenPos = CoordinateTransformer.modelToScreen(modelPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        let recoveredModel = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        
        #expect(approximatelyEqual(recoveredModel, modelPos, accuracy: 1e-3), "Round-trip should match original model position")
    }
    
    @Test func testCoordinateRoundTripWithZoomAndOffset() {
        let viewSize = CGSize(width: 205, height: 251)
        let centroid = CGPoint(x: 56.73, y: 161.10)
        let modelPos = CGPoint(x: -40.27, y: 52.60)
        let zoom: CGFloat = 1.0
        let offset = CGSize(width: 81, height: 111.5)
        
        let screenPos = CoordinateTransformer.modelToScreen(modelPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        let recoveredModel = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        
        #expect(approximatelyEqual(recoveredModel, modelPos, accuracy: 1e-3), "Round-trip with zoom and offset should match")
    }
}
----------------------------------------------------------------------------------------------------
File: EditContentSheetTests.swift
Path: GraphEditorWatchTests/EditContentSheetTests.swift
Last modified: 2025-09-25 14:25:51

Contents:
//
//  EditContentSheetTests.swift
//  GraphEditor
//
//  Created by handcart on 9/25/25.
//
import Testing
import SwiftUI
@testable import GraphEditorWatch
@testable import GraphEditorShared

struct EditContentSheetTests {
    private func setupViewModel() async -> GraphViewModel {
        let storage = MockGraphStorage()
        let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
        let model = await GraphModel(storage: storage, physicsEngine: physicsEngine)
        return await GraphViewModel(model: model)
    }
    
    @Test func testSaveStringContent() async {
        let viewModel = await setupViewModel()
        let nodeID = NodeID()
        var savedContent: NodeContent?
        let sheet = EditContentSheet(selectedID: nodeID, viewModel: viewModel) { content in
            savedContent = content
        }
        // Simulate input: Since @State is private, this is placeholder; use XCUITest for full simulation or expose states for testing
        // For example, assume manual set: sheet.selectedType = "String"; sheet.stringValue = "test"; then call onSave
        // Placeholder assertion (adapt based on actual simulation logic)
        _ = sheet  // Use to silence warning
        #expect(savedContent == nil, "Initially nil; add simulation to set .string(\"test\")")
    }
}
--------------------------------------------------
