## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-25 09:19:08
Table of Contents:
1. GraphEditorWatch/Views/ContentView.swift
2. GraphEditorWatch/Views/EdgeMenuView.swift
3. GraphEditorWatch/Views/EditContentSheet.swift
4. GraphEditorWatch/Views/EditSection.swift--------------------------------------------------
File: ContentView.swift
Path: GraphEditorWatch/Views/ContentView.swift
Last modified: 2025-10-23 11:30:40

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared
import Foundation
import CoreGraphics
import os  // Added for logging

struct ContentView: View { // siwftlint:disable type_body_length
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "contentview")  // Added for consistent logging
    
    @ObservedObject var viewModel: GraphViewModel
    @State private var zoomScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var draggedNode: NodeWrapper = NodeWrapper(node: nil)
    @State private var dragOffset: CGPoint = .zero
    @State private var potentialEdgeTarget: NodeWrapper = NodeWrapper(node: nil)
    @State private var selectedNodeID: NodeID?
    @State private var selectedEdgeID: UUID?
    @State private var panStartOffset: CGSize?
    @State private var showMenu: Bool = false
    @State private var showOverlays: Bool = false
    @FocusState private var canvasFocus: Bool
    @State private var minZoom: CGFloat = AppConstants.defaultMinZoom
    @State private var maxZoom: CGFloat = AppConstants.defaultMaxZoom
    @State private var crownPosition: Double = Double(AppConstants.crownZoomSteps) / 2
    @State private var wristSide: WKInterfaceDeviceWristLocation = .left  // Default to left
    @State private var showEditSheet: Bool = false
    @State private var isAddingEdge: Bool = false
    @State private var viewSize: CGSize = .zero
    @State private var isSimulating: Bool = false
    @State private var saturation: Double = 1.0
    
    // NEW: Custom Bindings to sync @State with ViewModel (two-way)
    private var selectedNodeIDBinding: Binding<NodeID?> {
        Binding(
            get: { selectedNodeID },
            set: { newValue in
                selectedNodeID = newValue
                viewModel.selectedNodeID = newValue  // Sync to ViewModel
            }
        )
    }
    
    private var selectedEdgeIDBinding: Binding<UUID?> {
        Binding(
            get: { selectedEdgeID },
            set: { newValue in
                selectedEdgeID = newValue
                viewModel.selectedEdgeID = newValue  // Sync to ViewModel
            }
        )
    }
    
    var body: some View {
        let geoView = GeometryReader { geo in
            let baseView = mainContent(in: geo)
                .onAppear {
                    Task { await viewModel.resumeSimulation() }
                    updateZoomRanges(for: geo.size)
                    wristSide = WKInterfaceDevice.current().wristLocation
                    
#if DEBUG
                    logger.debug("Geometry size: width=\(geo.size.width), height=\(geo.size.height)")
#endif
                    
                    canvasFocus = true
                    
                    let initialNormalized = crownPosition / Double(AppConstants.crownZoomSteps)
                    zoomScale = minZoom + (maxZoom - minZoom) * CGFloat(initialNormalized)
                    
#if DEBUG
                    logger.debug("Initial sync: crownPosition \(self.crownPosition) -> zoomScale \(self.zoomScale)")
#endif
                    
                    viewSize = geo.size  // New: Set viewSize here
                }
                .onChange(of: viewModel.model.nodes) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: viewModel.model.edges) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: crownPosition) { oldValue, newValue in
#if DEBUG
                    logger.debug("Crown position changed in ContentView: from \(oldValue) to \(newValue)")
#endif
                    
                    handleCrownRotation(newValue: newValue)
                }
                .onChange(of: canvasFocus) { oldValue, newValue in
#if DEBUG
                    logger.debug("ContentView canvas focus changed: from \(oldValue) to \(newValue)")
#endif
                    
                    if !newValue { canvasFocus = true }
                }
            
            let intermediateView = baseView
                .onChange(of: zoomScale) { oldValue, newValue in
                    let normalized = (newValue - minZoom) / (maxZoom - minZoom)
                    let targetCrown = Double(AppConstants.crownZoomSteps) * Double(normalized).clamped(to: 0...1)
                    if abs(targetCrown - crownPosition) > 0.01 {
                        crownPosition = targetCrown
                        
#if DEBUG
                        logger.debug("Zoom sync: zoomScale from \(oldValue) to \(newValue) -> crownPosition \(self.crownPosition)")
#endif
                    }
                }
                .onChange(of: viewModel.selectedNodeID) { oldValue, newValue in
#if DEBUG
                    logger.debug("ContentView: ViewModel selectedNodeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
#endif
                    
                    selectedNodeID = newValue  // Sync to local @State
                    viewModel.objectWillChange.send()  // Force re-render if needed
                }
                .onChange(of: viewModel.selectedEdgeID) { oldValue, newValue in
#if DEBUG
                    logger.debug("ContentView: ViewModel selectedEdgeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
#endif
                    
                    selectedEdgeID = newValue
                    viewModel.objectWillChange.send()
                }
                .onReceive(viewModel.model.$isStable) { isStable in
                    if isStable {
#if DEBUG
                        logger.debug("Simulation stable: Centering nodes")
#endif
                        
                        centerGraph()
                    }
                }
                .onReceive(viewModel.model.$simulationError) { error in
                    if let error = error {
#if DEBUG
                        logger.error("Simulation error: \(error.localizedDescription)")
#endif
                    }
                }
            
            intermediateView
        }
        
        let finalView = geoView
            .ignoresSafeArea()
            .focusable(true)  // Make the whole view focusable for crown
            .focused($canvasFocus)  // Bind focus state
            .digitalCrownRotation(  // Restored: Put back here for root-level handling
                $crownPosition,
                from: 0,
                through: Double(AppConstants.crownZoomSteps),
                sensitivity: .medium
            )
        
        finalView
    }
    
    private func mainContent(in geo: GeometryProxy) -> some View {
        ZStack {
            InnerView(config: InnerViewConfig(
                geo: geo,
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                showOverlays: $showOverlays,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                updateZoomRangesHandler: { updateZoomRanges(for: $0) },
                selectedNodeID: selectedNodeIDBinding,  // Use your custom binding
                selectedEdgeID: selectedEdgeIDBinding,  // Use your custom binding
                canvasFocus: _canvasFocus,
                onCenterGraph: centerGraph,
                isAddingEdge: $isAddingEdge,
                isSimulating: $isSimulating,
                saturation: $saturation  // NEW: Pass the binding here
            ))
        }
        /*.overlay(alignment: .bottom) {
            HStack(spacing: 20) {
                if wristSide == .left {
                    addNodeButton(in: geo)
                    menuButton(in: geo)
                } else {
                    menuButton(in: geo)
                    addNodeButton(in: geo)
                }
            }
            .padding(.bottom, 1)
            .padding(.horizontal, 15)
            .transition(.move(edge: .bottom))
        }*/
        // In ContentView.swift (inside body, where .sheet(isPresented: $showMenu) is)
        .sheet(isPresented: $showMenu) {
            NavigationStack {  // NEW: Wrap in NavigationStack for push navigation
                MenuView(
                    viewModel: viewModel,
                    isSimulatingBinding: $isSimulating,
                    onCenterGraph: centerGraph,
                    showMenu: $showMenu,
                    showOverlays: $showOverlays,
                    selectedNodeID: $selectedNodeID,
                    selectedEdgeID: $selectedEdgeID
                )
                .navigationBarTitleDisplayMode(.inline)  // Optional: Compact title
            }
            .onDisappear {
                print("Menu sheet dismissed")
                showMenu = false
                withAnimation(.easeInOut(duration: 0.2)) {
                    saturation = 1.0  // Ensure reset on dismiss
                }
            }
        }
    }
    
    private func handleCrownRotation(newValue: Double) {
#if DEBUG
        logger.debug("handleCrownRotation triggered with newValue: \(newValue)")
#endif
        
        let normalized = newValue.clamped(to: 0...Double(AppConstants.crownZoomSteps)) / Double(AppConstants.crownZoomSteps)
        let targetZoom = minZoom + (maxZoom - minZoom) * CGFloat(normalized)
        
        // New: Animate the zoom change for smoothness
        withAnimation(.easeInOut(duration: 0.1)) {
            zoomScale = targetZoom
        }
        viewModel.centerGraph()  // Direct call
        
#if DEBUG
        logger.debug("Updated zoomScale to: \(self.zoomScale)")
#endif
    }
    
    private func updateZoomRanges(for viewSize: CGSize) {
        let ranges = viewModel.calculateZoomRanges(for: viewSize)
        minZoom = ranges.min
        maxZoom = ranges.max
        zoomScale = zoomScale.clamped(to: minZoom...maxZoom)
    }
    
    // New: Animated centering from new version (with corrected shift sign if needed; tested as-is)
    private func centerGraph() {
        let oldCentroid = viewModel.effectiveCentroid
        viewModel.centerGraph()
        let newCentroid = viewModel.effectiveCentroid
        let centroidShift = CGSize(
            width: (oldCentroid.x - newCentroid.x) * zoomScale,
            height: (oldCentroid.y - newCentroid.y) * zoomScale
        )
        withAnimation(.easeInOut(duration: 0.3)) {
            offset.width += centroidShift.width
            offset.height += centroidShift.height
        }
        
#if DEBUG
        logger.debug("Centering graph: Old centroid x=\(oldCentroid.x), y=\(oldCentroid.y), Shift width=\(centroidShift.width), height=\(centroidShift.height), New target x=\(newCentroid.x), y=\(newCentroid.y)")
#endif
    }
    
    // Existing add node button (unchanged, but renamed for clarity)
    private func addNodeButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            WKInterfaceDevice.current().play(.click)  // Haptic feedback
            
#if DEBUG
            logger.debug("Add Node button tapped!")
#endif
            
            let randomPos = CGPoint(x: CGFloat.random(in: -100...100), y: CGFloat.random(in: -100...100))
            Task { await viewModel.addNode(at: randomPos) }
        }, label: {
            Image(systemName: "plus.circle.fill")
                .font(.system(size: 30))
                .foregroundColor(.green)
        })
        .buttonStyle(.plain)
        .contentShape(Rectangle())
        .frame(minWidth: 44, minHeight: 44)
        .padding(10)
        .background(Color.blue.opacity(0.2))  // TEMP: Visualize tappable area; remove later
    }
    
    private func menuButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            WKInterfaceDevice.current().play(.click)  // Haptic feedback
            
#if DEBUG
            logger.debug("Menu button tapped!")
#endif
            
            showMenu.toggle()
        }, label: {
            Image(systemName: showMenu ? "point.3.filled.connected.trianglepath.dotted" : "line.3.horizontal")
                .font(.system(size: 30))
                .foregroundColor(showMenu ? .green : .blue)
        })
        .buttonStyle(.plain)
        .contentShape(Rectangle())
        .frame(minWidth: 44, minHeight: 44)
        .padding(10)
        .background(Color.red.opacity(0.2))  // TEMP: Visualize; different color for distinction
        .accessibilityLabel("Menu")
    }
}

extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    ContentView(viewModel: mockViewModel)
}
----------------------------------------------------------------------------------------------------
File: EdgeMenuView.swift
Path: GraphEditorWatch/Views/EdgeMenuView.swift
Last modified: 2025-10-24 07:54:16

Contents:
//
//  EdgeMenuView.swift
//  GraphEditor
//
//  Created by handcart on 10/21/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared
import os

struct EdgeMenuView: View {
    let viewModel: GraphViewModel
    let isSimulatingBinding: Binding<Bool>
    let onCenterGraph: () -> Void  // Retained but unused; can remove if not needed
    @Binding var showMenu: Bool
    @Binding var showOverlays: Bool  // Retained but unused
    @Binding var selectedEdgeID: UUID?
    let onDismiss: () -> Void
    
    @FocusState private var isMenuFocused: Bool
    
    private static let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "edgemenuview")
    
    // Fetch edge details for header and title (adapted from EditSection)
    private var edgeDescription: String {
        if let id = selectedEdgeID, let edge = viewModel.model.edges.first(where: { $0.id == id }),
           let fromNode = viewModel.model.nodes.first(where: { $0.id == edge.from }),
           let toNode = viewModel.model.nodes.first(where: { $0.id == edge.target }) {
            return "\(fromNode.label) → \(toNode.label) (\(edge.type.rawValue))"
        }
        return "Unknown"
    }
    
    // Fetch the selected edge for button logic
    private var selectedEdge: GraphEdge? {
        if let id = selectedEdgeID {
            return viewModel.model.edges.first { $0.id == id }
        }
        return nil
    }
    
    // Check if bidirectional for delete label
    private var isBidirectional: Bool {
        if let edge = selectedEdge {
            return viewModel.model.isBidirectionalBetween(edge.from, edge.target)
        }
        return false
    }
    
    var body: some View {
        ScrollView {
            VStack(spacing: 8) {
                HStack(spacing: 8) {
                    // Delete button (icon only, with accessibility)
                    deleteEdgeButton
                    
                    // Reverse button (icon only, with accessibility, only if hierarchy)
                    if let edge = selectedEdge, edge.type == .hierarchy {
                        reverseEdgeButton
                    }
                }
                .padding(.horizontal, 8)  // Ensure buttons don't touch edges
            }
            .padding(4)
        }
        .accessibilityIdentifier("edgeMenuGrid")
        .navigationTitle("Edge: \(edgeDescription)")  // Dynamic name in top-right
        .focused($isMenuFocused)
        .onAppear {
            isMenuFocused = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                isMenuFocused = true
            }
            Self.logger.debug("Edge Menu appeared: selectedEdgeID=\(selectedEdgeID?.uuidString.prefix(8) ?? "nil")")
        }
        .onChange(of: isMenuFocused) { _, newValue in
            Self.logger.debug("Edge Menu focus: \(newValue)")
            if !newValue {
                isMenuFocused = true
            }
        }
        .ignoresSafeArea(.keyboard)
    }
    
    private var deleteEdgeButton: some View {
        MenuButton(
            action: {
                if let edge = selectedEdge {
                    Task {
                        _ = true  // Use local or @State if needed for disabling
                        await viewModel.model.snapshot()
                        if isBidirectional {
                            let pair = viewModel.model.edgesBetween(edge.from, edge.target)
                            viewModel.model.edges.removeAll { pair.contains($0) }
                        } else {
                            viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                        }
                        await viewModel.model.startSimulation()
                        viewModel.setSelectedEdge(nil)
                        // Clear node selection if mixed
                        viewModel.setSelectedNode(nil)
                    }
                }
                onDismiss()
            },
            label: {
                Label("Delete", systemImage: "trash") // Converted to Label for consistency
            },
            accessibilityIdentifier: "deleteEdgeButton",
            role: .destructive
        )
        .buttonStyle(.borderedProminent) // Keep for now; will standardize later
        .tint(.red)
        .accessibilityLabel(isBidirectional ? "Delete Both Edges" : "Delete Edge")
    }

    private var reverseEdgeButton: some View {
        MenuButton(
            action: {
                if let edge = selectedEdge {
                    Task {
                        _ = true
                        await viewModel.model.snapshot()
                        viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                        viewModel.model.edges.append(GraphEdge(from: edge.target, target: edge.from, type: .hierarchy))
                        await viewModel.model.startSimulation()
                        viewModel.setSelectedEdge(nil)
                        viewModel.setSelectedNode(nil)
                    }
                }
                onDismiss()
            },
            label: {
                Label("Reverse", systemImage: "arrow.left.arrow.right")
            },
            accessibilityIdentifier: "reverseEdgeButton"
        )
        .buttonStyle(.bordered)
        .tint(.gray)
        .accessibilityLabel("Reverse Edge")
    }
}
----------------------------------------------------------------------------------------------------
File: EditContentSheet.swift
Path: GraphEditorWatch/Views/EditContentSheet.swift
Last modified: 2025-10-24 12:37:37

Contents:
//
//  EditContentSheet.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

import SwiftUI
import GraphEditorShared

struct EditContentSheet: View {
    let selectedID: NodeID
    let viewModel: GraphViewModel
    let onSave: ([NodeContent]) -> Void
    @Environment(\.dismiss) private var dismiss
    @State private var contents: [NodeContent] = []
    @State private var selectedType: DataType? = nil  // Changed to optional DataType
    @State private var stringValue: String = ""
    @State private var dateValue: Date = Date()
    @State private var numberString: String = ""  // Changed to string for custom input
    @FocusState private var isSheetFocused: Bool
    @State private var editingIndex: Int?  // NEW: Track item being edited inline

    var body: some View {
        ScrollViewReader { proxy in
            List {
                contentsSection(proxy: proxy)
            }
            .navigationTitle("Contents")  // Changed to "Contents" as requested
            .navigationBarTitleDisplayMode(.inline)
            .toolbar {  // Use toolbar for Save/Cancel with icons
                ToolbarItem(placement: .cancellationAction) {
                    Button(action: { dismiss() }) {
                        Image(systemName: "xmark")
                    }.foregroundColor(.red)
                }
                ToolbarItem(placement: .confirmationAction) {
                    Button(action: {
                        addPendingContent()  // Add any pending input before saving
                        onSave(contents)
                    }) {
                        Image(systemName: "square.and.arrow.down")
                    }
                }
            }
            .focused($isSheetFocused)
            .onAppear {
                isSheetFocused = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { isSheetFocused = true }
                if let node = viewModel.model.nodes.first(where: { $0.id == selectedID }) {
                    contents = node.contents
                }
            }
            .onChange(of: isSheetFocused) { _, newValue in
                if !newValue { isSheetFocused = true }  // Auto-recover focus
            }
            .interactiveDismissDisabled(true)  // Prevent accidental swipe-back
        }
    }

    private func contentsSection(proxy: ScrollViewProxy) -> some View {
        Section(
            header: DataTypeSegmentedControl(selectedType: $selectedType)  // Replaced header with segmented control
        ) {
            if contents.isEmpty {
                Text("No contents yet").font(.caption).foregroundColor(.gray)  // Placeholder
            } else {
                ForEach(contents.indices, id: \.self) { index in
                    if editingIndex == index {
                        // Inline edit mode (tap to enter)
                        inlineEditView(for: index)
                            .swipeActions {  // Moved inside ForEach, per row
                                Button("Delete", role: .destructive) {
                                    contents.remove(at: index)  // Use captured index
                                    editingIndex = nil  // Reset if deleted while editing
                                }
                            }
                    } else {
                        Text(displayText(for: contents[index]))
                            .font(.caption)  // Smaller font for compactness
                            .onTapGesture {
                                editingIndex = index  // Tap to edit
                            }
                            .swipeActions {  // Moved inside ForEach, per row
                                Button("Delete", role: .destructive) {
                                    contents.remove(at: index)  // Use captured index
                                }
                            }
                    }
                }
                .onMove { indices, newOffset in
                    contents.move(fromOffsets: indices, toOffset: newOffset)  // Drag to reorder
                }
            }
            
            if let type = selectedType {  // Show inputs only if a type is selected
                if type == .string {
                    TextField("Enter text", text: $stringValue)
                } else if type == .date {
                    DatePicker("Date", selection: $dateValue, displayedComponents: .date)
                        .labelsHidden()
                } else if type == .number {
                    NumericKeypadView(text: $numberString)
                }
            }
        }
        .listRowInsets(EdgeInsets(top: 4, leading: 8, bottom: 4, trailing: 8))  // Reduce padding for compactness
    }
    
    // NEW: Inline edit view for an item (compact, type-specific)
    private func inlineEditView(for index: Int) -> some View {
        let content = contents[index]
        return Group {
            switch content {
            case .string(var str):
                TextField("Edit String", text: Binding(get: { str }, set: { str = $0; contents[index] = .string(str) }))
            case .date(var date):
                DatePicker("Edit Date", selection: Binding(get: { date }, set: { date = $0; contents[index] = .date(date) }), displayedComponents: .date)
                    .labelsHidden()
            case .number(var num):
                let numString = Binding<String>(
                    get: { String(num) },
                    set: { if let newNum = Double($0) { contents[index] = .number(newNum) } }
                )
                NumericKeypadView(text: numString)
            case .boolean(var bool):
                Toggle("Edit Boolean", isOn: Binding(get: { bool }, set: { bool = $0; contents[index] = .boolean(bool) }))
            }
            Button("Done") { editingIndex = nil }  // Exit edit mode
        }
    }
    
    // NEW: Add any pending new content before saving
    private func addPendingContent() {
        if let type = selectedType, let newContent = createNewContent(for: type) {
            contents.append(newContent)
            resetInputFields()
            selectedType = nil  // Hide after adding (optional; can remove if you want to keep open)
        }
    }
    
    // Helper to create new content (updated for DataType)
    private func createNewContent(for type: DataType) -> NodeContent? {
        switch type {
        case .string: return stringValue.isEmpty ? nil : .string(stringValue)
        case .date: return .date(dateValue)
        case .number:
            if let num = Double(numberString) {
                return .number(num)
            } else {
                return nil  // Or handle invalid input
            }
        }
    }
    
    // Unchanged helpers: displayText, dateFormatter, resetInputFields
    private func displayText(for content: NodeContent) -> String {
        switch content {
        case .string(let str): return "String: \(str.prefix(20))"
        case .date(let date): return "Date: \(dateFormatter.string(from: date))"
        case .number(let num): return "Number: \(num)"
        case .boolean(let bool): return "Boolean: \(bool ? "True" : "False")"
        }
    }
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .none
        return formatter
    }()
    
    private func resetInputFields() {
        stringValue = ""
        dateValue = Date()
        numberString = ""  // Reset string instead
    }
}

struct NumericKeypadView: View {
    @Binding var text: String
    
    let columns = [
        GridItem(.flexible(), spacing: 2),
        GridItem(.flexible(), spacing: 2),
        GridItem(.flexible(), spacing: 2)
    ]
    
    var body: some View {
        VStack(spacing: 2) {
            Text(text.isEmpty ? "0" : text)
                .font(.system(size: 12, weight: .medium))
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding(4)
                .background(Color.gray.opacity(0.1))
                .cornerRadius(4)
                .lineLimit(1)
                .truncationMode(.tail)
            
            LazyVGrid(columns: columns, spacing: 2) {
                keypadButton("7") { appendDigit("7") }
                keypadButton("8") { appendDigit("8") }
                keypadButton("9") { appendDigit("9") }
                keypadButton("4") { appendDigit("4") }
                keypadButton("5") { appendDigit("5") }
                keypadButton("6") { appendDigit("6") }
                keypadButton("1") { appendDigit("1") }
                keypadButton("2") { appendDigit("2") }
                keypadButton("3") { appendDigit("3") }
                keypadButton(".") { appendDigit(".") }
                keypadButton("0") { appendDigit("0") }
                keypadButton("-") { toggleNegative() }
            }
            
            keypadButton("⌫", background: Color.red.opacity(0.2)) {
                deleteLastCharacter()
            }
            .font(.system(size: 10))
        }
        .font(.system(size: 10))
    }
    
    private func keypadButton(_ label: String, background: Color = Color.gray.opacity(0.1), action: @escaping () -> Void) -> some View {
        Button(action: action) {
            Text(label)
                .font(.system(size: 10, weight: .medium))
                .frame(maxWidth: .infinity, minHeight: 20)
                .background(background)
                .cornerRadius(4)
        }
        .buttonStyle(.plain)
    }
    
    private func appendDigit(_ digit: String) {
        if digit == "." && text.contains(".") { return }
        text += digit
    }
    
    private func toggleNegative() {
        if text.hasPrefix("-") {
            text.removeFirst()
        } else if !text.isEmpty || text == "0" {
            text = "-" + text
        }
    }
    
    private func deleteLastCharacter() {
        if !text.isEmpty {
            text.removeLast()
        }
    }
}

// MARK: - Custom Segmented Control for Data Types (watchOS-compatible version, with toggle behavior)
struct DataTypeSegmentedControl: View {
    @Binding var selectedType: DataType?
   
    var body: some View {
        HStack(spacing: 4) {  // Compact spacing for watchOS
            ForEach(DataType.allCases) { type in
                Button {
                    if selectedType == type {
                        selectedType = nil  // Deselect and hide inputs
                    } else {
                        selectedType = type  // Select and show inputs
                    }
                } label: {
                    Group {
                        if type == .date {
                            Image(systemName: "calendar")
                        } else if type == .string {
                            Text("A")
                        } else {
                            Text("123")
                        }
                    }
                    .font(.caption2)  // Small font for watchOS
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(selectedType == type ? Color.blue : Color.gray.opacity(0.3))
                    .foregroundColor(selectedType == type ? .white : .primary)
                    .clipShape(Capsule())
                }
                .buttonStyle(.plain)  // Avoid default button styling
            }
        }
        .frame(maxWidth: .infinity)  // Stretch to fill available width
    }
}

// MARK: - Enum for the three options
enum DataType: String, CaseIterable, Identifiable {
    case date = "date"
    case string = "string"
    case number = "number"
   
    var id: String { rawValue }
}
----------------------------------------------------------------------------------------------------
File: EditSection.swift
Path: GraphEditorWatch/Views/EditSection.swift
Last modified: 2025-10-23 10:03:44

Contents:
//
//  EditSection.swift
//  GraphEditor
//
//  Created by handcart on 10/5/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let selectedEdgeID: UUID?
    let onDismiss: () -> Void
    let onEditNode: () -> Void
    
    @State private var isProcessing = false
    
    private func findSelectedEdge() -> GraphEdge? {
        viewModel.model.edges.first { $0.id == selectedEdgeID }
    }
    
    private func clearSelections() {
        viewModel.setSelectedNode(nil)
        viewModel.setSelectedEdge(nil)
    }
    
    var body: some View {
        Group {
            if selectedNodeID != nil {
                editContentsLink
                if viewModel.isSelectedToggleNode {
                    toggleExpandButton
                }
                deleteNodeButton
            }
            if selectedEdgeID != nil,
               let selectedEdge = findSelectedEdge() {
                edgeInfoText(selectedEdge: selectedEdge)
                deleteEdgeButton(selectedEdge: selectedEdge)
                if selectedEdge.type == .hierarchy {
                    reverseEdgeButton(selectedEdge: selectedEdge)
                }
            }
        }
        .foregroundColor(isProcessing ? .gray : .primary)
        .accessibilityElement(children: .combine)
        .accessibilityLabel("Edit section")
    }
    
    private func edgeInfoText(selectedEdge: GraphEdge) -> some View {
        let fromID = selectedEdge.from
        let targetID = selectedEdge.target
        let fromLabel = viewModel.model.nodes.first(where: { $0.id == fromID })?.label ?? 0
        let toLabel = viewModel.model.nodes.first(where: { $0.id == targetID })?.label ?? 0
        return Text("\(fromLabel) → \(toLabel) (\(selectedEdge.type.rawValue))")
            .font(.caption2)
            .foregroundColor(.secondary)
            .gridCellColumns(2)
            .accessibilityLabel("Edge info")
    }
    
    private var editContentsLink: some View {
        NavigationLink(destination: EditContentSheet(
            selectedID: selectedNodeID ?? NodeID(),
            viewModel: viewModel,
            onSave: { newContents in
                if let id = selectedNodeID {
                    Task { await viewModel.model.updateNodeContents(withID: id, newContents: newContents) }
                }
            }
        )) {
            Label("Contents", systemImage: "pencil")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .accessibilityIdentifier("editContentsButton")
    }
    
    private var toggleExpandButton: some View {
        Button {
            WKInterfaceDevice.current().play(.click)
            Task { await viewModel.toggleSelectedNode() }
            onDismiss()
        } label: {
            Label("Toggle", systemImage: "arrow.up.arrow.down")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .accessibilityIdentifier("toggleExpandCollapseButton")
    }
    
    private var deleteNodeButton: some View {
        Button(role: .destructive) {
            WKInterfaceDevice.current().play(.click)
            if let id = selectedNodeID {
                Task {
                    isProcessing = true
                    await viewModel.model.deleteNode(withID: id)
                    clearSelections()
                    isProcessing = false
                }
            }
            onDismiss()
        } label: {
            Label("Del Node", systemImage: "trash")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("deleteNodeButton")
    }
    
    private func deleteEdgeButton(selectedEdge: GraphEdge) -> some View {
        let fromID = selectedEdge.from
        let targetID = selectedEdge.target
        let isBi = viewModel.model.isBidirectionalBetween(fromID, targetID)
        return Button(role: .destructive) {
            WKInterfaceDevice.current().play(.click)
            Task {
                isProcessing = true
                await viewModel.model.snapshot()
                if isBi {
                    let pair = viewModel.model.edgesBetween(fromID, targetID)
                    viewModel.model.edges.removeAll { pair.contains($0) }
                } else {
                    viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                }
                await viewModel.model.startSimulation()
                clearSelections()
                isProcessing = false
            }
            onDismiss()
        } label: {
            Label(isBi ? "Del Both" : "Del Edge", systemImage: "trash.slash")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("deleteEdgeButton")
    }
    
    private func reverseEdgeButton(selectedEdge: GraphEdge) -> some View {
        Button {
            WKInterfaceDevice.current().play(.click)
            Task {
                isProcessing = true
                await viewModel.model.snapshot()
                viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                viewModel.model.edges.append(GraphEdge(from: selectedEdge.target, target: selectedEdge.from, type: .hierarchy))
                await viewModel.model.startSimulation()
                clearSelections()
                isProcessing = false
            }
            onDismiss()
        } label: {
            Label("Reverse", systemImage: "arrow.left.arrow.right")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("reverseNodeButton")
    }
}
--------------------------------------------------
