## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-21 18:25:46
Table of Contents:
1. GraphEditorWatch/Views/EditContentSheet.swift
2. GraphEditorWatch/Views/EditSection.swift
3. GraphEditorWatch/Views/FocusableView.swift
4. GraphEditorWatch/Views/GestureUtils.swift
5. GraphEditorWatch/Views/GraphCanvasView.swift--------------------------------------------------
File: EditContentSheet.swift
Path: GraphEditorWatch/Views/EditContentSheet.swift
Last modified: 2025-10-21 11:25:05

Contents:
//
//  EditContentSheet.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

import SwiftUI
import GraphEditorShared

struct EditContentSheet: View {
    let selectedID: NodeID
    let viewModel: GraphViewModel
    let onSave: ([NodeContent]) -> Void
    @Environment(\.dismiss) private var dismiss
    @State private var contents: [NodeContent] = []
    @State private var selectedType: String = "String"
    @State private var stringValue: String = ""
    @State private var dateValue: Date = Date()
    @State private var numberValue: Double = 0.0
    @FocusState private var isSheetFocused: Bool
    @State private var editingIndex: Int?  // NEW: Track item being edited inline
    @State private var showAddSection: Bool = false  // NEW: Toggle add inputs visibility for compactness

    var body: some View {
        List {
            // Section 1: Prioritize contents list (editable, gesture-based)
            Section(header: Text("Contents").font(.subheadline)) {  // Compact header
                if contents.isEmpty {
                    Text("No contents yet").font(.caption).foregroundColor(.gray)  // Placeholder
                } else {
                    ForEach(contents.indices, id: \.self) { index in
                        if editingIndex == index {
                            // Inline edit mode (tap to enter)
                            inlineEditView(for: index)
                                .swipeActions {  // Moved inside ForEach, per row
                                    Button("Delete", role: .destructive) {
                                        contents.remove(at: index)  // Use captured index
                                        editingIndex = nil  // Reset if deleted while editing
                                    }
                                }
                        } else {
                            Text(displayText(for: contents[index]))
                                .font(.caption)  // Smaller font for compactness
                                .onTapGesture {
                                    editingIndex = index  // Tap to edit
                                }
                                .swipeActions {  // Moved inside ForEach, per row
                                    Button("Delete", role: .destructive) {
                                        contents.remove(at: index)  // Use captured index
                                    }
                                }
                        }
                    }
                    .onMove { indices, newOffset in
                        contents.move(fromOffsets: indices, toOffset: newOffset)  // Drag to reorder
                    }
                }
            }
            .listRowInsets(EdgeInsets(top: 4, leading: 8, bottom: 4, trailing: 8))  // Reduce padding for compactness

            // Section 2: Compact "Add New" (tappable to expand)
            Section {
                Button(action: { showAddSection.toggle() }) {  // Tap to show/hide add inputs
                    Text(showAddSection ? "Hide Add" : "Add New...").font(.caption)
                }
                if showAddSection {
                    Picker("Type", selection: $selectedType) {
                        Text("String").tag("String")
                        Text("Date").tag("Date")
                        Text("Number").tag("Number")
                    }
                    .pickerStyle(.wheel)  // Changed to .wheel for watchOS compatibility (default on watchOS)
                    
                    if selectedType == "String" {
                        TextField("Enter text", text: $stringValue)
                    } else if selectedType == "Date" {
                        DatePicker("Date", selection: $dateValue, displayedComponents: .date)
                            .labelsHidden()  // Save space
                    } else if selectedType == "Number" {
                        TextField("Number", value: $numberValue, format: .number)
                    }
                    
                    Button("Add") {
                        if let newContent = createNewContent() {
                            contents.append(newContent)
                            resetInputFields()
                            showAddSection = false  // Auto-hide after add for compactness
                        }
                    }
                }
            }
            .listRowInsets(EdgeInsets(top: 4, leading: 8, bottom: 4, trailing: 8))  // Compact padding
        }
        .navigationTitle("Edit Contents")  // Keep for context
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {  // NEW: Use toolbar for Save/Cancel to free bottom space
            ToolbarItem(placement: .cancellationAction) {
                Button("Cancel") { dismiss() }.foregroundColor(.red)
            }
            ToolbarItem(placement: .confirmationAction) {
                Button("Save") { onSave(contents); dismiss() }
            }
        }
        .focused($isSheetFocused)
        .onAppear {
            isSheetFocused = true
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) { isSheetFocused = true }
            if let node = viewModel.model.nodes.first(where: { $0.id == selectedID }) {
                contents = node.contents
            }
        }
        .onChange(of: isSheetFocused) { _, newValue in
            if !newValue { isSheetFocused = true }  // Auto-recover focus (helps prevent blur if focus-related)
        }
        .interactiveDismissDisabled(true)  // Prevent accidental swipe-back
    }
    
    // NEW: Inline edit view for an item (compact, type-specific)
    private func inlineEditView(for index: Int) -> some View {
        let content = contents[index]
        return Group {
            switch content {
            case .string(var str):
                TextField("Edit String", text: Binding(get: { str }, set: { str = $0; contents[index] = .string(str) }))
            case .date(var date):
                DatePicker("Edit Date", selection: Binding(get: { date }, set: { date = $0; contents[index] = .date(date) }), displayedComponents: .date)
                    .labelsHidden()
            case .number(var num):
                TextField("Edit Number", value: Binding(get: { num }, set: { num = $0; contents[index] = .number(num) }), format: .number)
            case .boolean(var bool):
                Toggle("Edit Boolean", isOn: Binding(get: { bool }, set: { bool = $0; contents[index] = .boolean(bool) }))
            }
            Button("Done") { editingIndex = nil }  // Exit edit mode
        }
    }
    
    // Helper to create new content (unchanged)
    private func createNewContent() -> NodeContent? {
        switch selectedType {
        case "String": return stringValue.isEmpty ? nil : .string(stringValue)
        case "Date": return .date(dateValue)
        case "Number": return .number(numberValue)
        default: return nil
        }
    }
    
    // Unchanged helpers: displayText, dateFormatter, resetInputFields
    private func displayText(for content: NodeContent) -> String {
        switch content {
        case .string(let str): return "String: \(str.prefix(20))"
        case .date(let date): return "Date: \(dateFormatter.string(from: date))"
        case .number(let num): return "Number: \(num)"
        case .boolean(let bool): return "Boolean: \(bool ? "True" : "False")"
        }
    }
    
    private let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateStyle = .short
        formatter.timeStyle = .none
        return formatter
    }()
    
    private func resetInputFields() {
        stringValue = ""
        dateValue = Date()
        numberValue = 0.0
    }
}
----------------------------------------------------------------------------------------------------
File: EditSection.swift
Path: GraphEditorWatch/Views/EditSection.swift
Last modified: 2025-10-21 12:24:42

Contents:
//
//  EditSection.swift
//  GraphEditor
//
//  Created by handcart on 10/5/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let selectedEdgeID: UUID?
    let onDismiss: () -> Void
    let onEditNode: () -> Void
    
    @State private var isProcessing = false
    
    private func findSelectedEdge() -> GraphEdge? {
        viewModel.model.edges.first { $0.id == selectedEdgeID }
    }
    
    private func clearSelections() {
        viewModel.setSelectedNode(nil)
        viewModel.setSelectedEdge(nil)
    }
    
    var body: some View {
        Group {
            if let selectedID = selectedNodeID {
                editContentsLink
                if viewModel.isSelectedToggleNode {
                    toggleExpandButton
                }
                deleteNodeButton
            }
            if let selectedEdgeID = selectedEdgeID,
               let selectedEdge = findSelectedEdge() {
                edgeInfoText(selectedEdge: selectedEdge)
                deleteEdgeButton(selectedEdge: selectedEdge)
                if selectedEdge.type == .hierarchy {
                    reverseEdgeButton(selectedEdge: selectedEdge)
                }
            }
        }
        .foregroundColor(isProcessing ? .gray : .primary)
        .accessibilityElement(children: .combine)
        .accessibilityLabel("Edit section")
    }
    
    private func edgeInfoText(selectedEdge: GraphEdge) -> some View {
        let fromID = selectedEdge.from
        let targetID = selectedEdge.target
        let fromLabel = viewModel.model.nodes.first(where: { $0.id == fromID })?.label ?? 0
        let toLabel = viewModel.model.nodes.first(where: { $0.id == targetID })?.label ?? 0
        return Text("\(fromLabel) → \(toLabel) (\(selectedEdge.type.rawValue))")
            .font(.caption2)
            .foregroundColor(.secondary)
            .gridCellColumns(2)
            .accessibilityLabel("Edge info")
    }
    
    private var editContentsLink: some View {
        NavigationLink(destination: EditContentSheet(
            selectedID: selectedNodeID ?? NodeID(),
            viewModel: viewModel,
            onSave: { newContents in
                if let id = selectedNodeID {
                    Task { await viewModel.model.updateNodeContents(withID: id, newContents: newContents) }
                }
            }
        )) {
            Label("Contents", systemImage: "pencil")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .accessibilityIdentifier("editContentsButton")
    }
    
    private var toggleExpandButton: some View {
        Button {
            WKInterfaceDevice.current().play(.click)
            Task { await viewModel.toggleSelectedNode() }
            onDismiss()
        } label: {
            Label("Toggle", systemImage: "arrow.up.arrow.down")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .accessibilityIdentifier("toggleExpandCollapseButton")
    }
    
    private var deleteNodeButton: some View {
        Button(role: .destructive) {
            WKInterfaceDevice.current().play(.click)
            if let id = selectedNodeID {
                Task {
                    isProcessing = true
                    await viewModel.model.deleteNode(withID: id)
                    clearSelections()
                    isProcessing = false
                }
            }
            onDismiss()
        } label: {
            Label("Del Node", systemImage: "trash")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("deleteNodeButton")
    }
    
    private func deleteEdgeButton(selectedEdge: GraphEdge) -> some View {
        let fromID = selectedEdge.from
        let targetID = selectedEdge.target
        let isBi = viewModel.model.isBidirectionalBetween(fromID, targetID)
        return Button(role: .destructive) {
            WKInterfaceDevice.current().play(.click)
            Task {
                isProcessing = true
                await viewModel.model.snapshot()
                if isBi {
                    let pair = viewModel.model.edgesBetween(fromID, targetID)
                    viewModel.model.edges.removeAll { pair.contains($0) }
                } else {
                    viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                }
                await viewModel.model.startSimulation()
                clearSelections()
                isProcessing = false
            }
            onDismiss()
        } label: {
            Label(isBi ? "Del Both" : "Del Edge", systemImage: "trash.slash")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("deleteEdgeButton")
    }
    
    private func reverseEdgeButton(selectedEdge: GraphEdge) -> some View {
        Button {
            WKInterfaceDevice.current().play(.click)
            Task {
                isProcessing = true
                await viewModel.model.snapshot()
                viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                viewModel.model.edges.append(GraphEdge(from: selectedEdge.target, target: selectedEdge.from, type: .hierarchy))
                await viewModel.model.startSimulation()
                clearSelections()
                isProcessing = false
            }
            onDismiss()
        } label: {
            Label("Reverse", systemImage: "arrow.left.arrow.right")
                .labelStyle(.titleAndIcon)
                .font(.caption)
        }
        .disabled(isProcessing)
        .accessibilityIdentifier("reverseNodeButton")
    }
}
----------------------------------------------------------------------------------------------------
File: FocusableView.swift
Path: GraphEditorWatch/Views/FocusableView.swift
Last modified: 2025-10-21 10:01:51

Contents:
//
//  FocusableView.swift
//  GraphEditor
//
//  Created by handcart on 10/14/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for logging

struct FocusableView<Content: View>: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "focusableview")  // Changed to computed static
    }
    
    let content: Content
    @FocusState private var isFocused: Bool
    
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        content
            .id("CrownFocusableCanvas")
            .focused($isFocused)
            .onAppear {
                isFocused = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    isFocused = true  // Double-focus for WatchOS reliability
                }
            }
            .onChange(of: isFocused) { oldValue, newValue in
                #if DEBUG
                Self.logger.debug("Canvas focus changed: from \(oldValue) to \(newValue)")
                #endif
                
                if !newValue {
                    isFocused = true  // Auto-recover focus loss
                }
            }
    }
}

struct BoundingBoxOverlay: View {
    let viewModel: GraphViewModel
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    
    var body: some View {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let minScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.minX, y: graphBounds.minY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let maxScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.maxX, y: graphBounds.maxY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let scaledBounds = CGRect(x: minScreen.x, y: minScreen.y, width: maxScreen.x - minScreen.x, height: maxScreen.y - minScreen.y)
        Rectangle()
            .stroke(Color.blue, lineWidth: 2)
            .frame(width: scaledBounds.width, height: scaledBounds.height)
            .position(x: scaledBounds.midX, y: scaledBounds.midY)
            .opacity(0.5)
    }
}

struct AccessibleCanvas: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "accessiblecanvas")
    }
    
    let viewModel: GraphViewModel
    let zoomScale: CGFloat
    let offset: CGSize
    let draggedNode: (any NodeProtocol)?
    let dragOffset: CGPoint
    let potentialEdgeTarget: (any NodeProtocol)?
    let selectedNodeID: NodeID?
    let viewSize: CGSize
    let selectedEdgeID: UUID?
    let showOverlays: Bool
    let saturation: Double  // NEW: Add this
    
    var body: some View {
        ZStack {
            Canvas { context, size in
                // Define visibleNodes and visibleEdges
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // Fix: Use visibleEdges() instead of all edges
                
                #if DEBUG
                Self.logger.debug("Visible: \(visibleNodes.count)")
                #endif
                
                let effectiveCentroid = viewModel.effectiveCentroid
                
                // NEW: Compute selected/non-selected sets
                let nonSelectedNodes = visibleNodes.filter { $0.id != selectedNodeID }
                let selectedNode = visibleNodes.first { $0.id == selectedNodeID }
                let nonSelectedEdges = visibleEdges.filter { $0.id != selectedEdgeID }
                let selectedEdge = visibleEdges.first { $0.id == selectedEdgeID }
                
                // Draw non-selected edges (lines) with desaturated color
                drawEdges(in: context, size: size, visibleEdges: nonSelectedEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: saturation, isSelected: false)
                
                // Draw selected edge (line) with full color if any
                if let edge = selectedEdge {
                    drawSingleEdgeLine(in: context, size: size, edge: edge, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: 1.0, isSelected: true)
                }
                
                // Draw non-selected nodes with desaturated color
                for node in nonSelectedNodes {
                    drawSingleNode(in: context, size: size, node: node, effectiveCentroid: effectiveCentroid, saturation: saturation, isSelected: false)
                }
                
                // Draw selected node with full color if any
                if let node = selectedNode {
                    drawSingleNode(in: context, size: size, node: node, effectiveCentroid: effectiveCentroid, saturation: 1.0, isSelected: true)
                }
                
                // Draw non-selected arrows with desaturated color
                drawArrows(in: context, size: size, visibleEdges: nonSelectedEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: saturation, isSelected: false)
                
                // Draw selected arrow with full color if any
                if let edge = selectedEdge {
                    drawSingleArrow(in: context, size: size, edge: edge, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: 1.0, isSelected: true)
                }
                
                // Draw dragged node and potential edge (keep full color)
                drawDraggedNodeAndPotentialEdge(in: context, size: size, effectiveCentroid: effectiveCentroid)
            }
            
            if showOverlays {
                BoundingBoxOverlay(viewModel: viewModel, zoomScale: zoomScale, offset: offset, viewSize: viewSize)
            }
        }
        .accessibilityElement(children: .combine)
        .accessibilityLabel(graphAccessibilityLabel())
        .accessibilityHint("Double tap to select node or edge. Long press for menu.")
        .accessibilityAddTraits(.isButton)  // Makes it tappable for VoiceOver
    }
    
    private func graphAccessibilityLabel() -> String {
        let nodeCount = viewModel.model.nodes.count
        let edgeCount = viewModel.model.edges.count
        let selectedNodeLabel = selectedNodeID.flatMap { id in viewModel.model.nodes.first { $0.id == id }?.label }?.map { "Node \($0) selected." } ?? ""
        let selectedEdgeLabel = selectedEdgeID.flatMap { id in viewModel.model.edges.first { $0.id == id } }.map { edge in
            let fromLabel = viewModel.model.nodes.first { $0.id == edge.from }?.label ?? 0
            let toLabel = viewModel.model.nodes.first { $0.id == edge.target }?.label ?? 0
            return "Edge from \(fromLabel) to \(toLabel) selected."
        } ?? ""
        let selectionInfo = selectedNodeLabel + selectedEdgeLabel
        let defaultInfo = selectionInfo.isEmpty ? "No node or edge selected." : ""
        return "Graph with \(nodeCount) nodes and \(edgeCount) edges. \(selectionInfo)\(defaultInfo)"
    }
    
    // Helper to desaturate a color
    private func desaturatedColor(_ color: Color, saturation: Double) -> Color {
        var hue: CGFloat = 0
        var sat: CGFloat = 0
        var brightness: CGFloat = 0
        var alpha: CGFloat = 0
        UIColor(color).getHue(&hue, saturation: &sat, brightness: &brightness, alpha: &alpha)
        return Color(hue: Double(hue), saturation: saturation * Double(sat), brightness: Double(brightness), opacity: Double(alpha))
    }
    
    // NEW: Updated single node draw with saturation param
    private func drawSingleNode(in context: GraphicsContext, size: CGSize, node: any NodeProtocol, effectiveCentroid: CGPoint, saturation: Double, isSelected: Bool) {
        let nodeScreen = CoordinateTransformer.modelToScreen(
            node.position,
            effectiveCentroid: effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: size
        )
        let nodeRadius = Constants.App.nodeModelRadius * zoomScale
        
        let baseColor: Color = isSelected ? .red : .blue
        let nodeColor = desaturatedColor(baseColor, saturation: saturation)
        let nodePath = Circle().path(in: CGRect(center: nodeScreen, size: CGSize(width: nodeRadius * 2, height: nodeRadius * 2)))
        context.fill(nodePath, with: .color(nodeColor))
        
        // Draw label with desaturated color
        let labelColor = desaturatedColor(.black, saturation: saturation)  // Assuming labels are black; adjust if needed
        let labelText = Text("\(node.label)").foregroundColor(labelColor).font(.system(size: 12 * zoomScale))
        context.draw(labelText, at: nodeScreen, anchor: .center)
    }
    
    // NEW: Updated single edge line draw with saturation param
    private func drawSingleEdgeLine(in context: GraphicsContext, size: CGSize, edge: GraphEdge, visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint, saturation: Double, isSelected: Bool) {
        guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
              let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { return }
        
        let fromScreen = CoordinateTransformer.modelToScreen(
            fromNode.position,
            effectiveCentroid: effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: size
        )
        let toScreen = CoordinateTransformer.modelToScreen(
            toNode.position,
            effectiveCentroid: effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: size
        )
        
        let linePath = Path { path in
            path.move(to: fromScreen)
            path.addLine(to: toScreen)
        }
        
        let baseColor: Color = isSelected ? .red : .gray
        let edgeColor = desaturatedColor(baseColor, saturation: saturation)
        let lineWidth: CGFloat = 2.0
        
        context.stroke(linePath, with: .color(edgeColor), lineWidth: lineWidth)
        
        #if DEBUG
        Self.logger.debug("Drawing edge from x=\(fromScreen.x), y=\(fromScreen.y) to x=\(toScreen.x), y=\(toScreen.y) with color \(edgeColor.description)")
        #endif
    }
    
    // NEW: Updated single arrow draw with saturation param
    private func drawSingleArrow(in context: GraphicsContext, size: CGSize, edge: GraphEdge, visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint, saturation: Double, isSelected: Bool) {
        guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
              let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { return }
        
        let fromScreen = CoordinateTransformer.modelToScreen(
            fromNode.position,
            effectiveCentroid: effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: size
        )
        let toScreen = CoordinateTransformer.modelToScreen(
            toNode.position,
            effectiveCentroid: effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: size
        )
        
        let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
        let length = hypot(direction.dx, direction.dy)
        if length <= 0 { return }
        
        let unitDx = direction.dx / length
        let unitDy = direction.dy / length
        let toRadiusScreen = toNode.radius * zoomScale
        let boundaryPoint = CGPoint(x: toScreen.x - unitDx * toRadiusScreen,
                                    y: toScreen.y - unitDy * toRadiusScreen)
        
        let lineAngle = atan2(unitDy, unitDx)
        let arrowLength: CGFloat = 10.0
        let arrowAngle: CGFloat = .pi / 6
        let arrowPoint1 = CGPoint(
            x: boundaryPoint.x - arrowLength * cos(lineAngle - arrowAngle),
            y: boundaryPoint.y - arrowLength * sin(lineAngle - arrowAngle)
        )
        let arrowPoint2 = CGPoint(
            x: boundaryPoint.x - arrowLength * cos(lineAngle + arrowAngle),
            y: boundaryPoint.y - arrowLength * sin(lineAngle + arrowAngle)
        )
        
        let arrowPath = Path { path in
            path.move(to: boundaryPoint)
            path.addLine(to: arrowPoint1)
            path.move(to: boundaryPoint)
            path.addLine(to: arrowPoint2)
        }
        
        let baseColor: Color = isSelected ? .red : .gray
        let arrowColor = desaturatedColor(baseColor, saturation: saturation)
        let arrowLineWidth: CGFloat = 3.0
        
        context.stroke(arrowPath, with: .color(arrowColor), lineWidth: arrowLineWidth)
        
        #if DEBUG
        Self.logger.debug("Drawing arrow for edge \(edge.id.uuidString.prefix(8)) to boundary x=\(boundaryPoint.x), y=\(boundaryPoint.y)")
        #endif
    }
    
    // Updated drawEdges to accept saturation and isSelected
    private func drawEdges(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint, saturation: Double, isSelected: Bool) {
        for edge in visibleEdges {
            drawSingleEdgeLine(in: context, size: size, edge: edge, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: saturation, isSelected: isSelected)
        }
    }
    
    // Updated drawArrows to accept saturation and isSelected
    private func drawArrows(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint, saturation: Double, isSelected: Bool) {
        for edge in visibleEdges {
            drawSingleArrow(in: context, size: size, edge: edge, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid, saturation: saturation, isSelected: isSelected)
        }
    }
    
    private func drawDraggedNodeAndPotentialEdge(in context: GraphicsContext, size: CGSize, effectiveCentroid: CGPoint) {
        // Draw dragged node and potential edge
        if let dragged = draggedNode {
            let draggedScreen = CoordinateTransformer.modelToScreen(
                dragged.position + dragOffset,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            context.fill(Circle().path(in: CGRect(center: draggedScreen, size: CGSize(width: Constants.App.nodeModelRadius * 2 * zoomScale, height: Constants.App.nodeModelRadius * 2 * zoomScale))), with: .color(.green))
            
            if let target = potentialEdgeTarget {
                let targetScreen = CoordinateTransformer.modelToScreen(
                    target.position,
                    effectiveCentroid: effectiveCentroid,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: size
                )
                let tempLinePath = Path { path in
                    path.move(to: draggedScreen)
                    path.addLine(to: targetScreen)
                }
                context.stroke(tempLinePath, with: .color(.green), lineWidth: 2.0)
            }
        }
    }
}

struct Line: Shape, Animatable {
    var from: CGPoint
    var end: CGPoint
    
    var animatableData: AnimatablePair<CGPoint.AnimatableData, CGPoint.AnimatableData> {
        get { AnimatablePair(from.animatableData, end.animatableData) }
        set {
            from.animatableData = newValue.first
            end.animatableData = newValue.second
        }
    }
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        path.move(to: from)
        path.addLine(to: end)
        return path
    }
}

extension CGRect {
    init(center: CGPoint, size: CGSize) {
        self.init(x: center.x - size.width / 2, y: center.y - size.height / 2, width: size.width, height: size.height)
    }
}
----------------------------------------------------------------------------------------------------
File: GestureUtils.swift
Path: GraphEditorWatch/Views/GestureUtils.swift
Last modified: 2025-10-11 19:40:27

Contents:
// GestureUtils.swift
// Extracted utilities for hit testing and distance calculations

import SwiftUI
import GraphEditorShared

struct GestureUtils {
    static func closestNode(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], context: GraphEditorShared.HitTestContext) -> (any NodeProtocol)? {
        var closest: (any NodeProtocol)?
        var minDist: CGFloat = .infinity
        let adjustedRadius = AppConstants.hitScreenRadius / max(1.0, context.zoomScale) * 2.0  // Double boost at zoom >1; tune to 3.0 if needed
        #if os(watchOS)
        let boostedRadius = adjustedRadius * 2.0  // Extra for watch touch (fingers obscure)
        #endif
        for node in visibleNodes {
            let nodeScreen = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let dist = hypot(screenPos.x - nodeScreen.x, screenPos.y - nodeScreen.y)
            if dist < boostedRadius && dist < minDist {
                minDist = dist
                closest = node
            }
        }
        return closest
    }
    
    static func closestEdge(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], context: HitTestContext) -> GraphEdge? {
        var closestEdge: GraphEdge?
        var minDist: CGFloat = .infinity
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let targetNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                targetNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, to: toScreen)
            let hitThreshold: CGFloat = 20.0
            if dist < hitThreshold && dist < minDist {
                minDist = dist
                closestEdge = edge
            }
        }
        return closestEdge
    }
    
    static func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, to endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return hypot(point.x - startPoint.x, point.y - startPoint.y)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return hypot(point.x - proj.x, point.y - proj.y)
    }
    
    static func modelToScreen(_ modelPos: CGPoint, context: HitTestContext) -> CGPoint {
        return CoordinateTransformer.modelToScreen(
            modelPos,
            effectiveCentroid: context.effectiveCentroid,
            zoomScale: context.zoomScale,
            offset: context.offset,
            viewSize: context.viewSize
        )
    }
    
    // Add any other utility functions extracted from the original file here
}
----------------------------------------------------------------------------------------------------
File: GraphCanvasView.swift
Path: GraphEditorWatch/Views/GraphCanvasView.swift
Last modified: 2025-10-17 07:47:32

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for logging

// Reverted: Custom wrapper for reliable crown focus (without crown—handled in ContentView now)
struct GraphCanvasView: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "graphcanvasview")  // Changed to computed static for consistency
    }
    
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var zoomTimer: Timer?
    @Binding var selectedEdgeID: UUID?
    @Binding var showOverlays: Bool
    @Binding var isAddingEdge: Bool
    @Binding var isSimulating: Bool
    @Binding var saturation: Double
    
    init(
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<(any NodeProtocol)?>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<(any NodeProtocol)?>,
        selectedNodeID: Binding<NodeID?>,
        viewSize: CGSize,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        onUpdateZoomRanges: @escaping () -> Void,
        selectedEdgeID: Binding<UUID?>,
        showOverlays: Binding<Bool>,
        isAddingEdge: Binding<Bool>,
        isSimulating: Binding<Bool>,
        saturation: Binding<Double>  // NEW: Add to init params
    ) {
        self.viewModel = viewModel
        self._zoomScale = zoomScale
        self._offset = offset
        self._draggedNode = draggedNode
        self._dragOffset = dragOffset
        self._potentialEdgeTarget = potentialEdgeTarget
        self._selectedNodeID = selectedNodeID
        self.viewSize = viewSize
        self._panStartOffset = panStartOffset
        self._showMenu = showMenu
        self.maxZoom = maxZoom
        self._crownPosition = crownPosition
        self.onUpdateZoomRanges = onUpdateZoomRanges
        self._selectedEdgeID = selectedEdgeID
        self._showOverlays = showOverlays
        self._isAddingEdge = isAddingEdge
        self._isSimulating = isSimulating
        self._saturation = saturation
    }
    
    var body: some View {
        FocusableView {
            AccessibleCanvas(
                viewModel: viewModel,
                zoomScale: zoomScale,
                offset: offset,
                draggedNode: draggedNode,
                dragOffset: dragOffset,
                potentialEdgeTarget: potentialEdgeTarget,
                selectedNodeID: selectedNodeID,
                viewSize: viewSize,
                selectedEdgeID: selectedEdgeID,
                showOverlays: showOverlays,
                saturation: saturation  // NEW: Pass the value here (draw reads it)
            )
            .modifier(GraphGesturesModifier(
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                viewSize: viewSize,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                onUpdateZoomRanges: onUpdateZoomRanges,
                isAddingEdge: $isAddingEdge,
                isSimulating: $isSimulating,
                saturation: $saturation  // NEW: Pass binding to modifier for mutation during gesture
            ))
        }
        
        .id("GraphCanvas")  // Add stable ID for crown sequencer
        .digitalCrownRotation($crownPosition, from: 0, through: Double(AppConstants.crownZoomSteps), sensitivity: .high)
        
    }
}
--------------------------------------------------
