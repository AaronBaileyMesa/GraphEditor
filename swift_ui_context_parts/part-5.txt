## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-15 14:47:28
Table of Contents:
1. GraphEditorWatch/Views/FocusableView.swift
2. GraphEditorWatch/Views/GestureUtils.swift
3. GraphEditorWatch/Views/GraphCanvasView.swift
4. GraphEditorWatch/Views/GraphGesturesModifier.swift
5. GraphEditorWatch/Views/GraphSection.swift--------------------------------------------------
File: FocusableView.swift
Path: GraphEditorWatch/Views/FocusableView.swift
Last modified: 2025-10-15 13:36:46

Contents:
//
//  FocusableView.swift
//  GraphEditor
//
//  Created by handcart on 10/14/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for logging

struct FocusableView<Content: View>: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "focusableview")  // Changed to computed static
    }
    
    let content: Content
    @FocusState private var isFocused: Bool
    
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        content
            .id("CrownFocusableCanvas")
            .focused($isFocused)
            .onAppear {
                isFocused = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    isFocused = true  // Double-focus for WatchOS reliability
                }
            }
            .onChange(of: isFocused) { oldValue, newValue in
                #if DEBUG
                Self.logger.debug("Canvas focus changed: from \(oldValue) to \(newValue)")
                #endif
                
                if !newValue {
                    isFocused = true  // Auto-recover focus loss
                }
            }
    }
}

struct BoundingBoxOverlay: View {
    let viewModel: GraphViewModel
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    
    var body: some View {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let minScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.minX, y: graphBounds.minY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let maxScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.maxX, y: graphBounds.maxY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let scaledBounds = CGRect(x: minScreen.x, y: minScreen.y, width: maxScreen.x - minScreen.x, height: maxScreen.y - minScreen.y)
        Rectangle()
            .stroke(Color.blue, lineWidth: 2)
            .frame(width: scaledBounds.width, height: scaledBounds.height)
            .position(x: scaledBounds.midX, y: scaledBounds.midY)
            .opacity(0.5)
    }
}

struct AccessibleCanvas: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "accessiblecanvas")
    }
    
    let viewModel: GraphViewModel
    let zoomScale: CGFloat
    let offset: CGSize
    let draggedNode: (any NodeProtocol)?
    let dragOffset: CGPoint
    let potentialEdgeTarget: (any NodeProtocol)?
    let selectedNodeID: NodeID?
    let viewSize: CGSize
    let selectedEdgeID: UUID?
    let showOverlays: Bool
    
    var body: some View {
        ZStack {
            Canvas { context, size in
                // Define visibleNodes and visibleEdges
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // Fix: Use visibleEdges() instead of all edges
                
                #if DEBUG
                Self.logger.debug("Visible: \(visibleNodes.count)")
                #endif
                
                let effectiveCentroid = viewModel.effectiveCentroid
                
                // Draw edges (Pass 1: Lines only)
                drawEdges(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                
                // Draw nodes
                for node in visibleNodes {
                    let nodeScreen = CoordinateTransformer.modelToScreen(
                        node.position,
                        effectiveCentroid: effectiveCentroid,
                        zoomScale: zoomScale,
                        offset: offset,
                        viewSize: size
                    )
                    let nodeRadius = Constants.App.nodeModelRadius * zoomScale
                    
                    let isSelected = node.id == selectedNodeID
                    let nodeColor: Color = isSelected ? .red : .blue
                    let nodePath = Circle().path(in: CGRect(center: nodeScreen, size: CGSize(width: nodeRadius * 2, height: nodeRadius * 2)))
                    context.fill(nodePath, with: .color(nodeColor))
                    
                    // Draw label
                    let labelText = Text("\(node.label)").font(.system(size: 12 * zoomScale))
                    context.draw(labelText, at: nodeScreen, anchor: .center)
                }
                
                // Draw arrows (Pass 2: Over lines)
                drawArrows(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                
                // Draw dragged node and potential edge
                drawDraggedNodeAndPotentialEdge(in: context, size: size, effectiveCentroid: effectiveCentroid)
            }
            .frame(width: viewSize.width, height: viewSize.height)
            .accessibilityLabel(accessibilityLabel())
            .accessibilityIdentifier("GraphCanvas")
            
            if showOverlays {
                BoundingBoxOverlay(
                    viewModel: viewModel,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: viewSize
                )
            }
        }
    }
    
    private func accessibilityLabel() -> String {
        let nodeCount = viewModel.model.nodes.count
        let edgeCount = viewModel.model.edges.count

        // Selected node label
        let selectedNodeLabel: String = {
            guard let id = selectedNodeID,
                  let node = viewModel.model.nodes.first(where: { $0.id == id })
            else { return "No node selected" }
            return "Node \(node.label) selected"
        }()

        // Selected edge label
        let selectedEdgeLabel: String = {
            guard let id = selectedEdgeID,
                  let edge = viewModel.model.edges.first(where: { $0.id == id })
            else { return "No edge selected" }
            let fromLabel = viewModel.model.nodes.first(where: { $0.id == edge.from })?.label
            let toLabel = viewModel.model.nodes.first(where: { $0.id == edge.target })?.label
            let fromText = fromLabel.map { String(describing: $0) } ?? "?"
            let toText = toLabel.map { String(describing: $0) } ?? "?"
            return "Edge from \(fromText) to \(toText) selected"
        }()

        return "Graph with \(nodeCount) nodes and \(edgeCount) edges. \(selectedNodeLabel). \(selectedEdgeLabel)."
    }
    
    // Extracted: Draw edges (lines only)
    func drawEdges(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let linePath = Path { path in
                path.move(to: fromScreen)
                path.addLine(to: toScreen)
            }
            
            let isSelected = edge.id == selectedEdgeID
            let edgeColor: Color = isSelected ? .red : .gray
            let lineWidth: CGFloat = 2.0
            
            context.stroke(linePath, with: .color(edgeColor), lineWidth: lineWidth)
            
            #if DEBUG
            Self.logger.debug("Drawing edge from x=\(fromScreen.x), y=\(fromScreen.y) to x=\(toScreen.x), y=\(toScreen.y) with color \(edgeColor.description)")
            #endif
        }
    }
    
    // Extracted: Draw arrows (over lines)
    func drawArrows(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 2: Draw arrows (over lines)
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
            let length = hypot(direction.dx, direction.dy)
            if length <= 0 { continue }
            
            let unitDx = direction.dx / length
            let unitDy = direction.dy / length
            let toRadiusScreen = toNode.radius * zoomScale
            let boundaryPoint = CGPoint(x: toScreen.x - unitDx * toRadiusScreen,
                                        y: toScreen.y - unitDy * toRadiusScreen)
            
            let lineAngle = atan2(unitDy, unitDx)
            let arrowLength: CGFloat = 10.0
            let arrowAngle: CGFloat = .pi / 6
            let arrowPoint1 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle - arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle - arrowAngle)
            )
            let arrowPoint2 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle + arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle + arrowAngle)
            )
            
            let arrowPath = Path { path in
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint1)
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint2)
            }
            
            let isSelected = edge.id == selectedEdgeID
            let arrowColor: Color = isSelected ? .red : .gray
            let arrowLineWidth: CGFloat = 3.0
            
            context.stroke(arrowPath, with: .color(arrowColor), lineWidth: arrowLineWidth)
            
            #if DEBUG
            Self.logger.debug("Drawing arrow for edge \(edge.id.uuidString.prefix(8)) to boundary x=\(boundaryPoint.x), y=\(boundaryPoint.y)")
            #endif
        }
    }
    
    func drawDraggedNodeAndPotentialEdge(in context: GraphicsContext, size: CGSize, effectiveCentroid: CGPoint) {
        // Draw dragged node and potential edge
        if let dragged = draggedNode {
            let draggedScreen = CoordinateTransformer.modelToScreen(
                dragged.position + dragOffset,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            context.fill(Circle().path(in: CGRect(center: draggedScreen, size: CGSize(width: Constants.App.nodeModelRadius * 2 * zoomScale, height: Constants.App.nodeModelRadius * 2 * zoomScale))), with: .color(.green))
            
            if let target = potentialEdgeTarget {
                let targetScreen = CoordinateTransformer.modelToScreen(
                    target.position,
                    effectiveCentroid: effectiveCentroid,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: size
                )
                let tempLinePath = Path { path in
                    path.move(to: draggedScreen)
                    path.addLine(to: targetScreen)
                }
                context.stroke(tempLinePath, with: .color(.green), lineWidth: 2.0)
            }
        }
    }
}

struct Line: Shape, Animatable {
    var from: CGPoint
    var end: CGPoint
    
    var animatableData: AnimatablePair<CGPoint.AnimatableData, CGPoint.AnimatableData> {
        get { AnimatablePair(from.animatableData, end.animatableData) }
        set {
            from.animatableData = newValue.first
            end.animatableData = newValue.second
        }
    }
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        path.move(to: from)
        path.addLine(to: end)
        return path
    }
}

extension CGRect {
    init(center: CGPoint, size: CGSize) {
        self.init(x: center.x - size.width / 2, y: center.y - size.height / 2, width: size.width, height: size.height)
    }
}
----------------------------------------------------------------------------------------------------
File: GestureUtils.swift
Path: GraphEditorWatch/Views/GestureUtils.swift
Last modified: 2025-10-11 19:40:27

Contents:
// GestureUtils.swift
// Extracted utilities for hit testing and distance calculations

import SwiftUI
import GraphEditorShared

struct GestureUtils {
    static func closestNode(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], context: GraphEditorShared.HitTestContext) -> (any NodeProtocol)? {
        var closest: (any NodeProtocol)?
        var minDist: CGFloat = .infinity
        let adjustedRadius = AppConstants.hitScreenRadius / max(1.0, context.zoomScale) * 2.0  // Double boost at zoom >1; tune to 3.0 if needed
        #if os(watchOS)
        let boostedRadius = adjustedRadius * 2.0  // Extra for watch touch (fingers obscure)
        #endif
        for node in visibleNodes {
            let nodeScreen = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let dist = hypot(screenPos.x - nodeScreen.x, screenPos.y - nodeScreen.y)
            if dist < boostedRadius && dist < minDist {
                minDist = dist
                closest = node
            }
        }
        return closest
    }
    
    static func closestEdge(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], context: HitTestContext) -> GraphEdge? {
        var closestEdge: GraphEdge?
        var minDist: CGFloat = .infinity
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let targetNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                targetNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, to: toScreen)
            let hitThreshold: CGFloat = 20.0
            if dist < hitThreshold && dist < minDist {
                minDist = dist
                closestEdge = edge
            }
        }
        return closestEdge
    }
    
    static func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, to endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return hypot(point.x - startPoint.x, point.y - startPoint.y)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return hypot(point.x - proj.x, point.y - proj.y)
    }
    
    static func modelToScreen(_ modelPos: CGPoint, context: HitTestContext) -> CGPoint {
        return CoordinateTransformer.modelToScreen(
            modelPos,
            effectiveCentroid: context.effectiveCentroid,
            zoomScale: context.zoomScale,
            offset: context.offset,
            viewSize: context.viewSize
        )
    }
    
    // Add any other utility functions extracted from the original file here
}
----------------------------------------------------------------------------------------------------
File: GraphCanvasView.swift
Path: GraphEditorWatch/Views/GraphCanvasView.swift
Last modified: 2025-10-15 13:36:46

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for logging

// Reverted: Custom wrapper for reliable crown focus (without crown—handled in ContentView now)
struct GraphCanvasView: View {
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "graphcanvasview")  // Changed to computed static for consistency
    }
    
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var zoomTimer: Timer?
    @Binding var selectedEdgeID: UUID?
    @Binding var showOverlays: Bool
    @Binding var isAddingEdge: Bool
    @Binding var isSimulating: Bool
    
    init(
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<(any NodeProtocol)?>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<(any NodeProtocol)?>,
        selectedNodeID: Binding<NodeID?>,
        viewSize: CGSize,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        onUpdateZoomRanges: @escaping () -> Void,
        selectedEdgeID: Binding<UUID?>,
        showOverlays: Binding<Bool>,
        isAddingEdge: Binding<Bool>,
        isSimulating: Binding<Bool>
    ) {
        self.viewModel = viewModel
        self._zoomScale = zoomScale
        self._offset = offset
        self._draggedNode = draggedNode
        self._dragOffset = dragOffset
        self._potentialEdgeTarget = potentialEdgeTarget
        self._selectedNodeID = selectedNodeID
        self.viewSize = viewSize
        self._panStartOffset = panStartOffset
        self._showMenu = showMenu
        self.maxZoom = maxZoom
        self._crownPosition = crownPosition
        self.onUpdateZoomRanges = onUpdateZoomRanges
        self._selectedEdgeID = selectedEdgeID
        self._showOverlays = showOverlays
        self._isAddingEdge = isAddingEdge
        self._isSimulating = isSimulating  // Assign new binding
    }
    
    var body: some View {
        FocusableView {
            AccessibleCanvas(
                viewModel: viewModel,
                zoomScale: zoomScale,
                offset: offset,
                draggedNode: draggedNode,
                dragOffset: dragOffset,
                potentialEdgeTarget: potentialEdgeTarget,
                selectedNodeID: selectedNodeID,
                viewSize: viewSize,
                selectedEdgeID: selectedEdgeID,
                showOverlays: showOverlays
            )
            .modifier(GraphGesturesModifier(
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                viewSize: viewSize,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                onUpdateZoomRanges: onUpdateZoomRanges,
                isAddingEdge: $isAddingEdge,
                isSimulating: $isSimulating
            ))
        }
        
        .id("GraphCanvas")  // Add stable ID for crown sequencer
        .digitalCrownRotation($crownPosition, from: 0, through: Double(AppConstants.crownZoomSteps), sensitivity: .high)
        
    }
}
----------------------------------------------------------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-10-15 13:36:46

Contents:
//
//  GraphGesturesModifier.swift
//  GraphEditorWatch
//
//  Created by handcart on 2025-08-16

import SwiftUI
import WatchKit
import GraphEditorShared
import os  // Added for optimized logging

enum HitType {
    case node
    case edge
}

struct GestureContext {
    let zoomScale: CGFloat
    let offset: CGSize
    let viewSize: CGSize
    let effectiveCentroid: CGPoint
}

struct NodeDistanceInfo {
    let label: Int
    let screenPos: CGPoint
    let dist: CGFloat
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    @Binding var isSimulating: Bool  // New binding
    
    @State private var dragStartNode: (any NodeProtocol)?
    @State private var isMovingSelectedNode: Bool = false
    @State private var gestureStartCentroid: CGPoint = .zero
    @State private var startLocation: CGPoint?
    
    private let dragStartThreshold: CGFloat = 10.0  // Increased for better tap vs. drag distinction
    
    // Optimized logger
    private static let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "gestures")
    
    func body(content: Content) -> some View {
        let dragGesture = DragGesture(minimumDistance: 0, coordinateSpace: .local)  // Zero for immediate detection
            .onChanged { value in
                let visibleNodes = viewModel.model.visibleNodes()  // Or viewModel.model.nodes if no visibleNodes()
                let effectiveCentroid = viewModel.effectiveCentroid  // From ViewModel
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragChanged(value: value, visibleNodes: visibleNodes, context: context)
            }
            .onEnded { value in
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // NEW: Get visible edges (assume method exists; use model.edges if not)
                let effectiveCentroid = viewModel.effectiveCentroid
                let context = GestureContext(zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                handleDragEnded(value: value, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            }
        // Update longPressGesture in GraphGesturesModifier.swift
        let longPressGesture = LongPressGesture(minimumDuration: 3.0, maximumDistance: 10.0)
            .onChanged { pressing in  // Changed from .onEnded to full gesture for onPressingChanged
                if pressing {
                    print("Long press started...")
                    WKInterfaceDevice.current().play(.start)  // Haptic on start
                }
            }
            .onEnded { _ in
                if !isSimulating {
                    selectedNodeID = nil  // Optional: Deselect on menu open
                    selectedEdgeID = nil
                    showMenu = true
                    print("Long press: Showing menu!")
                    WKInterfaceDevice.current().play(.success)
                }
            }
        content
            .highPriorityGesture(dragGesture)
            .simultaneousGesture(longPressGesture)  // Add this: Allows long press alongside drag
    }
}

extension GraphGesturesModifier {
    
    // Hybrid hit test with screen-space thresholds, model-space for small zooms
    func hitTest(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) -> HitType? {
        let safeZoom = max(context.zoomScale, 0.1)
        let modelPos = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
        let minHitScreenRadius: CGFloat = 20.0  // Screen points
        let minHitModelRadius: CGFloat = minHitScreenRadius / safeZoom
        
        // Check nodes first
        for node in visibleNodes {
            let dist = distance(modelPos, node.position)
            if dist <= max(node.radius, minHitModelRadius) {
                return .node
            }
        }
        
        // Check edges
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            let fromScreen = CoordinateTransformer.modelToScreen(fromNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let toScreen = CoordinateTransformer.modelToScreen(toNode.position, effectiveCentroid: context.effectiveCentroid, zoomScale: safeZoom, offset: context.offset, viewSize: context.viewSize)
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, endPoint: toScreen)
            if dist <= minHitScreenRadius / 2 {
                return .edge
            }
        }
        return nil
    }
    
    private func handleDragChanged(value: DragGesture.Value, visibleNodes: [any NodeProtocol], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
        
        // Initial drag: Check for node hit
        if draggedNode == nil && dragStartNode == nil {
            let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
            let hitNode = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext)
            if let node = hitNode {
                dragStartNode = node
                draggedNode = node
                dragOffset = .zero
                isAddingEdge = true  // Enter edge creation mode
                GraphGesturesModifier.logger.debug("Drag of \(dragMagnitude) started from Node \(node.label)")
            } else {
                // Pan the canvas instead
                if panStartOffset == nil {
                    panStartOffset = offset
                }
                let delta = CGSize(width: translation.width, height: translation.height)
                offset = panStartOffset! + delta
            }
            startLocation = location  // For tap threshold in onEnded
            gestureStartCentroid = context.effectiveCentroid
            return
        }
        
        // Ongoing drag: Update drag offset and check for potential target
        if let node = draggedNode {
            dragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
            let potential = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext)
            potentialEdgeTarget = (potential?.id != node.id) ? potential : nil  // Avoid self-edges
            if let target = potentialEdgeTarget {
                GraphGesturesModifier.logger.debug("Potential edge target: Node \(target.label)")
            }
        }
    }
    
    private func handleDragEnded(value: DragGesture.Value, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) {
        let location = value.location
        let translation = value.translation
        let dragMagnitude = distance(.zero, CGPoint(x: translation.width, y: translation.height))
        
        // Defer cleanup (ensures reset even on errors/taps)
        defer { resetGestureState() }
        
        // Early exit for taps (short drag) - enhanced for node/edge selection
        if let start = startLocation, dragMagnitude < dragStartThreshold, distance(start, location) < dragStartThreshold {
            let wasHit = handleTap(at: location, visibleNodes: visibleNodes, visibleEdges: visibleEdges, context: context)
            if wasHit {
                WKInterfaceDevice.current().play(.click)  // Subtler haptic feedback (short tick/tap) on successful hit
            }
            return  // Exit early
        }
        
        GraphGesturesModifier.logger.debug("Processing as drag: magnitude \(dragMagnitude), translation (\(translation.width), \(translation.height))")
        
        if let dragged = draggedNode {
            Task { await viewModel.model.snapshot() }
            let modelDragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
            GraphGesturesModifier.logger.debug("Drag offset in model: (\(modelDragOffset.x), \(modelDragOffset.y))")
            
            if let target = potentialEdgeTarget, target.id != dragged.id, isAddingEdge {
                handleEdgeCreation(from: dragged, to: target, translation: translation)
            } else {
                handleNodeMovement(for: dragged, with: modelDragOffset)
            }
        }
        withAnimation(.spring(duration: 0.3, bounce: 0.2)) {
            onUpdateZoomRanges()
        }
    }
    
    private func handleEdgeCreation(from dragged: any NodeProtocol, to target: any NodeProtocol, translation: CGSize) {
        // Duplicate check with logging
        let exists = viewModel.model.edges.contains { edge in
            (edge.from == dragged.id && edge.target == target.id) || (edge.from == target.id && edge.target == dragged.id)
        }
        if !exists {
            GraphGesturesModifier.logger.debug("No duplicate; adding edge")
            // Heuristic: Downward = hierarchy
            let type = (translation.height > 0) ? .hierarchy : viewModel.pendingEdgeType
            viewModel.pendingEdgeType = type  // Update for UI
            Task {
                await viewModel.addEdge(from: dragged.id, to: target.id, type: type)  // Async call
            }
            GraphGesturesModifier.logger.debug("Created edge of type \(type.rawValue) from node \(dragged.label) to \(target.label)")
            isAddingEdge = false
        } else {
            GraphGesturesModifier.logger.debug("Duplicate edge ignored between \(dragged.label) and \(target.label)")
        }
    }
    
    private func handleNodeMovement(for dragged: any NodeProtocol, with modelDragOffset: CGPoint) {
        // No target: Move the node (with casts for .with, as it's not on protocol)
        if let index = viewModel.model.nodes.firstIndex(where: { $0.id == dragged.id }) {
            let oldNode = viewModel.model.nodes[index]
            let unwrapped = oldNode.unwrapped
            let newPos = unwrapped.position + modelDragOffset
            let updatedNode: AnyNode
            if let concrete = unwrapped as? Node {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else if let concrete = unwrapped as? ToggleNode {
                let concreteUpdated = concrete.with(position: newPos, velocity: .zero)
                updatedNode = AnyNode(concreteUpdated)
            } else {
                GraphGesturesModifier.logger.error("Unsupported node type for move: \(type(of: unwrapped))")
                return
            }
            viewModel.model.nodes[index] = updatedNode
            print("Moved node \(unwrapped.label) to new position \(newPos)")
            Task { await viewModel.model.startSimulation() }
        }
    }
    
    func handleTap(at location: CGPoint, visibleNodes: [any NodeProtocol], visibleEdges: [GraphEdge], context: GestureContext) -> Bool {
        let hitContext = HitTestContext(zoomScale: context.zoomScale, offset: context.offset, viewSize: context.viewSize, effectiveCentroid: context.effectiveCentroid)
        if let hitNode = HitTestHelper.closestNode(at: location, visibleNodes: visibleNodes, context: hitContext) {
            if selectedNodeID == hitNode.id {
                selectedNodeID = nil  // Deselect on second tap
                GraphGesturesModifier.logger.debug("Deselected Node \(hitNode.label)")
            } else {
                selectedNodeID = hitNode.id
                selectedEdgeID = nil  // Clear edge selection
                GraphGesturesModifier.logger.debug("Selected Node \(hitNode.label)")
            }
            return true
        } else if let hitEdge = HitTestHelper.closestEdge(at: location, visibleEdges: visibleEdges, visibleNodes: visibleNodes, context: hitContext) {
            if selectedEdgeID == hitEdge.id {
                selectedEdgeID = nil  // Deselect on second tap
                GraphGesturesModifier.logger.debug("Deselected Edge \(String(describing: hitEdge.id))")
            } else {
                selectedEdgeID = hitEdge.id
                selectedNodeID = nil  // Clear node selection
                GraphGesturesModifier.logger.debug("Selected Edge \(String(describing: hitEdge.id))")
            }
            return true
        }
        // Miss: Deselect both
        selectedNodeID = nil
        selectedEdgeID = nil
        GraphGesturesModifier.logger.debug("Tap miss: Deselected all")
        return false
    }
    
    private func resetGestureState() {
        draggedNode = nil
        dragStartNode = nil
        dragOffset = .zero
        potentialEdgeTarget = nil
        panStartOffset = nil
        startLocation = nil
        isAddingEdge = false  // Reset edge mode
    }
}
extension GraphGesturesModifier {
    public func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return distance(point, startPoint)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return distance(point, proj)
    }
}
----------------------------------------------------------------------------------------------------
File: GraphSection.swift
Path: GraphEditorWatch/Views/GraphSection.swift
Last modified: 2025-10-11 10:22:33

Contents:
//
//  GraphSection.swift
//  GraphEditorWatch
//
//  Created by handcart on 10/5/25.  // Updated date for refactor
//

import SwiftUI

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    @State private var graphName: String = ""
    @State private var showNewSheet: Bool = false
    @State private var newGraphName: String = ""
    @State private var graphs: [String] = []
    @State private var errorMessage: String?
    
    var body: some View {
        Section(header: Text("Graph")) {
            TextField("Graph Name", text: $graphName)
                .accessibilityIdentifier("graphNameTextField")
            if viewModel.canRedo || viewModel.canUndo {
                Section(header: Text("Undo")) {
                    if viewModel.canUndo {
                        Button("Undo") {
                            Task { await viewModel.undo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("undoButton")
                    }
                    if viewModel.canRedo {
                        Button("Redo") {
                            Task { await viewModel.redo()}
                            onDismiss()
                        }
                        .accessibilityIdentifier("redoButton")
                    }
                }
            }
            
            TextField("Graph Name", text: $graphName)
                .onAppear { graphName = viewModel.currentGraphName }
            
            Button("New Graph") {
                newGraphName = ""
                showNewSheet = true
            }
            .accessibilityIdentifier("newGraphButton")
            .onSubmit { /* Same as above */ }
            .sheet(isPresented: $showNewSheet) {
                VStack {
                    TextField("New Graph Name", text: $newGraphName)
                        .accessibilityIdentifier("newGraphNameTextField")  // Add this
                    Button("Create") {
                        Task {
                            do {
                                try await viewModel.model.createNewGraph(name: newGraphName)
                                viewModel.currentGraphName = newGraphName
                                showNewSheet = false
                                onDismiss()
                            } catch {
                                errorMessage = error.localizedDescription
                            }
                        }
                    }
                    .accessibilityIdentifier("createButton")
                }
            }
            
            Button("Save Graph") {
                Task {
                    viewModel.currentGraphName = graphName
                    do {
                        try await viewModel.model.saveGraph()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("saveButton")
            .onSubmit { /* Same as above */ }
            
            Button("Load Graph") {
                Task {
                    do {
                        try await viewModel.model.loadGraph(name: graphName)
                        viewModel.currentGraphName = graphName
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                    onDismiss()
                }
            }
            .accessibilityIdentifier("loadButton")
            .onSubmit { /* Same as above */ }
            
            Button("List Graphs") {
                Task {
                    do {
                        graphs = try await viewModel.model.listGraphNames()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .accessibilityIdentifier("listGraphsButton")
            .onSubmit { /* Same as above */ }
            
            ForEach(graphs, id: \.self) { name in
                Button(name) {
                    Task {
                        do {
                            try await viewModel.model.loadGraph(name: name)
                            viewModel.currentGraphName = name
                            graphName = name
                            onDismiss()
                        } catch {
                            errorMessage = error.localizedDescription
                        }
                    }
                }
            }
            
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.clearGraph() }
                onDismiss()
            }
            .onSubmit { /* Same as above */ }
            .accessibilityIdentifier("resetGraphButton")
            
            Button("Delete Graph", role: .destructive) {
                Task {
                    do {
                        try await viewModel.model.deleteGraph(name: graphName)
                        graphName = "default"
                        try await viewModel.model.loadGraph(name: "default")
                        onDismiss()
                    } catch {
                        errorMessage = error.localizedDescription
                    }
                }
            }
            .onSubmit { /* Same as above */ }
            .accessibilityLabel("deleteGraphButton")
            
            if let error = errorMessage {
                Text(error).foregroundColor(.red)
            }
        }
        .accessibilityLabel("Graph section")  // NEW: Accessibility
    }
}
--------------------------------------------------
