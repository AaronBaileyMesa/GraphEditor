## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-09-08 11:28:16
Table of Contents:
1. GraphEditorWatch/Views/GraphGesturesModifier.swift
2. GraphEditorWatch/Views/MenuView.swift
3. GraphEditorWatch/Views/NodeView.swift
4. GraphEditorWatchTests/GraphEditorWatchTests.swift--------------------------------------------------
File: GraphGesturesModifier.swift
Path: GraphEditorWatch/Views/GraphGesturesModifier.swift
Last modified: 2025-09-06 08:40:51

Contents:
//
//  GraphGesturesModifier.swift
//  GraphEditorWatch
//
//  Created by handcart on 2025-08-16

import SwiftUI
import WatchKit
import GraphEditorShared
import os.log  // Added for optimized logging

enum HitType {
    case node
    case edge
}

struct GraphGesturesModifier: ViewModifier {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    @Binding var selectedEdgeID: UUID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @Binding var isAddingEdge: Bool
    
    @State private var dragStartNode: (any NodeProtocol)? = nil
    @State private var isMovingSelectedNode: Bool = false
    @State private var gestureStartCentroid: CGPoint = .zero
    @State private var startLocation: CGPoint? = nil  // Tracks touch-down location for tap detection
    
    private let dragStartThreshold: CGFloat = 10.0  // Increased for better tap vs. drag distinction
    
    // Optimized logger
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "gestures")
    
    // New helper: Model to screen conversion (inverse of screenToModel; use your existing if available)
    private func modelToScreen(_ modelPos: CGPoint, zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> CGPoint {
        let safeZoom = max(zoomScale, 0.1)
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let panOffset = CGPoint(x: offset.width, y: offset.height)
        let relative = modelPos - effectiveCentroid
        let scaled = relative * safeZoom
        let screenPos = scaled + viewCenter + panOffset
        return screenPos
    }
    
    // New: Screen-space hit test for nodes (consistent usability)
    private func hitTestNodesInScreenSpace(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> (any NodeProtocol)? {
        var closestNode: (any NodeProtocol)? = nil
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius  // Fixed screen size (e.g., 50pt)
        
#if DEBUG
        var nodeDistances: [(label: Int, screenPos: CGPoint, dist: CGFloat)] = []  // For logging
        logger.debug("Using centroid: \(String(describing: effectiveCentroid)) for this gesture")
#endif
        
        for node in visibleNodes {
            let nodeScreenPos = modelToScreen(node.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            let dist = hypot(screenPos.x - nodeScreenPos.x, screenPos.y - nodeScreenPos.y)
            
#if DEBUG
            nodeDistances.append((node.label, nodeScreenPos, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestNode = node
            }
        }
        
#if DEBUG
        // Log sorted by distance for verification
        nodeDistances.sort { $0.dist < $1.dist }
        logger.debug("Hit Test Diagnostics: Tap at screen \(String(describing: screenPos))")
        for (label, pos, dist) in nodeDistances.prefix(5) {  // Limit to top 5 closest
            logger.debug("Node \(label): screen pos \(String(describing: pos)), dist \(dist)")
        }
        if let closest = closestNode {
            logger.debug("Hit: Node \(closest.label) (dist \(minScreenDist) <= \(hitScreenRadius))")
        } else {
            logger.debug("Miss: Closest dist \(nodeDistances.first?.dist ?? .infinity) > \(hitScreenRadius)")
        }
#endif
        
        return closestNode
    }
    
    // New: Screen-space hit test for edges (for consistency with nodes)
    private func hitTestEdgesInScreenSpace(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> GraphEdge? {
        var closestEdge: GraphEdge? = nil
        var minScreenDist: CGFloat = .infinity
        let hitScreenRadius: CGFloat = Constants.App.hitScreenRadius / 2  // Smaller for edges to avoid overlapping node taps
        
#if DEBUG
        var edgeDistances: [(id: UUID, dist: CGFloat)] = []  // For logging
#endif
        
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.to }) else { continue }
            
            let fromScreen = modelToScreen(fromNode.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            let toScreen = modelToScreen(toNode.position, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, to: toScreen)
            
#if DEBUG
            edgeDistances.append((edge.id, dist))
#endif
            
            if dist < minScreenDist && dist <= hitScreenRadius {
                minScreenDist = dist
                closestEdge = edge
            }
        }
        
#if DEBUG
        // Log sorted by distance
        edgeDistances.sort { $0.dist < $1.dist }
        logger.debug("Edge Hit Test at screen \(String(describing: screenPos))")
        for (id, dist) in edgeDistances.prefix(3) {
            logger.debug("Edge \(id): dist \(dist)")
        }
        if let closest = closestEdge {
            logger.debug("Hit: Edge \(closest.id) (dist \(minScreenDist) <= \(hitScreenRadius))")
        } else {
            logger.debug("Miss: Closest dist \(edgeDistances.first?.dist ?? .infinity) > \(hitScreenRadius)")
        }
#endif
        
        return closestEdge
    }
    
    // New: Screen to model conversion (with effective centroid)
    private func screenToModel(_ screenPos: CGPoint, zoomScale: CGFloat, offset: CGSize, viewSize: CGSize, effectiveCentroid: CGPoint) -> CGPoint {
        let safeZoom = max(zoomScale, 0.1)
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let panOffset = CGPoint(x: offset.width, y: offset.height)
        let translated = screenPos - viewCenter - panOffset
        let unscaled = translated / safeZoom
        return unscaled + effectiveCentroid
    }
    
    func body(content: Content) -> some View {
        let dragGesture = DragGesture(minimumDistance: 0, coordinateSpace: .local)  // Zero for immediate detection
            .onChanged { value in
                let location = value.location
                let translation = value.translation
                let dragMagnitude = hypot(translation.width, translation.height)
                
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()
                
                // New: Use gestureStartCentroid if set; else fallback to viewModel
                if gestureStartCentroid == .zero {
                    gestureStartCentroid = viewModel.effectiveCentroid
                }
                let effectiveCentroid = gestureStartCentroid
                
                if startLocation == nil {
                    startLocation = location
                    selectedNodeID = nil
                    selectedEdgeID = nil
                }
                
                if dragStartNode == nil && dragMagnitude > dragStartThreshold {
                    if let hitNode = hitTestNodesInScreenSpace(at: location, visibleNodes: visibleNodes, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid) {
                        draggedNode = hitNode
                        dragStartNode = hitNode
                        dragOffset = .zero
                        potentialEdgeTarget = nil
                        print("Started drag on node \(hitNode.label)")
                    } else if let hitEdge = hitTestEdgesInScreenSpace(at: location, visibleEdges: visibleEdges, visibleNodes: visibleNodes, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid) {
                        selectedEdgeID = hitEdge.id
                        print("Selected edge \(hitEdge.id)")
                    } else {
                        panStartOffset = offset
                        print("Started pan")
                    }
                }
                
                if let dragged = draggedNode {
                    dragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
                    let draggedModelPos = dragged.position + dragOffset
                    potentialEdgeTarget = hitTestNodesInScreenSpace(at: modelToScreen(draggedModelPos, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid), visibleNodes: visibleNodes, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)
                } else if let startOffset = panStartOffset {
                    offset = CGSize(width: startOffset.width + translation.width, height: startOffset.height + translation.height)
                }
                
                onUpdateZoomRanges()
            }
            .onEnded { value in
                let tapScreenPos = value.location
                let translation = value.translation
                let dragMagnitude = hypot(translation.width, translation.height)
                
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()
                
                let effectiveCentroid = gestureStartCentroid != .zero ? gestureStartCentroid : viewModel.effectiveCentroid
                
                if dragMagnitude < dragStartThreshold, let start = startLocation, distance(start, tapScreenPos) < dragStartThreshold {
                    // Handle as tap
                    #if DEBUG
                    let translated = tapScreenPos - CGPoint(x: viewSize.width / 2 + offset.width, y: viewSize.height / 2 + offset.height)
                    let unscaled = CGPoint(x: translated.x / zoomScale, y: translated.y / zoomScale)
                    let tapModelPos = unscaled + effectiveCentroid
                    logger.debug("--- Tap (.onEnded) Diagnostic ---")
                    logger.debug("Effective Centroid: \(String(describing: effectiveCentroid))")
                    logger.debug("Screen Pos: \(String(describing: tapScreenPos))")
                    logger.debug("Translated: \(String(describing: translated))")
                    logger.debug("Unscaled: \(String(describing: unscaled))")
                    logger.debug("Model Pos (tapModelPos): \(String(describing: tapModelPos))")
                    logger.debug("Visible Nodes Count: \(visibleNodes.count)")
                    logger.debug("--------------------------------")
                    #endif

                    let modelPos = screenToModel(tapScreenPos, zoomScale: zoomScale, offset: offset, viewSize: viewSize, effectiveCentroid: effectiveCentroid)  // Use helper (add if missing, as in previous response)
                    Task { await viewModel.handleTap(at: modelPos) }  // Pass position
                } else {
                    // Non-tap: Handle drag completion (move node or add edge)
                    print("Processing as drag: magnitude \(dragMagnitude), translation \(translation)")
                    if let dragged = draggedNode {
                        Task { await viewModel.snapshot() }
                        let modelDragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
                        print("Drag offset in model: \(modelDragOffset)")
                        
                        if let target = potentialEdgeTarget, target.id != dragged.id {
                            if isAddingEdge {
                                if !viewModel.model.edges.contains(where: { ($0.from == dragged.id && $0.to == target.id) || ($0.from == target.id && $0.to == dragged.id) }) {
                                    // UPDATED: Use pendingEdgeType from ViewModel
                                    let type = viewModel.pendingEdgeType
                                    viewModel.model.edges.append(GraphEdge(from: dragged.id, to: target.id, type: type))
                                    print("Created edge of type \(type.rawValue) from node \(dragged.label) to \(target.label)")
                                    Task { await viewModel.model.startSimulation() }
                                    isAddingEdge = false  // Exit mode
                                }
                            }
                        } else {
                            if let index = viewModel.model.nodes.firstIndex(where: { $0.id == dragged.id }) {
                                var updatedNode = viewModel.model.nodes[index]
                                updatedNode.position += modelDragOffset
                                viewModel.model.nodes[index] = updatedNode
                                print("Moved node \(dragged.label) to new position \(updatedNode.position)")
                                Task { await viewModel.model.startSimulation() }
                            }
                        }
                    } else if isMovingSelectedNode, let selectedID = selectedNodeID {
                        if let index = viewModel.model.nodes.firstIndex(where: { $0.id == selectedID }) {
                            var updatedNode = viewModel.model.nodes[index]
                            let modelDragOffset = CGPoint(x: translation.width / zoomScale, y: translation.height / zoomScale)
                            updatedNode.position += modelDragOffset
                            viewModel.model.nodes[index] = updatedNode
                            print("Moved selected node \(updatedNode.label) by \(modelDragOffset)")
                            Task { await viewModel.model.startSimulation() }
                        }
                    }
                }

                withAnimation(.spring(duration: 0.3, bounce: 0.2)) {
                    onUpdateZoomRanges()
                }

                dragStartNode = nil
                isMovingSelectedNode = false
                draggedNode = nil
                dragOffset = .zero
                potentialEdgeTarget = nil
                panStartOffset = nil
                startLocation = nil
                onUpdateZoomRanges()
                
                // Reset gesture centroid for next gesture
                gestureStartCentroid = .zero
            }

        content
            .highPriorityGesture(dragGesture)
    }
        
    private func distance(_ p1: CGPoint, _ p2: CGPoint) -> CGFloat {
        hypot(p1.x - p2.x, p1.y - p2.y)
    }
    
    private func pointToLineDistance(point: CGPoint, from: CGPoint, to: CGPoint) -> CGFloat {
        let lineVec = to - from
        let pointVec = point - from
        let lineLen = hypot(lineVec.x, lineVec.y)
        if lineLen == 0 { return hypot(point.x - from.x, point.y - from.y) }
        let dot = pointVec.x * lineVec.x + pointVec.y * lineVec.y
        let denom = lineLen * lineLen
        let tUnclamped = dot / denom
        // Fixed: Explicit CGFloat literals to resolve type inference and conformance error
        let t = max(CGFloat(0), min(CGFloat(1), tUnclamped))
        let projection = from + (lineVec * t)
        return hypot(point.x - projection.x, point.y - projection.y)
    }
}
----------------------------------------------------------------------------------------------------
File: MenuView.swift
Path: GraphEditorWatch/Views/MenuView.swift
Last modified: 2025-09-05 12:16:13

Contents:
//
//  MenuView.swift
//  GraphEditor
//
//  Created by handcart on 8/20/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct AddSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let onDismiss: () -> Void
    let onAddEdge: (EdgeType) -> Void  // UPDATED: Pass type to callback
    
    @State private var selectedEdgeType: EdgeType = .association  // NEW: Local state for Picker
    
    var body: some View {
        Section(header: Text("Add")) {
            Button("Add Node") {
                Task { await viewModel.addNode(at: .zero) }
                onDismiss()
            }
            Button("Add Toggle Node") {
                Task { await viewModel.addToggleNode(at: .zero) }
                onDismiss()
            }
            if let selectedID = selectedNodeID {
                Button("Add Child") {
                    Task { await viewModel.addChild(to: selectedID) }
                    onDismiss()
                }
                // NEW: Picker for edge type
                Picker("Edge Type", selection: $selectedEdgeType) {
                    Text("Association").tag(EdgeType.association)
                    Text("Hierarchy").tag(EdgeType.hierarchy)
                }
                Button("Add Edge") {  // UPDATED: Pass selected type
                    onAddEdge(selectedEdgeType)
                    onDismiss()
                }
            }
        }
    }
}

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let selectedEdgeID: UUID?
    let onDismiss: () -> Void
    let onEditNode: () -> Void  // New: Callback for showing edit sheet
    
    var body: some View {
        Section(header: Text("Edit")) {
            if let selectedID = selectedNodeID {
                Button("Edit Node") {  // New
                    onEditNode()
                    onDismiss()
                }
                Button("Delete Node", role: .destructive) {  // Line ~67?
                    Task { await viewModel.deleteNode(withID: selectedID) }
                    onDismiss()
                }
            }
            if let selectedEdgeID = selectedEdgeID,
               let selectedEdge = viewModel.model.edges.first(where: { $0.id == selectedEdgeID }) {
                let fromID = selectedEdge.from
                let toID = selectedEdge.to
                let isBi = viewModel.model.isBidirectionalBetween(fromID, toID)
                Button(isBi ? "Delete Both Edges" : "Delete Edge", role: .destructive) {
                    Task { await viewModel.snapshot() }
                    if isBi {
                        let pair = viewModel.model.edgesBetween(fromID, toID)
                        viewModel.model.edges.removeAll { pair.contains($0) }
                    } else {
                        viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                    }
                    Task { await viewModel.model.startSimulation() }
                    onDismiss()
                }
                Button("Reverse Edge") {  // New
                    Task { await viewModel.snapshot() }
                    viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                    viewModel.model.edges.append(GraphEdge(from: toID, to: fromID))  // Reversed
                    Task { await viewModel.model.startSimulation() }
                    onDismiss()
                }
            }
        }
    }
}

struct ViewSection: View {
    @Binding var showOverlays: Bool
    let isSimulating: Binding<Bool>
    let onCenterGraph: () -> Void
    let onDismiss: () -> Void
    let onSimulationChange: (Bool) -> Void
    
    var body: some View {
        Section(header: Text("View")) {
            Toggle("Show Overlays", isOn: $showOverlays)
            Toggle("Run Simulation", isOn: isSimulating)
                .onChange(of: isSimulating.wrappedValue) { oldValue, newValue in
                    onSimulationChange(newValue)
                }
            
            Button("Center Graph") {
                onCenterGraph()
                onDismiss()
            }
        }
    }
}

struct GraphSection: View {
    let viewModel: GraphViewModel
    let onDismiss: () -> Void
    
    var body: some View {
        Section(header: Text("Graph")) {
            Button("Reset Graph", role: .destructive) {
                Task { await viewModel.resetGraph() }
                onDismiss()
            }
            Button("Save Graph") {
                Task { await viewModel.model.save() }
                onDismiss()
            }
            Button("Load Graph") {
                Task { await viewModel.loadGraph() }
                onDismiss()
            }
        }
    }
}

struct MenuView: View {
    let viewModel: GraphViewModel
    let isSimulatingBinding: Binding<Bool>
    let onCenterGraph: () -> Void
    @Binding var showMenu: Bool  // NEW: Add as parameter to fix "Cannot find 'showMenu' in scope"
    @Binding var showOverlays: Bool  // NEW: Add as parameter to fix "Cannot find '$showOverlays' in scope"
    
    @FocusState private var isMenuFocused: Bool
    @State private var showEditSheet: Bool = false  // New: Local state for sheet
    @State private var isAddingEdge: Bool = false  // New: Local state for add edge mode
    
    var body: some View {
        List {
            AddSection(
                viewModel: viewModel,
                selectedNodeID: viewModel.selectedNodeID,
                onDismiss: { showMenu = false },  // Now in scope
                onAddEdge: { type in  // UPDATED: Receive type
                    viewModel.pendingEdgeType = type  // NEW: Set in ViewModel for gestures
                    isAddingEdge = true
                }
            )
            
            EditSection(
                viewModel: viewModel,
                selectedNodeID: viewModel.selectedNodeID,
                selectedEdgeID: viewModel.selectedEdgeID,
                onDismiss: { showMenu = false },  // Now in scope
                onEditNode: { showEditSheet = true }  // Wires up "Edit Node" to show sheet
            )
            
            // Keep your existing ViewSection and GraphSection here
            ViewSection(
                showOverlays: $showOverlays,  // Now in scope
                isSimulating: isSimulatingBinding,
                onCenterGraph: onCenterGraph,
                onDismiss: { showMenu = false },  // Now in scope
                onSimulationChange: { newValue in
                    viewModel.model.isSimulating = newValue
                    if newValue {
                        Task { await viewModel.model.startSimulation() }
                    } else {
                        Task { await viewModel.model.stopSimulation() }
                    }
                }
            )
            
            GraphSection(viewModel: viewModel, onDismiss: { showMenu = false })  // Now in scope
        }        .navigationTitle("Menu")
        .focused($isMenuFocused)  // New: Bind focus to list
        .onAppear {
            isMenuFocused = true  // Force focus on appear
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                isMenuFocused = true  // Double-focus for reliability
            }
        }
        .onChange(of: isMenuFocused) { oldValue, newValue in
            print("Menu focus: (newValue)") // Debug
            if !newValue {
                isMenuFocused = true // Auto-recover
            }
        }
        .ignoresSafeArea(.keyboard)
        .sheet(isPresented: $showEditSheet) {  // New: Local sheet for edit
            if let selectedID = viewModel.selectedNodeID {
                EditContentSheet(selectedID: selectedID, viewModel: viewModel, onSave: { newContent in
                    Task { await viewModel.updateNodeContent(withID: selectedID, newContent: newContent) }
                    showEditSheet = false
                })
            }
        }
        .onChange(of: isAddingEdge) { oldValue, newValue in  // New: Handle add edge mode (if needed; or pass to parent)
            if newValue {
                // Optionally notify viewModel or handle here
            }
        }
    }
}

#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    // UPDATED: Pass new bindings for preview (use placeholders)
    MenuView(
        viewModel: mockViewModel,
        isSimulatingBinding: .constant(false),
        onCenterGraph: {},
        showMenu: .constant(true),
        showOverlays: .constant(false)
    )
}
----------------------------------------------------------------------------------------------------
File: NodeView.swift
Path: GraphEditorWatch/Views/NodeView.swift
Last modified: 2025-08-16 10:12:42

Contents:
//
//  NodeView.swift
//  GraphEditor
//
//  Created by handcart on 8/13/25.
//

import SwiftUI
import GraphEditorShared


struct NodeView: View {
    let node: any NodeProtocol
    let isSelected: Bool
    let zoomScale: CGFloat
    
    var body: some View {
        ZStack {
            if isSelected {
                Circle()
                    .stroke(Color.yellow, lineWidth: 4 * zoomScale)
                    .frame(width: node.radius * 2 * zoomScale + 4 * zoomScale, height: node.radius * 2 * zoomScale + 4 * zoomScale)
            }
            Circle()
                .fill(node.fillColor)  // Or dynamic based on node type
                .frame(width: node.radius * 2 * zoomScale, height: node.radius * 2 * zoomScale)
            
            // Add icon/label as in ToggleNode.draw
            if let toggleNode = node as? ToggleNode {
                Text(toggleNode.isExpanded ? "-" : "+")
                    .foregroundColor(.white)
                    .font(.system(size: max(8.0, 12.0 * zoomScale), weight: .bold))
            }
            
            Text("\(node.label)")
                .foregroundColor(.white)
                .font(.system(size: max(8.0, 12.0 * zoomScale)))
                .offset(y: -(node.radius + 10) * zoomScale)  // Position above
        }
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatchTests.swift
Path: GraphEditorWatchTests/GraphEditorWatchTests.swift
Last modified: 2025-09-02 13:15:09

Contents:
import Testing
import Foundation
import CoreGraphics
@testable import GraphEditorWatch // Already present
@testable import GraphEditorShared // Changed to @testable for accessing internal members
import XCTest
import SwiftUI

class MockGraphStorage: GraphStorage {
    var nodes: [any NodeProtocol] = []
    var edges: [GraphEdge] = []
    
    func save(nodes: [any NodeProtocol], edges: [GraphEdge]) throws {
        self.nodes = nodes
        self.edges = edges
    }
    
    func load() throws -> (nodes: [any NodeProtocol], edges: [GraphEdge]) {
        (nodes, edges)
    }
    
    func clear() throws {
        nodes = []
        edges = []
    }
}

// Add this helper function at the top of the test file or in the test struct
func approximatelyEqual(_ lhs: CGPoint, _ rhs: CGPoint, accuracy: CGFloat) -> Bool {
    return hypot(lhs.x - rhs.x, lhs.y - rhs.y) < accuracy
}

struct GraphModelTests {
    private func mockPhysicsEngine() -> GraphEditorShared.PhysicsEngine {
        GraphEditorShared.PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300)) // Mock size for tests
    }
    
    @Test func testUndoRedoMixedOperations() async throws {
        let storage = MockGraphStorage()
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        let initialNodeCount = await MainActor.run { model.nodes.count }
        let initialEdgeCount = await MainActor.run { model.edges.count }
        
        // Specify node to delete (e.g., first in cycle removes 2 edges)
        let nodeToDelete = await MainActor.run { model.nodes[0].id }
        let connectedEdges = await MainActor.run { model.edges.filter { $0.from == nodeToDelete || $0.to == nodeToDelete }.count }
        await model.deleteNode(withID: nodeToDelete) // Now 2n, 1e
        
        await model.addNode(at: CGPoint.zero) // Now 3n, 1e — no *manual* snapshot (internal one handles)
        
        #expect(await MainActor.run { model.nodes.count } == initialNodeCount, "After add: count back to initial")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount - connectedEdges, "Edges reduced by connected count")
        
        await model.undo() // To post-delete
        #expect(await MainActor.run { model.nodes.count } == initialNodeCount - 1, "Undo reverts to post-delete")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount - connectedEdges, "Edges match post-delete")
        
        await model.undo() // To initial
        #expect(await MainActor.run { model.nodes.count } == initialNodeCount, "Second undo restores initial")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount, "Edges restored")
        
        await model.redo() // To post-delete
        #expect(await model.nodes.count == initialNodeCount - 1, "Redo applies delete")
        
        await model.redo() // To post-add
        #expect(await model.nodes.count == initialNodeCount, "Redo applies add")
    }
    
    @Test func testInitializationWithDefaults() async throws {
        let storage = MockGraphStorage()
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        #expect(await model.nodes.count >= 3, "Should load default or saved nodes")
        #expect(await model.edges.count >= 3, "Should load default edges")
    }
    
    @Test func testSnapshotAndUndo() async throws {
        let storage = MockGraphStorage()
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        let initialNodes = await model.nodes
        await model.snapshot()
        await model.addNode(at: CGPoint.zero)
        #expect(await model.nodes.count == initialNodes.count + 1, "Node added")
        await model.undo()
        let restoredNodes = await model.nodes
        let idsMatch = Set(restoredNodes.map { $0.id }) == Set(initialNodes.map { $0.id })
        let labelsMatch = Set(restoredNodes.map { $0.label }) == Set(initialNodes.map { $0.label })
        let positionsMatch = zip(restoredNodes.sorted(by: { $0.id.uuidString < $1.id.uuidString }), initialNodes.sorted(by: { $0.id.uuidString < $1.id.uuidString })).allSatisfy { approximatelyEqual($0.position, $1.position, accuracy: 1e-5) }
        #expect(idsMatch && labelsMatch && positionsMatch, "Undo restores state")
    }
    
    @Test func testDeleteNodeAndEdges() async throws {
        let storage = MockGraphStorage()
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        #expect(await !model.nodes.isEmpty, "Assumes default nodes exist")
        let nodeID = await model.nodes[0].id
        let initialEdgeCount = await model.edges.count
        await model.deleteNode(withID: nodeID)
        #expect(await model.nodes.first { $0.id == nodeID } == nil, "Node deleted")
        #expect(await model.edges.count < initialEdgeCount, "Edges reduced")
    }
    
    @Test func testSaveLoadRoundTrip() async throws {
        let storage = MockGraphStorage()
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        let originalNodeCount = await model.nodes.count
        let originalEdges = await model.edges
        // Modify and snapshot to trigger save
        await model.addNode(at: CGPoint.zero)
        await model.snapshot()
        // New instance to trigger load
        let newModel = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine())
        #expect(await newModel.nodes.count == originalNodeCount + 1, "Loaded nodes include added one")
        #expect(await newModel.edges == originalEdges, "Edges unchanged")
    }
      
    
    
    /*
    // New: Basic convergence test with tightened threshold
    // New: Basic convergence test with tightened threshold
    @Test(arguments: 1..<5) func testConvergencePropertyBased(seed: Int) throws {
        let model = GraphModel(storage: MockGraphStorage(), physicsEngine: mockPhysicsEngine())
        srand48(seed)  // Seed random for reproducibility
        //print(model.nodes.map { ($0.label, $0.position) })
        model.nodes = (0..<5).map { _ in
            Node(label: Int(drand48() * 10), position: CGPoint(x: CGFloat(drand48() * 300), y: CGFloat(drand48() * 300)))
        }
        model.edges = (0..<3).map { _ in
            GraphEdge(from: model.nodes[Int(drand48() * 5)].id, to: model.nodes[Int(drand48() * 5)].id)
        }
        
        model.startSimulation()
        // Manual loop for test with substeps
        for _ in 0..<Constants.Physics.maxSimulationSteps {
            var nodes = model.nodes
            var activeAccum = false  // Accumulator declared here (outside inner loop)
            for _ in 0..<20 {  // Increased substeps as suggested
                let (updatedNodes, stepActive) = model.physicsEngine.simulationStep(nodes: nodes, edges: model.edges)
                nodes = updatedNodes
                activeAccum = activeAccum || stepActive  // Update accumulator
                if !stepActive { break }  // Optional: Early break if inactive in a substep
            }
            model.nodes = nodes
            if !activeAccum { break }  // Now uses the accumulator (in scope)
        }
        
        let totalVel = model.nodes.reduce(0.0) { $0 + $1.velocity.magnitude }
        #expect(totalVel < 2.0 * CGFloat(model.nodes.count), "Velocities near zero for seed \(seed)")
    }
    // New/Fixed: Property-based convergence test with tightened threshold and proper parameterization
    @Test func testSimulationConvergence() {
        let tolerance: CGFloat = 0.05
        let model = GraphModel(storage: MockGraphStorage(), physicsEngine: mockPhysicsEngine())
        model.nodes = [
            Node(label: 1, position: CGPoint(x: 100, y: 100), velocity: CGPoint(x: 10, y: 10)),
            Node(label: 2, position: CGPoint(x: 200, y: 200), velocity: CGPoint(x: -10, y: -10))
        ]
        model.edges = [GraphEdge(from: model.nodes[0].id, to: model.nodes[1].id)]
        
        model.startSimulation()
        for _ in 0..<Constants.Physics.maxSimulationSteps {
            var nodes = model.nodes
            var activeAccum = false
            let subSteps = 20  // Increased as suggested
            for _ in 0..<subSteps {
                let edges = model.edges
                let (updatedNodes, stepActive) = model.physicsEngine.simulationStep(nodes: nodes, edges: edges)
                nodes = updatedNodes
                activeAccum = activeAccum || stepActive
                if !stepActive { break }  // Optional early break
            }
            model.nodes = nodes
            if !activeAccum { break }
        }
        
        #expect(model.nodes[0].velocity.magnitude < 1.2 + tolerance, "Node 1 velocity converges to near-zero")
        #expect(model.nodes[1].velocity.magnitude < 1.2 + tolerance, "Node 2 velocity converges to near-zero")
    }
     */
}

struct CoordinateTransformerTests {
    @Test func testCoordinateRoundTrip() {
        let viewSize = CGSize(width: 205, height: 251)  // Apple Watch Ultra 2 points
        let centroid = CGPoint(x: 150, y: 150)
        let modelPos = CGPoint(x: 167.78, y: 165.66)  // From your log
        let zoom: CGFloat = 1.0
        let offset = CGSize.zero
        
        let screenPos = CoordinateTransformer.modelToScreen(modelPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        let recoveredModel = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        
        #expect(approximatelyEqual(recoveredModel, modelPos, accuracy: 1e-3), "Round-trip should match original model position")
    }
    
    @Test func testCoordinateRoundTripWithZoomAndOffset() {
        let viewSize = CGSize(width: 205, height: 251)
        let centroid = CGPoint(x: 56.73, y: 161.10)  // From your log
        let modelPos = CGPoint(x: -40.27, y: 52.60)
        let zoom: CGFloat = 1.0
        let offset = CGSize(width: 81, height: 111.5)
        
        let screenPos = CoordinateTransformer.modelToScreen(modelPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        let recoveredModel = CoordinateTransformer.screenToModel(screenPos, effectiveCentroid: centroid, zoomScale: zoom, offset: offset, viewSize: viewSize)
        
        #expect(approximatelyEqual(recoveredModel, modelPos, accuracy: 1e-3), "Round-trip with zoom and offset should match")
    }
}

    
struct GestureTests {
    @Test func testDragCreatesEdge() async throws {
        let storage = MockGraphStorage()
        let physicsEngine = GraphEditorShared.PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
        let model = await GraphModel(storage: storage, physicsEngine: physicsEngine)
        
        // Setup: Clear default nodes/edges if needed, but since test assumes empty edges after adding, adjust expectations.
        // Note: GraphModel init adds defaults if empty, so to match test intent, we'll clear them here for the test.
        await MainActor.run { model.nodes = [] }
        await MainActor.run { model.edges = [] }
        await model.addNode(at: CGPoint(x: 0, y: 0))
        await model.addNode(at: CGPoint(x: 50, y: 50))
        #expect(await model.edges.isEmpty, "No edges initially")
        
        let viewModel = await GraphViewModel(model: model)
        let draggedNode: (any NodeProtocol)? = await model.nodes[0]
        let potentialEdgeTarget: (any NodeProtocol)? = await model.nodes[1]
        
        // Mock gesture properties instead of creating Value
        let mockTranslation = CGSize(width: 50, height: 50)
        let dragOffset: CGPoint = CGPoint(x: mockTranslation.width / 1.0, y: mockTranslation.height / 1.0)  // Assume zoomScale=1
        
        let dragDistance = hypot(mockTranslation.width, mockTranslation.height)
        if let node = draggedNode,
           let index = await viewModel.model.nodes.firstIndex(where: { $0.id == node.id }) {
            await viewModel.snapshot()
            if dragDistance < AppConstants.tapThreshold {
                // Tap logic (skipped)
            } else {
                // Drag logic
                if let target = potentialEdgeTarget, target.id != node.id {
                    // Break up complex predicate
                    let fromID = node.id
                    let toID = target.id
                    let edgeExists = await MainActor.run {
                        viewModel.model.edges.contains { edge in
                            (edge.from == fromID && edge.to == toID) ||
                            (edge.from == toID && edge.to == fromID)
                        }
                    }
                    if !edgeExists {
                        await MainActor.run { viewModel.model.edges.append(GraphEdge(from: fromID, to: toID)) }
                        await viewModel.model.startSimulation()
                    } else {
                        // Move logic (skipped, but update to use vars)
                        await MainActor.run { viewModel.model.nodes[index].position = CGPoint(x: viewModel.model.nodes[index].position.x + dragOffset.x, y: viewModel.model.nodes[index].position.y + dragOffset.y) }
                        await viewModel.model.startSimulation()
                    }
                }
            }
        }
        
        await #expect(viewModel.model.edges.count == 1, "Edge created after simulated drag")
        let newEdge = await viewModel.model.edges.first
        #expect(newEdge != nil, "New edge exists")
        if let newEdge = newEdge {
            #expect(newEdge.from == draggedNode?.id, "Edge from correct node")
            #expect(newEdge.to == potentialEdgeTarget?.id, "Edge to correct node")
        }
    }
}

struct AccessibilityTests {
    private func mockPhysicsEngine() -> GraphEditorShared.PhysicsEngine {
        GraphEditorShared.PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
    }
    
    @Test func testGraphDescription() async throws {
        let storage = MockGraphStorage()
        // Preload with dummy to avoid defaults and set nextNodeLabel to 1
        storage.nodes = [Node(label: 0, position: .zero)]
        let model = await GraphModel(storage: storage, physicsEngine: mockPhysicsEngine(), nextNodeLabel: 1)
                await MainActor.run { model.nodes = [] }
                await MainActor.run { model.edges = [] }
        
                await MainActor.run { model.nextNodeLabel = 1 }
        
                await model.addNode(at: .zero)
                await model.addNode(at: CGPoint(x: 10, y: 10))
        
                await MainActor.run { model.edges.append(GraphEdge(from: model.nodes[0].id, to: model.nodes[1].id)) }  // Or await model.addEdge(...) if added
        
                let descNoSelect = await MainActor.run { model.graphDescription(selectedID: nil, selectedEdgeID: nil) }
        #expect(descNoSelect == "Graph with 2 nodes and 1 directed edge. No node or edge selected.", "Correct desc without selection")
        
                let descWithSelect = await MainActor.run { model.graphDescription(selectedID: model.nodes[0].id, selectedEdgeID: nil) }
        #expect(descWithSelect == "Graph with 2 nodes and 1 directed edge. Node 1 selected, outgoing to: 2; incoming from: none.", "Correct desc with selection")
    }
}
--------------------------------------------------
