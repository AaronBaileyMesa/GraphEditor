## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-29 07:41:26
Table of Contents:
1. GraphEditorShared/Sources/GraphEditorShared/Quadtree.swift
2. GraphEditorShared/Sources/GraphEditorShared/RepulsionCalculator.swift
3. GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
4. GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
5. GraphEditorWatch/GraphEditorWatch.swift
6. GraphEditorWatch/Models/AppConstants.swift
7. GraphEditorWatch/ViewModels/GraphViewModel.swift--------------------------------------------------
File: Quadtree.swift
Path: GraphEditorShared/Sources/GraphEditorShared/Quadtree.swift
Last modified: 2025-09-19 13:45:29

Contents:
//
//  Quadtree.swift
//  GraphEditorShared
//
//  Created by [original author]; updated for completeness and consistency.
//

import Foundation
import CoreGraphics

@available(iOS 16.0, *)
@available(watchOS 9.0, *)
public class Quadtree {  // Public for consistency and test access
    let bounds: CGRect
    public var centerOfMass: CGPoint = .zero
    public var totalMass: CGFloat = 0
    public var children: [Quadtree]?
    var nodes: [any NodeProtocol] = []  // Existential array for protocol conformance
    
    public init(bounds: CGRect) {
        self.bounds = bounds
    }
    
    public func insert(_ node: any NodeProtocol, depth: Int = 0) {
        // Guard against invalid bounds or excessive depth
        guard bounds.width >= Constants.Physics.minQuadSize,
              bounds.height >= Constants.Physics.minQuadSize,
              depth <= Constants.Physics.maxQuadtreeDepth else {
            nodes.append(node)
            updateCenterOfMass(with: node)
            return
        }
        
        if let children = children {
            // Existing subdivided quad: Insert into appropriate child
            let quadrant = getQuadrant(for: node.position)
            children[quadrant].insert(node, depth: depth + 1)
            aggregateFromChildren()  // Update aggregates post-insert
        } else if !nodes.isEmpty {
            // Leaf with nodes: Subdivide and redistribute all (including new node)
            subdivide()
            guard let children = children else {
                // Failed to subdivide (too small); append to leaf
                nodes.append(node)
                updateCenterOfMass(with: node)
                return
            }
            // Redistribute existing nodes
            for existing in nodes {
                let quadrant = getQuadrant(for: existing.position)
                children[quadrant].insert(existing, depth: depth + 1)
            }
            nodes = []  // Clear leaf nodes after redistribution
            // Insert the new node
            let quadrant = getQuadrant(for: node.position)
            children[quadrant].insert(node, depth: depth + 1)
            aggregateFromChildren()
        } else {
            // Empty leaf: Simply append
            nodes.append(node)
            updateCenterOfMass(with: node)
        }
    }
    
    public func batchInsert(_ batchNodes: [any NodeProtocol], depth: Int = 0) {
        guard depth <= Constants.Physics.maxQuadtreeDepth,
              bounds.width >= Constants.Physics.minQuadSize,
              bounds.height >= Constants.Physics.minQuadSize else {
            appendBatchAndUpdateCOM(batchNodes)
            return
        }

        if let children {
            distribute(batchNodes, to: children, depth: depth + 1)
            aggregateFromChildren()
        } else {
            let allNodes = nodes + batchNodes
            if allNodes.isEmpty { return }
            if allNodes.count <= 1 {
                appendBatchAndUpdateCOM(batchNodes)
            } else {
                subdivide()
                if let children {
                    nodes = []
                    distribute(allNodes, to: children, depth: depth + 1)
                    aggregateFromChildren()
                } else {
                    appendBatchAndUpdateCOM(batchNodes)
                }
            }
        }
    }

    private func appendBatchAndUpdateCOM(_ batch: [any NodeProtocol]) {
        nodes.append(contentsOf: batch)
        for node in batch {
            updateCenterOfMass(with: node)
        }
    }

    private func distribute(_ nodesToDistribute: [any NodeProtocol], to children: [Quadtree], depth: Int) {
        var childBatches: [[any NodeProtocol]] = Array(repeating: [], count: 4)
        for node in nodesToDistribute {
            let quadrant = getQuadrant(for: node.position)
            childBatches[quadrant].append(node)
        }
        for index in 0..<4 where !childBatches[index].isEmpty {
            children[index].batchInsert(childBatches[index], depth: depth)
        }
    }
    
    private func aggregateFromChildren() {
        // Recompute totalMass and centerOfMass from children (bottom-up weighted average)
        centerOfMass = .zero
        totalMass = 0
        guard let children = children else { return }
        for child in children where child.totalMass > 0 {
            let newTotalMass = totalMass + child.totalMass
            centerOfMass = (centerOfMass * totalMass + child.centerOfMass * child.totalMass) / newTotalMass
            totalMass = newTotalMass
        }
    }
    
    private func subdivide() {
        let halfWidth = bounds.width / 2
        let halfHeight = bounds.height / 2
        guard halfWidth >= Constants.Physics.minQuadSize && halfHeight >= Constants.Physics.minQuadSize else {
            return  // Too small to subdivide
        }
        children = [
            Quadtree(bounds: CGRect(x: bounds.minX, y: bounds.minY, width: halfWidth, height: halfHeight)),      // SW
            Quadtree(bounds: CGRect(x: bounds.minX + halfWidth, y: bounds.minY, width: halfWidth, height: halfHeight)), // SE
            Quadtree(bounds: CGRect(x: bounds.minX, y: bounds.minY + halfHeight, width: halfWidth, height: halfHeight)), // NW
            Quadtree(bounds: CGRect(x: bounds.minX + halfWidth, y: bounds.minY + halfHeight, width: halfWidth, height: halfHeight)) // NE
        ]
    }
    
    private func getQuadrant(for point: CGPoint) -> Int {
        let midX = bounds.midX
        let midY = bounds.midY
        if point.x < midX {
            return point.y < midY ? 0 : 2  // 0: SW, 2: NW
        } else {
            return point.y < midY ? 1 : 3  // 1: SE, 3: NE
        }
    }
    
    private func updateCenterOfMass(with node: any NodeProtocol) {
        // Incremental update assuming unit mass per node (extend protocol if variable mass needed)
        let newTotalMass = totalMass + 1
        if newTotalMass > 0 {
            centerOfMass = (centerOfMass * totalMass + node.position) / newTotalMass
        }
        totalMass = newTotalMass
    }
    
    public func computeForce(on queryNode: any NodeProtocol, theta: CGFloat = 0.5) -> CGPoint {
        guard totalMass > 0 else { return .zero }
        
        if !nodes.isEmpty {
            // Leaf: Compute exact repulsion from each node
            var force: CGPoint = .zero
            for leafNode in nodes where leafNode.id != queryNode.id {
                force += repulsionForce(from: leafNode.position, target: queryNode.position)
            }
            return force
        }
        
        // Internal node: Use Barnes-Hut approximation
        let delta = centerOfMass - queryNode.position
        let dist = max(hypot(delta.x, delta.y), Constants.Physics.distanceEpsilon)  // Fixed: Use hypot instead of .magnitude
        if (bounds.width / dist) < theta || children == nil {
            return repulsionForce(from: centerOfMass, target: queryNode.position, mass: totalMass)
        } else {
            var force: CGPoint = .zero
            if let children = children {
                for child in children {
                    force += child.computeForce(on: queryNode, theta: theta)
                }
            }
            return force
        }
    }
    
    public func queryNearby(position: CGPoint, radius: CGFloat) -> [any NodeProtocol] {
        var results: [any NodeProtocol] = []
        func traverse(quadTree: Quadtree) {
            // Quick reject: Check if quad intersects query circle
            let closestX = max(quadTree.bounds.minX, min(position.x, quadTree.bounds.maxX))
            let closestY = max(quadTree.bounds.minY, min(position.y, quadTree.bounds.maxY))
            let distToQuad = hypot(closestX - position.x, closestY - position.y)
            let quadDiagonalHalf = hypot(quadTree.bounds.width / 2, quadTree.bounds.height / 2)
            if distToQuad > radius + quadDiagonalHalf { return }  // No intersection
            
            if let children = quadTree.children {
                // Traverse children
                for child in children {
                    traverse(quadTree: child)
                }
            } else {
                // Leaf: Check individual nodes
                for node in quadTree.nodes {
                    let delta = node.position - position
                    if hypot(delta.x, delta.y) < radius {
                        results.append(node)
                    }
                }
            }
        }
        traverse(quadTree: self)
        return results
    }
    
    private func repulsionForce(from: CGPoint, target: CGPoint, mass: CGFloat = 1) -> CGPoint {
        let deltaX = target.x - from.x
        let deltaY = target.y - from.y
        let distSquared = deltaX * deltaX + deltaY * deltaY
        let epsilonSquared = Constants.Physics.distanceEpsilon * Constants.Physics.distanceEpsilon
        if distSquared < epsilonSquared {
            // Jitter to avoid singularity
            return CGPoint(
                x: CGFloat.random(in: -0.01...0.01),
                y: CGFloat.random(in: -0.01...0.01)
            ) * Constants.Physics.repulsion * mass
        }
        let dist = sqrt(distSquared)
        let forceMagnitude = Constants.Physics.repulsion * mass / distSquared
        return CGPoint(x: (deltaX / dist) * forceMagnitude, y: (deltaY / dist) * forceMagnitude)
    }
}
----------------------------------------------------------------------------------------------------
File: RepulsionCalculator.swift
Path: GraphEditorShared/Sources/GraphEditorShared/RepulsionCalculator.swift
Last modified: 2025-09-15 10:22:34

Contents:
//
//  RepulsionCalculator.swift
//  GraphEditorShared
//
//  Created by handcart on 8/12/25.
//

import Foundation
import CoreGraphics

struct RepulsionCalculator {
    private let maxNodesForQuadtree: Int
    private let simulationBounds: CGSize

    init(maxNodesForQuadtree: Int, simulationBounds: CGSize) {
        self.maxNodesForQuadtree = maxNodesForQuadtree
        self.simulationBounds = simulationBounds
    }

    func computeRepulsions(nodes: [any NodeProtocol]) -> ([NodeID: CGPoint], Quadtree?) {
        var forces: [NodeID: CGPoint] = [:]
        let useQuadtree = nodes.count > maxNodesForQuadtree && simulationBounds.width >= Constants.Physics.minQuadSize && simulationBounds.height >= Constants.Physics.minQuadSize
        let quadtree: Quadtree? = useQuadtree ? buildQuadtree(nodes: nodes) : nil

        for node in nodes {
            var repulsion: CGPoint = .zero
            if let quadtree = quadtree {
                let dynamicTheta: CGFloat = nodes.count > 100 ? 1.5 : (nodes.count > 50 ? 1.2 : 0.8)
                repulsion = quadtreeRepulsion(for: node, quadtree: quadtree, theta: dynamicTheta)  // Updated call
            } else {
                for otherNode in nodes where otherNode.id != node.id {
                    repulsion += repulsionForce(repellerPosition: otherNode.position, queryPosition: node.position)
                }
            }
            forces[node.id] = (forces[node.id] ?? .zero) + repulsion
        }
        return (forces, quadtree)  // New: Return tuple
    }

    public func buildQuadtree(nodes: [any NodeProtocol]) -> Quadtree {
        let boundingBox = boundingBox(nodes: nodes)  // Calls local func
        let quadtree = Quadtree(bounds: boundingBox)
        for node in nodes {
            quadtree.insert(node)
        }
        return quadtree
    }

    private func repulsionForce(repellerPosition: CGPoint, queryPosition: CGPoint, mass: CGFloat = 1.0) -> CGPoint {
        let deltaX = queryPosition.x - repellerPosition.x
        let deltaY = queryPosition.y - repellerPosition.y
        let distanceSquared = max(deltaX * deltaX + deltaY * deltaY, Constants.Physics.distanceEpsilon)
        let distance = sqrt(distanceSquared)
        let forceMagnitude = Constants.Physics.repulsion * mass / distanceSquared
        return CGPoint(x: (deltaX / distance) * forceMagnitude, y: (deltaY / distance) * forceMagnitude)
    }
    
    private func quadtreeRepulsion(for node: any NodeProtocol, quadtree: Quadtree, theta: CGFloat) -> CGPoint {  // Added theta
        var force = CGPoint.zero
        func calculateRepulsion(quadTree: Quadtree) {
            if quadTree.children == nil {
                for other in quadTree.nodes where other.id != node.id {
                    force += repulsionForce(repellerPosition: other.position, queryPosition: node.position, mass: 1.0)
                }
                return
            }

            let deltaX = quadTree.centerOfMass.x - node.position.x
            let deltaY = quadTree.centerOfMass.y - node.position.y
            let distance = hypot(deltaX, deltaY)
            let width = quadTree.bounds.width

            if width / distance < theta && distance > 0 {  // Use theta
                let approxForce = repulsionForce(repellerPosition: quadTree.centerOfMass, queryPosition: node.position, mass: quadTree.totalMass)
                force += approxForce
            } else {
                if let children = quadTree.children {
                    calculateRepulsion(quadTree: children[0])
                    calculateRepulsion(quadTree: children[1])
                    calculateRepulsion(quadTree: children[2])
                    calculateRepulsion(quadTree: children[3])
                }
            }
        }

        calculateRepulsion(quadTree: quadtree)
        return force
    }

    // Added missing boundingBox func
    private func boundingBox(nodes: [any NodeProtocol]) -> CGRect {
        guard !nodes.isEmpty else { return .zero }
        var minX = nodes[0].position.x, minY = nodes[0].position.y
        var maxX = nodes[0].position.x, maxY = nodes[0].position.y
        for node in nodes {
            minX = min(minX, node.position.x - node.radius)
            minY = min(minY, node.position.y - node.radius)
            maxX = max(maxX, node.position.x + node.radius)
            maxY = max(maxY, node.position.y + node.radius)
        }
        return CGRect(x: minX, y: minY, width: maxX - minX, height: maxY - minY)
    }
}
----------------------------------------------------------------------------------------------------
File: ToggleNode.swift
Path: GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
Last modified: 2025-10-27 14:51:40

Contents:
//
//  ToggleNode.swift
//  GraphEditorShared
//
//  Created by handcart on [date]; updated for completeness.
//

import SwiftUI
import Foundation

@available(iOS 16.0, *)
@available(watchOS 9.0, *)
public struct ToggleNode: NodeProtocol, HierarchicalNode, Equatable {  // Updated: Added HierarchicalNode
    public let id: NodeID
    public let label: Int
    public var position: CGPoint
    public var velocity: CGPoint = .zero
    public var radius: CGFloat = Constants.App.nodeModelRadius  // Use constant for consistency
    public var isExpanded: Bool = true
    public var contents: [NodeContent] = []  // NEW: Ordered list, default empty
    public var fillColor: Color { isExpanded ? .green : .red }
    public var children: [NodeID] = []
    public var childOrder: [NodeID] = []  // NEW: Explicit order for children (defaults to children array order)

    public init(id: NodeID = NodeID(), label: Int, position: CGPoint, velocity: CGPoint = .zero, radius: CGFloat = Constants.App.nodeModelRadius, isExpanded: Bool = true, contents: [NodeContent] = [], children: [NodeID] = [], childOrder: [NodeID]? = nil) {
        self.id = id
        self.label = label
        self.position = position
        self.velocity = velocity
        self.radius = radius
        self.isExpanded = isExpanded
        self.contents = contents
        self.children = children
        // Validate childOrder to be a permutation of children
        let validatedOrder = (childOrder ?? children).filter { children.contains($0) }
        self.childOrder = validatedOrder.isEmpty ? children : validatedOrder
    }

    public func with(position: CGPoint, velocity: CGPoint) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, contents: contents, children: children, childOrder: childOrder)
    }

    public func with(position: CGPoint, velocity: CGPoint, contents: [NodeContent]) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, contents: contents, children: children, childOrder: childOrder)
    }

    public func handlingTap() -> Self {
        var updated = self
        updated.collapse()  // Reuse protocol method
        updated.velocity = .zero  // Reset to prevent immediate jumps
        return updated
    }
    
    public func with(children: [NodeID]) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, contents: contents, children: children, childOrder: childOrder)
    }

    public func with(childOrder: [NodeID]) -> Self {  // NEW: Method to update order independently
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, contents: contents, children: children, childOrder: childOrder)
    }

    public func shouldHideChildren() -> Bool {
        !isExpanded  // Existing, but could recurse if deep trees
    }
    
    @available(iOS 16.0, *)
    @available(watchOS 9.0, *)
    public func renderView(zoomScale: CGFloat, isSelected: Bool) -> AnyView {
        AnyView(Circle().fill(fillColor).frame(width: radius * 2 * zoomScale, height: radius * 2 * zoomScale))  // Simple default
    }

    @available(iOS 16.0, *)
    @available(watchOS 9.0, *)
    public func draw(in context: GraphicsContext, at position: CGPoint, zoomScale: CGFloat, isSelected: Bool) {
        let scaledRadius = radius * zoomScale
        let borderWidth: CGFloat = isSelected ? max(3.0, 4 * zoomScale) : 0
        let borderRadius = scaledRadius + borderWidth / 2

        // Draw border if selected
        if borderWidth > 0 {
            let borderPath = Path(ellipseIn: CGRect(x: position.x - borderRadius, y: position.y - borderRadius, width: 2 * borderRadius, height: 2 * borderRadius))
            context.stroke(borderPath, with: .color(.yellow), lineWidth: borderWidth)
        }

        // Draw node circle
        let innerPath = Path(ellipseIn: CGRect(x: position.x - scaledRadius, y: position.y - scaledRadius, width: 2 * scaledRadius, height: 2 * scaledRadius))
        context.fill(innerPath, with: .color(fillColor))

        // Draw +/- icon centered in node
        let iconText = isExpanded ? "-" : "+"
        let iconFontSize = max(8.0, 12.0 * zoomScale)
        let iconResolved = context.resolve(Text(iconText).foregroundColor(.white).font(.system(size: iconFontSize, weight: .bold)))
        context.draw(iconResolved, at: position, anchor: .center)

        // Draw label above node
        let labelFontSize = max(8.0, 12.0 * zoomScale)
        let labelResolved = context.resolve(Text("\(label)").foregroundColor(.white).font(.system(size: labelFontSize)))
        let labelPosition = CGPoint(x: position.x, y: position.y - (scaledRadius + 10 * zoomScale))
        context.draw(labelResolved, at: labelPosition, anchor: .center)

        // NEW: Draw contents list vertically below node
        if !contents.isEmpty && zoomScale > 0.5 {  // Only if zoomed
            var yOffset = scaledRadius + 5 * zoomScale  // Start below node
            let contentFontSize = max(6.0, 8.0 * zoomScale)
            let maxItems = 3  // Limit for watchOS
            for content in contents.prefix(maxItems) {
                let contentText = Text(content.displayText).font(.system(size: contentFontSize)).foregroundColor(.gray)
                let resolved = context.resolve(contentText)
                let contentPosition = CGPoint(x: position.x, y: position.y + yOffset)
                context.draw(resolved, at: contentPosition, anchor: .center)
                yOffset += 10 * zoomScale  // Line spacing
            }
            if contents.count > maxItems {
                let moreText = Text("+\(contents.count - maxItems) more").font(.system(size: contentFontSize * 0.75)).foregroundColor(.gray)
                let resolved = context.resolve(moreText)
                context.draw(resolved, at: CGPoint(x: position.x, y: position.y + yOffset), anchor: .center)
            }
        }
    }

    // NEW: HierarchicalNode methods
    public mutating func collapse() {
        isExpanded = false
    }
    
    public mutating func bulkCollapse() {
        isExpanded = false
        // Recursion handled in GraphModel for full graph access
    }

    // Codable conformance (updated for contents array and childOrder)
    enum CodingKeys: String, CodingKey {
        case id, label, positionX, positionY, velocityX, velocityY, radius, isExpanded, contents, children, childOrder  // UPDATED: Added children and childOrder
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(NodeID.self, forKey: .id)
        label = try container.decode(Int.self, forKey: .label)
        radius = try container.decode(CGFloat.self, forKey: .radius)
        isExpanded = try container.decode(Bool.self, forKey: .isExpanded)
        contents = try container.decode([NodeContent].self, forKey: .contents)  // NEW: Decode array
        children = try container.decode([NodeID].self, forKey: .children)  // NEW: Decode children
        childOrder = try container.decodeIfPresent([NodeID].self, forKey: .childOrder) ?? []  // NEW: Decode childOrder (optional fallback to empty)
        let posX = try container.decode(CGFloat.self, forKey: .positionX)
        let posY = try container.decode(CGFloat.self, forKey: .positionY)
        position = CGPoint(x: posX, y: posY)
        let velX = try container.decode(CGFloat.self, forKey: .velocityX)
        let velY = try container.decode(CGFloat.self, forKey: .velocityY)
        velocity = CGPoint(x: velX, y: velY)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(label, forKey: .label)
        try container.encode(radius, forKey: .radius)
        try container.encode(isExpanded, forKey: .isExpanded)
        try container.encode(contents, forKey: .contents)  // NEW: Encode array
        try container.encode(children, forKey: .children)  // NEW: Encode children
        try container.encode(childOrder, forKey: .childOrder)  // NEW: Encode childOrder
        try container.encode(position.x, forKey: .positionX)
        try container.encode(position.y, forKey: .positionY)
        try container.encode(velocity.x, forKey: .velocityX)
        try container.encode(velocity.y, forKey: .velocityY)
    }

    public static func == (lhs: ToggleNode, rhs: ToggleNode) -> Bool {
        lhs.id == rhs.id &&
        lhs.label == rhs.label &&
        lhs.position == rhs.position &&
        lhs.velocity == rhs.velocity &&
        lhs.radius == rhs.radius &&
        lhs.isExpanded == rhs.isExpanded &&
        lhs.contents == rhs.contents &&
        lhs.children == rhs.children &&  // UPDATED: Include children
        lhs.childOrder == rhs.childOrder  // UPDATED: Include childOrder
    }
}
----------------------------------------------------------------------------------------------------
File: Utilities.swift
Path: GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
Last modified: 2025-10-14 09:10:51

Contents:
// Utilities.swift (Updated with rounding in screenToModel)

import Foundation
import CoreGraphics
import os

public struct LogManager {
    static var isEnabled: Bool {
#if DEBUG
        return true
#else
        return false
#endif
    }
}

public extension Double {
    func clamped(to range: ClosedRange<Double>) -> Double {
        max(range.lowerBound, min(self, range.upperBound))
    }
}

public extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

public extension CGPoint {
    func normalized() -> CGPoint {
        let len = hypot(x, y)
        return len > 0 ? self / len : .zero
    }
    
    static func + (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
    }
    
    static func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)
    }
    
    static func * (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x * rhs, y: lhs.y * rhs)
    }
    
    static func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs + rhs
    }
    
    static func -= (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs - rhs
    }
    
    static func *= (lhs: inout CGPoint, rhs: CGFloat) {
        lhs = lhs * rhs
    }
    
    static func + (lhs: CGPoint, rhs: CGSize) -> CGPoint {
        CGPoint(x: lhs.x + rhs.width, y: lhs.y + rhs.height)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGSize) {
        lhs = lhs + rhs
    }
    
    static func /= (lhs: inout CGPoint, rhs: CGFloat) {
        lhs.x /= rhs
        lhs.y /= rhs
    }
    
    var magnitude: CGFloat {
        hypot(x, y)
    }
}

public extension CGSize {
    static func / (lhs: CGSize, rhs: CGFloat) -> CGSize {
        CGSize(width: lhs.width / rhs, height: lhs.height / rhs)
    }
    
    static func + (lhs: CGSize, rhs: CGSize) -> CGSize {
        CGSize(width: lhs.width + rhs.width, height: lhs.height + rhs.height)
    }
    
    static func += (lhs: inout CGSize, rhs: CGSize) {
        lhs = lhs + rhs
    }
}

// Shared utility functions
public func distance(_ fromPoint: CGPoint, _ targetPoint: CGPoint) -> CGFloat {
    hypot(fromPoint.x - targetPoint.x, fromPoint.y - targetPoint.y)
}

public extension Array where Element: NodeProtocol {
    func centroid() -> CGPoint? {
        guard !isEmpty else { return nil }
        let totals = reduce((x: 0.0, y: 0.0)) { acc, node in
            (x: acc.x + node.position.x, y: acc.y + node.position.y)
        }
        return CGPoint(x: totals.x / CGFloat(count), y: totals.y / CGFloat(count))
    }
}

public func centroid(of nodes: [any NodeProtocol]) -> CGPoint? {
    guard !nodes.isEmpty else { return nil }
    let totals = nodes.reduce((x: 0.0, y: 0.0)) { acc, node in
        (x: acc.x + node.position.x, y: acc.y + node.position.y)
    }
    return CGPoint(x: totals.x / CGFloat(nodes.count), y: totals.y / CGFloat(nodes.count))
}

extension Logger {
    static let subsystem = "io.handcart.GraphEditor"
    
    static func forCategory(_ category: String) -> Logger {
        Logger(subsystem: subsystem, category: category)
    }
    
    func debugLog(_ message: String) {
#if DEBUG
        self.debug("\(message)")
#endif
    }
    
    func infoLog(_ message: String) {
#if DEBUG
        self.info("\(message)")
#endif
    }
    
    func errorLog(_ message: String, error: Error? = nil) {
        let errorDesc = error?.localizedDescription ?? ""
        self.error("\(message) \(errorDesc)")
    }
}

// Add any other shared helpers here (e.g., the CGFloat rounding extension if not already placed)
extension CGFloat {
    func rounded(to decimalPlaces: Int) -> CGFloat {
        let divisor = pow(10.0, CGFloat(decimalPlaces))
        return (self * divisor).rounded() / divisor
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatch.swift
Path: GraphEditorWatch/GraphEditorWatch.swift
Last modified: 2025-10-25 20:19:01

Contents:
//
//  GraphEditorWatch.swift
//  GraphEditorWatch Watch App
//
//  Created by handcart on 8/1/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

// In GraphEditorWatch.swift
@main
struct GraphEditorWatch: App {
    var body: some Scene {
        WindowGroup {
            ContentLoaderView()
        }
    }
}

struct ContentLoaderView: View {
    @State private var viewModel: GraphViewModel?
    
    var body: some View {
        if let viewModel = viewModel {
            ContentView(
                viewModel: viewModel
            )
        } else {
            Text("Loading...")
                .task {
                    let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
                    let storage = PersistenceManager()
                    let model = GraphModel(storage: storage, physicsEngine: physicsEngine)
                    await model.loadGraph()
                    
                    model.nodes = model.nodes.map { anyNode in
                        let updated = anyNode.unwrapped.with(position: anyNode.position, velocity: CGPoint.zero)
                        return AnyNode(updated)
                    }
                    
                    let tempViewModel = GraphViewModel(model: model)
                    if let viewState = try? model.storage.loadViewState(for: model.currentGraphName) {
                        tempViewModel.offset = viewState.offset
                        tempViewModel.zoomScale = viewState.zoomScale
                        tempViewModel.selectedNodeID = viewState.selectedNodeID
                        tempViewModel.selectedEdgeID = viewState.selectedEdgeID
                        print("Loaded view state for '\(model.currentGraphName)'")
                    }
                    self.viewModel = tempViewModel
                    await tempViewModel.model.startSimulation()
                }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: AppConstants.swift
Path: GraphEditorWatch/Models/AppConstants.swift
Last modified: 2025-10-20 10:54:39

Contents:
//
//  AppConstants.swift
//  GraphEditor
//
//  Created by handcart on 8/3/25.
//

import CoreGraphics

struct AppConstants {
    // Graph visuals
    static let nodeModelRadius: CGFloat = 10.0
    static let hitScreenRadius: CGFloat = 30.0
    static let tapThreshold: CGFloat = 10.0
    static let menuLongPressDuration: Double = 1.3
    
    // Zooming
    static let numZoomLevels = 10
    static let defaultMinZoom: CGFloat = 0.2
    static let defaultMaxZoom: CGFloat = 5.0
    public static let zoomPaddingFactor: CGFloat = 0.8  // Fit with some margin
    public static let crownZoomSteps: Int = 20  // Smooth steps for crown
    
}
----------------------------------------------------------------------------------------------------
File: GraphViewModel.swift
Path: GraphEditorWatch/ViewModels/GraphViewModel.swift
Last modified: 2025-10-25 20:18:57

Contents:
//
//  GraphViewModel.swift
//  GraphEditorWatch
//
//  Created by handcart on 10/3/25.
//

import Combine
import GraphEditorShared
import WatchKit  // For WKApplication
import os  // Added for logging

@MainActor public class GraphViewModel: ObservableObject {
    @Published public var model: GraphModel
    @Published public var selectedEdgeID: UUID?
    @Published public var pendingEdgeType: EdgeType = .association
    @Published public var selectedNodeID: UUID?
    @Published public var offset: CGPoint = .zero
    @Published public var zoomScale: CGFloat = 1.0
    @Published public var currentGraphName: String = "default"  // Sync with model; standardized to "default"
        
    private var saveTimer: Timer?
    private var cancellable: AnyCancellable?
    
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "viewmodel")
    }
    
    var isSelectedToggleNode: Bool {
        guard let id = selectedNodeID else { return false }
        return model.nodes.first { $0.id == id }?.unwrapped is ToggleNode
    }
    
    public var canUndo: Bool {
        model.canUndo
    }
    
    public var canRedo: Bool {
        model.canRedo
    }
    
    private var pauseObserver: NSObjectProtocol?
    private var resumeObserver: NSObjectProtocol?
    
    private var resumeTimer: Timer?
    
    public var effectiveCentroid: CGPoint {
        /*
        let visibleNodes = model.visibleNodes()
        if let id = selectedNodeID, let node = visibleNodes.first(where: { $0.id == id }) {
            return node.position
        } else if let id = selectedEdgeID, let edge = model.edges.first(where: { $0.id == id }),
                  let from = visibleNodes.first(where: { $0.id == edge.from }),
                  let target = visibleNodes.first(where: { $0.id == edge.target }) {
            return CGPoint(x: (from.position.x + target.position.x) / 2, y: (from.position.y + target.position.y) / 2)
        }
        return centroid(of: visibleNodes) ?? .zero  // Fix unwrap
         */
        return model.centroid ?? .zero
    }
    
    public enum AppFocusState: Equatable {
        case graph
        case node(UUID)
        case edge(UUID)
        case menu
    }

    @Published public var focusState: AppFocusState = .graph
    
    public init(model: GraphModel) {
        self.model = model
        self.currentGraphName = model.currentGraphName  // Sync on init
        cancellable = model.objectWillChange
            .receive(on: DispatchQueue.main)
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
        
        pauseObserver = NotificationCenter.default.addObserver(forName: .graphSimulationPause, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.model.pauseSimulation()
            }
        }
        
        resumeObserver = NotificationCenter.default.addObserver(forName: .graphSimulationResume, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.resumeSimulationAfterDelay()
            }
        }
    }
    
    public func calculateZoomRanges(for viewSize: CGSize) -> (min: CGFloat, max: CGFloat) {
        var graphBounds = model.physicsEngine.boundingBox(nodes: model.nodes.map { $0.unwrapped })
        if graphBounds.width < 100 || graphBounds.height < 100 {
            graphBounds = graphBounds.insetBy(dx: -50, dy: -50)
        }
        let contentPadding: CGFloat = Constants.App.contentPadding
        let paddedWidth = graphBounds.width + 2 * contentPadding
        let paddedHeight = graphBounds.height + 2 * contentPadding
        let fitWidth = viewSize.width / paddedWidth
        let fitHeight = viewSize.height / paddedHeight
        let calculatedMin = min(fitWidth, fitHeight)
        let minZoom = max(calculatedMin, 0.5)
        let maxZoom = minZoom * Constants.App.maxZoom  // Now higher (e.g., *5)
        
#if DEBUG
        GraphViewModel.logger.debug("Calculated zoom ranges: min=\(minZoom), max=\(maxZoom), based on bounds x=\(graphBounds.origin.x), y=\(graphBounds.origin.y), width=\(graphBounds.width), height=\(graphBounds.height)")
        #endif
        
        return (minZoom, maxZoom)
    }
    
    public func addNode(at position: CGPoint) async {
        await model.addNode(at: position)
    }
    
    public func addToggleNode(at position: CGPoint) async {  // NEW: Add this method to fix 'no member 'addToggleNode''
        await model.addToggleNode(at: position)
        await saveAfterDelay()
    }
    
    public func addEdge(from fromID: NodeID, to targetID: NodeID, type: EdgeType = .association) async {
        await model.addEdge(from: fromID, target: targetID, type: type)
        await saveAfterDelay()
    }
    
    public func undo() async {
        await model.undo()
        await saveAfterDelay()
    }
    
    public func redo() async {
        await model.redo()
        await saveAfterDelay()
    }
    
    public func deleteSelected() async {
        await model.deleteSelected(selectedNodeID: selectedNodeID, selectedEdgeID: selectedEdgeID)
        selectedNodeID = nil
        selectedEdgeID = nil
        await saveAfterDelay()
    }
    
    public func toggleExpansion(for nodeID: NodeID) async {
        await model.toggleExpansion(for: nodeID)
        await saveAfterDelay()
    }
    
    public func toggleSelectedNode() async {  // NEW: Add this method to fix 'no member 'toggleSelectedNode''
        if let id = selectedNodeID {
            await toggleExpansion(for: id)
        }
    }
    
    public func deleteNode(withID id: NodeID) async {
        await model.deleteNode(withID: id)
        if selectedNodeID == id { selectedNodeID = nil }
        // Deleting a node may also invalidate an edge selection
        selectedEdgeID = nil
        await saveAfterDelay()
    }
    
    public func clearGraph() async {
        await model.clearGraph()
        await saveAfterDelay()
    }
    
    public func pauseSimulation() async {
        await model.pauseSimulation()
    }
    
    public func resumeSimulation() async {
        await model.resumeSimulation()
    }
    
    public func resumeSimulationAfterDelay() async {
        resumeTimer?.invalidate()
        resumeTimer = Timer.scheduledTimer(withTimeInterval: 0.3, repeats: false) { [weak self] _ in
            Task { @MainActor in  // Hop to main for safe access
                guard let self = self else { return }
                if WKApplication.shared().applicationState == .active {
                    await self.model.resumeSimulation()  // Consistent async call
                }
            }
        }
    }
    
    // Fixed: handleTap with proper scoping, removed invalid SwiftUI Text, added ToggleNode update logic (assumes model.updateNode method; adjust if needed)
    public func handleTap(at modelPos: CGPoint) async {
        await model.pauseSimulation()
        
        #if DEBUG
        GraphViewModel.logger.debug("Handling tap at model pos: x=\(modelPos.x), y=\(modelPos.y)")
        #endif
        
        // Efficient hit test with queryNearby
        let hitRadius: CGFloat = 25.0 / max(1.0, zoomScale)  // Dynamic: Smaller radius at higher zoom for precision; test and adjust
        let nearbyNodes = model.physicsEngine.queryNearby(position: modelPos, radius: hitRadius, nodes: model.visibleNodes())
        
        #if DEBUG
        GraphViewModel.logger.debug("Nearby nodes found: \(nearbyNodes.count)")
        #endif
        
        // Sort by distance to get closest (if multiple)
        let sortedNearby = nearbyNodes.sorted {
            hypot($0.position.x - modelPos.x, $0.position.y - modelPos.y) < hypot($1.position.x - modelPos.x, $1.position.y - modelPos.y)
        }
        
        if let tappedNode = sortedNearby.first {
            selectedNodeID = (tappedNode.id == selectedNodeID) ? nil : tappedNode.id
            selectedEdgeID = nil
            
            #if DEBUG
            GraphViewModel.logger.debug("Selected node \(tappedNode.label) (type: \(type(of: tappedNode)))")
            #endif
            
            model.objectWillChange.send()  // Trigger UI refresh
        } else {
            // Miss: Clear selections
            selectedNodeID = nil
            selectedEdgeID = nil
            
            #if DEBUG
            GraphViewModel.logger.debug("Tap missed; cleared selections")
            #endif
        }
        
        focusState = selectedNodeID.map { .node($0) } ?? .graph
        objectWillChange.send()
        await resumeSimulationAfterDelay()
    }
    
    public func setSelectedNode(_ id: UUID?) {
        selectedNodeID = id
        focusState = id.map { .node($0) } ?? .graph
        objectWillChange.send()
    }

    public func setSelectedEdge(_ id: UUID?) {
        selectedEdgeID = id
        focusState = id.map { .edge($0) } ?? .graph
        objectWillChange.send()
    }
    
    public func centerGraph() {
        // UPDATED: Enhanced to recalculate based on bounds
        let viewSize = CGSize(width: 300, height: 300)  // Replace with actual view size if passed
        let (minZoom, _) = calculateZoomRanges(for: viewSize)
        zoomScale = minZoom
        offset = .zero
        objectWillChange.send()
    }
}

extension GraphViewModel {
    // MARK: - Multi-Graph Support
    
    /// Creates a new empty graph and switches to it, resetting view state.
    public func createNewGraph(name: String) async throws {
        // Save current view state before switching
        try saveViewState()
        
        try await model.createNewGraph(name: name)
        currentGraphName = model.currentGraphName  // Sync
        
        // Reset view state for new graph
        offset = .zero
        zoomScale = 1.0
        selectedNodeID = nil
        selectedEdgeID = nil
        focusState = .graph
        
        await resumeSimulation()
        objectWillChange.send()
    }
    
    /// Loads a specific graph by name, switches to it, and loads its view state.
    public func loadGraph(name: String) async throws {
        // Save current view state before switching
        try saveViewState()
        
        await model.loadGraph(name: name)
        currentGraphName = model.currentGraphName  // Sync
        
        // Load view state for the new graph
        if let viewState = try model.storage.loadViewState(for: currentGraphName) {
            offset = viewState.offset
            zoomScale = viewState.zoomScale
            selectedNodeID = viewState.selectedNodeID
            selectedEdgeID = viewState.selectedEdgeID
        } else {
            // Default if no view state
            offset = .zero
            zoomScale = 1.0
            selectedNodeID = nil
            selectedEdgeID = nil
        }
        focusState = .graph
        
        await resumeSimulation()
        objectWillChange.send()
    }
    
    /// Deletes a graph by name.
    public func deleteGraph(name: String) async throws {
        try await model.deleteGraph(name: name)
    }
    
    /// Lists all graph names.
    public func listGraphNames() async throws -> [String] {
        try await model.listGraphNames()
    }
}

extension GraphViewModel {
    // MARK: - View State Persistence
    
    /// Saves current view state for the current graph.
    public func saveViewState() throws {
        let viewState = ViewState(offset: offset, zoomScale: zoomScale, selectedNodeID: selectedNodeID, selectedEdgeID: selectedEdgeID)
        try model.storage.saveViewState(viewState, for: currentGraphName)
        
        #if DEBUG
        GraphViewModel.logger.debug("Saved view state for '\(self.currentGraphName)'")
        #endif
    }
}

extension GraphViewModel {
    // MARK: - Helpers
    
    private func saveAfterDelay() async {
        saveTimer?.invalidate()
        saveTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: false) { [weak self] _ in
            Task { @MainActor in
                do {
                    try await self?.model.saveGraph()
                    try self?.saveViewState()
                } catch {
                    #if DEBUG
                    GraphViewModel.logger.error("Save failed: \(error.localizedDescription)")
                    #endif
                }
            }
        }
    }
}
--------------------------------------------------
