## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-14 08:14:27
Table of Contents:
1. GraphEditorWatch/ViewModels/GraphViewModel.swift
2. GraphEditorWatch/Views/AddSection.swift
3. GraphEditorWatch/Views/ContentView.swift
4. GraphEditorWatch/Views/EditContentSheet.swift
5. GraphEditorWatch/Views/EditSection.swift
6. GraphEditorWatch/Views/GestureUtils.swift--------------------------------------------------
File: GraphViewModel.swift
Path: GraphEditorWatch/ViewModels/GraphViewModel.swift
Last modified: 2025-10-13 13:11:52

Contents:
//
//  GraphViewModel.swift
//  GraphEditorWatch
//
//  Created by handcart on 10/3/25.
//

import Combine
import GraphEditorShared
import WatchKit  // For WKApplication
import os  // Added for logging

@MainActor public class GraphViewModel: ObservableObject {
    @Published public var model: GraphModel
    @Published public var selectedEdgeID: UUID?
    @Published public var pendingEdgeType: EdgeType = .association
    @Published public var selectedNodeID: UUID?
    @Published public var offset: CGPoint = .zero
    @Published public var zoomScale: CGFloat = 1.0
    @Published public var currentGraphName: String = "default"  // Sync with model; standardized to "default"
        
    private var saveTimer: Timer?
    private var cancellable: AnyCancellable?
    
    private static var logger: Logger {
        Logger(subsystem: "io.handcart.GraphEditor", category: "viewmodel")
    }
    
    var isSelectedToggleNode: Bool {
        guard let id = selectedNodeID else { return false }
        return model.nodes.first { $0.id == id }?.unwrapped is ToggleNode
    }
    
    public var canUndo: Bool {
        model.canUndo
    }
    
    public var canRedo: Bool {
        model.canRedo
    }
    
    private var pauseObserver: NSObjectProtocol?
    private var resumeObserver: NSObjectProtocol?
    
    private var resumeTimer: Timer?
    
    public var effectiveCentroid: CGPoint {
        let visibleNodes = model.visibleNodes()
        if let id = selectedNodeID, let node = visibleNodes.first(where: { $0.id == id }) {
            return node.position
        } else if let id = selectedEdgeID, let edge = model.edges.first(where: { $0.id == id }),
                  let from = visibleNodes.first(where: { $0.id == edge.from }),
                  let target = visibleNodes.first(where: { $0.id == edge.target }) {
            return CGPoint(x: (from.position.x + target.position.x) / 2, y: (from.position.y + target.position.y) / 2)
        }
        return centroid(of: visibleNodes) ?? .zero  // Fix unwrap
    }
    
    public enum AppFocusState: Equatable {
        case graph
        case node(UUID)
        case edge(UUID)
        case menu
    }

    @Published public var focusState: AppFocusState = .graph
    
    public init(model: GraphModel) {
        self.model = model
        self.currentGraphName = model.currentGraphName  // Sync on init
        cancellable = model.objectWillChange
            .receive(on: DispatchQueue.main)
            .sink { [weak self] _ in
                self?.objectWillChange.send()
            }
        
        pauseObserver = NotificationCenter.default.addObserver(forName: .graphSimulationPause, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.model.pauseSimulation()
            }
        }
        
        resumeObserver = NotificationCenter.default.addObserver(forName: .graphSimulationResume, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.resumeSimulationAfterDelay()
            }
        }
    }
    
    public func calculateZoomRanges(for viewSize: CGSize) -> (min: CGFloat, max: CGFloat) {
        var graphBounds = model.physicsEngine.boundingBox(nodes: model.nodes.map { $0.unwrapped })
        if graphBounds.width < 100 || graphBounds.height < 100 {
            graphBounds = graphBounds.insetBy(dx: -50, dy: -50)
        }
        let contentPadding: CGFloat = Constants.App.contentPadding
        let paddedWidth = graphBounds.width + 2 * contentPadding
        let paddedHeight = graphBounds.height + 2 * contentPadding
        let fitWidth = viewSize.width / paddedWidth
        let fitHeight = viewSize.height / paddedHeight
        let calculatedMin = min(fitWidth, fitHeight)
        let minZoom = max(calculatedMin, 0.5)
        let maxZoom = minZoom * Constants.App.maxZoom  // Now higher (e.g., *5)
        
#if DEBUG
        GraphViewModel.logger.debug("Calculated zoom ranges: min=\(minZoom), max=\(maxZoom), based on bounds x=\(graphBounds.origin.x), y=\(graphBounds.origin.y), width=\(graphBounds.width), height=\(graphBounds.height)")
        #endif
        
        return (minZoom, maxZoom)
    }
    
    public func addNode(at position: CGPoint) async {
        await model.addNode(at: position)
    }
    
    public func addToggleNode(at position: CGPoint) async {  // NEW: Add this method to fix 'no member 'addToggleNode''
        await model.addToggleNode(at: position)
        await saveAfterDelay()
    }
    
    public func addEdge(from fromID: NodeID, to targetID: NodeID, type: EdgeType = .association) async {
        await model.addEdge(from: fromID, target: targetID, type: type)
        await saveAfterDelay()
    }
    
    public func undo() async {
        await model.undo()
        await saveAfterDelay()
    }
    
    public func redo() async {
        await model.redo()
        await saveAfterDelay()
    }
    
    public func deleteSelected() async {
        await model.deleteSelected(selectedNodeID: selectedNodeID, selectedEdgeID: selectedEdgeID)
        selectedNodeID = nil
        selectedEdgeID = nil
        await saveAfterDelay()
    }
    
    public func toggleExpansion(for nodeID: NodeID) async {
        await model.toggleExpansion(for: nodeID)
        await saveAfterDelay()
    }
    
    public func toggleSelectedNode() async {  // NEW: Add this method to fix 'no member 'toggleSelectedNode''
        if let id = selectedNodeID {
            await toggleExpansion(for: id)
        }
    }
    
    public func addChild(to parentID: NodeID) async {
        await model.addChild(to: parentID)
        await saveAfterDelay()
    }
    
    public func deleteNode(withID id: NodeID) async {
        await model.deleteNode(withID: id)
        if selectedNodeID == id { selectedNodeID = nil }
        // Deleting a node may also invalidate an edge selection
        selectedEdgeID = nil
        await saveAfterDelay()
    }
    
    public func clearGraph() async {
        await model.clearGraph()
        await saveAfterDelay()
    }
    
    public func pauseSimulation() async {
        await model.pauseSimulation()
    }
    
    public func resumeSimulation() async {
        await model.resumeSimulation()
    }
    
    public func resumeSimulationAfterDelay() async {
        resumeTimer?.invalidate()
        resumeTimer = Timer.scheduledTimer(withTimeInterval: 0.3, repeats: false) { [weak self] _ in
            Task { @MainActor in  // Hop to main for safe access
                guard let self = self else { return }
                if WKApplication.shared().applicationState == .active {
                    await self.model.resumeSimulation()  // Consistent async call
                }
            }
        }
    }
    
    // Fixed: handleTap with proper scoping, removed invalid SwiftUI Text, added ToggleNode update logic (assumes model.updateNode method; adjust if needed)
    public func handleTap(at modelPos: CGPoint) async {
        await model.pauseSimulation()
        
        #if DEBUG
        GraphViewModel.logger.debug("Handling tap at model pos: x=\(modelPos.x), y=\(modelPos.y)")
        #endif
        
        // Efficient hit test with queryNearby
        let hitRadius: CGFloat = 25.0 / max(1.0, zoomScale)  // Dynamic: Smaller radius at higher zoom for precision; test and adjust
        let nearbyNodes = model.physicsEngine.queryNearby(position: modelPos, radius: hitRadius, nodes: model.visibleNodes())
        
        #if DEBUG
        GraphViewModel.logger.debug("Nearby nodes found: \(nearbyNodes.count)")
        #endif
        
        // Sort by distance to get closest (if multiple)
        let sortedNearby = nearbyNodes.sorted {
            hypot($0.position.x - modelPos.x, $0.position.y - modelPos.y) < hypot($1.position.x - modelPos.x, $1.position.y - modelPos.y)
        }
        
        if let tappedNode = sortedNearby.first {
            selectedNodeID = (tappedNode.id == selectedNodeID) ? nil : tappedNode.id
            selectedEdgeID = nil
            
            #if DEBUG
            GraphViewModel.logger.debug("Selected node \(tappedNode.label) (type: \(type(of: tappedNode)))")
            #endif
            
            model.objectWillChange.send()  // Trigger UI refresh
        } else {
            // Miss: Clear selections
            selectedNodeID = nil
            selectedEdgeID = nil
            
            #if DEBUG
            GraphViewModel.logger.debug("Tap missed; cleared selections")
            #endif
        }
        
        focusState = selectedNodeID.map { .node($0) } ?? .graph
        objectWillChange.send()
        await resumeSimulationAfterDelay()
    }
    
    public func setSelectedNode(_ id: UUID?) {
        selectedNodeID = id
        focusState = id.map { .node($0) } ?? .graph
        objectWillChange.send()
    }

    public func setSelectedEdge(_ id: UUID?) {
        selectedEdgeID = id
        focusState = id.map { .edge($0) } ?? .graph
        objectWillChange.send()
    }
    
    public func centerGraph() {
        // UPDATED: Enhanced to recalculate based on bounds
        let viewSize = CGSize(width: 300, height: 300)  // Replace with actual view size if passed
        let (minZoom, _) = calculateZoomRanges(for: viewSize)
        zoomScale = minZoom
        offset = .zero
        objectWillChange.send()
    }
}

extension GraphViewModel {
    // MARK: - Multi-Graph Support
    
    /// Creates a new empty graph and switches to it, resetting view state.
    public func createNewGraph(name: String) async throws {
        // Save current view state before switching
        try saveViewState()
        
        try await model.createNewGraph(name: name)
        currentGraphName = model.currentGraphName  // Sync
        
        // Reset view state for new graph
        offset = .zero
        zoomScale = 1.0
        selectedNodeID = nil
        selectedEdgeID = nil
        focusState = .graph
        
        await resumeSimulation()
        objectWillChange.send()
    }
    
    /// Loads a specific graph by name, switches to it, and loads its view state.
    public func loadGraph(name: String) async throws {
        // Save current view state before switching
        try saveViewState()
        
        try await model.loadGraph(name: name)
        currentGraphName = model.currentGraphName  // Sync
        
        // Load view state for the new graph
        if let viewState = try model.storage.loadViewState(for: currentGraphName) {
            offset = viewState.offset
            zoomScale = viewState.zoomScale
            selectedNodeID = viewState.selectedNodeID
            selectedEdgeID = viewState.selectedEdgeID
        } else {
            // Default if no view state
            offset = .zero
            zoomScale = 1.0
            selectedNodeID = nil
            selectedEdgeID = nil
        }
        focusState = .graph
        
        await resumeSimulation()
        objectWillChange.send()
    }
    
    /// Deletes a graph by name.
    public func deleteGraph(name: String) async throws {
        try await model.deleteGraph(name: name)
    }
    
    /// Lists all graph names.
    public func listGraphNames() async throws -> [String] {
        try await model.listGraphNames()
    }
}

extension GraphViewModel {
    // MARK: - View State Persistence
    
    /// Saves current view state for the current graph.
    public func saveViewState() throws {
        let viewState = ViewState(offset: offset, zoomScale: zoomScale, selectedNodeID: selectedNodeID, selectedEdgeID: selectedEdgeID)
        try model.storage.saveViewState(viewState, for: currentGraphName)
        
        #if DEBUG
        GraphViewModel.logger.debug("Saved view state for '\(self.currentGraphName)'")
        #endif
    }
}

extension GraphViewModel {
    // MARK: - Helpers
    
    private func saveAfterDelay() async {
        saveTimer?.invalidate()
        saveTimer = Timer.scheduledTimer(withTimeInterval: 2.0, repeats: false) { [weak self] _ in
            Task { @MainActor in
                do {
                    try await self?.model.saveGraph()
                    try self?.saveViewState()
                } catch {
                    #if DEBUG
                    GraphViewModel.logger.error("Save failed: \(error.localizedDescription)")
                    #endif
                }
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: AddSection.swift
Path: GraphEditorWatch/Views/AddSection.swift
Last modified: 2025-10-06 20:26:05

Contents:
//
//  AddSection.swift
//  GraphEditor
//
//  Created by handcart on 10/5/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct AddSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?
    let onDismiss: () -> Void
    let onAddEdge: (EdgeType) -> Void  // UPDATED: Pass type to callback
    
    @State private var selectedEdgeType: EdgeType = .association  // NEW: Local state for Picker
    
    var body: some View {
        Section(header: Text("Add")) {
            Button("Add Node") {
                Task { await viewModel.addNode(at: .zero) }
                onDismiss()
            }
            .onSubmit { onDismiss() }  // NEW: WatchOS focus improvement
            .accessibilityIdentifier("addNodeButton")
            
            Button("Add Toggle Node") {
                Task { await viewModel.addToggleNode(at: .zero) }
                onDismiss()
            }
            .accessibilityIdentifier("addToggleNodeButton")
            .onSubmit { onDismiss() }
            
            if let selectedID = selectedNodeID {
                Button("Add Child") {
                    Task { await viewModel.addChild(to: selectedID) }
                    onDismiss()
                }
                .onSubmit { onDismiss() }
                .accessibilityIdentifier("addChildButton")
                
                // NEW: Picker for edge type
                Picker("Edge Type", selection: $selectedEdgeType) {
                    Text("Association").tag(EdgeType.association)
                    Text("Hierarchy").tag(EdgeType.hierarchy)
                }
                .accessibilityLabel("Select edge type: \(selectedEdgeType.rawValue)")
                
                Button("Add Edge") {  // UPDATED: Pass selected type
                    onAddEdge(selectedEdgeType)
                    onDismiss()
                }
                .onSubmit { onAddEdge(selectedEdgeType); onDismiss() }
                .disabled(selectedNodeID == nil)  // Improvement: Explicit disable
                .accessibilityIdentifier("addEdgeButton")
            }
        }
        .accessibilityLabel("Add section")  // NEW: Accessibility
    }
}
----------------------------------------------------------------------------------------------------
File: ContentView.swift
Path: GraphEditorWatch/Views/ContentView.swift
Last modified: 2025-10-13 08:30:15

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared
import Foundation
import CoreGraphics
import os  // Added for logging

struct ContentView: View {
    private let logger = Logger(subsystem: "io.handcart.GraphEditor", category: "contentview")  // Added for consistent logging
    
    @ObservedObject var viewModel: GraphViewModel
    @State private var zoomScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var draggedNode: NodeWrapper = NodeWrapper(node: nil)
    @State private var dragOffset: CGPoint = .zero
    @State private var potentialEdgeTarget: NodeWrapper = NodeWrapper(node: nil)
    @State private var selectedNodeID: NodeID?
    @State private var selectedEdgeID: UUID?
    @State private var panStartOffset: CGSize?
    @State private var showMenu: Bool = false
    @State private var showOverlays: Bool = false
    @FocusState private var canvasFocus: Bool
    @State private var minZoom: CGFloat = AppConstants.defaultMinZoom
    @State private var maxZoom: CGFloat = AppConstants.defaultMaxZoom
    @State private var crownPosition: Double = Double(AppConstants.crownZoomSteps) / 2
    @State private var wristSide: WKInterfaceDeviceWristLocation = .left  // Default to left
    @State private var showEditSheet: Bool = false
    @State private var isAddingEdge: Bool = false
    @State private var viewSize: CGSize = .zero
    @State private var isSimulating: Bool = false
    
    // NEW: Custom Bindings to sync @State with ViewModel (two-way)
    private var selectedNodeIDBinding: Binding<NodeID?> {
        Binding(
            get: { selectedNodeID },
            set: { newValue in
                selectedNodeID = newValue
                viewModel.selectedNodeID = newValue  // Sync to ViewModel
            }
        )
    }
    
    private var selectedEdgeIDBinding: Binding<UUID?> {
        Binding(
            get: { selectedEdgeID },
            set: { newValue in
                selectedEdgeID = newValue
                viewModel.selectedEdgeID = newValue  // Sync to ViewModel
            }
        )
    }
    
    var body: some View {
        let geoView = GeometryReader { geo in
            let baseView = mainContent(in: geo)
                .onAppear {
                    Task { await viewModel.resumeSimulation() }
                    updateZoomRanges(for: geo.size)
                    wristSide = WKInterfaceDevice.current().wristLocation
                    
                    #if DEBUG
                    logger.debug("Geometry size: width=\(geo.size.width), height=\(geo.size.height)")
                    #endif
                    
                    canvasFocus = true
                    
                    let initialNormalized = crownPosition / Double(AppConstants.crownZoomSteps)
                    zoomScale = minZoom + (maxZoom - minZoom) * CGFloat(initialNormalized)
                    
                    #if DEBUG
                    logger.debug("Initial sync: crownPosition \(self.crownPosition) -> zoomScale \(self.zoomScale)")
                    #endif
                    
                    viewSize = geo.size  // New: Set viewSize here
                }
                .onChange(of: viewModel.model.nodes) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: viewModel.model.edges) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: crownPosition) { oldValue, newValue in
                    #if DEBUG
                    logger.debug("Crown position changed in ContentView: from \(oldValue) to \(newValue)")
                    #endif
                    
                    handleCrownRotation(newValue: newValue)
                }
                .onChange(of: canvasFocus) { oldValue, newValue in
                    #if DEBUG
                    logger.debug("ContentView canvas focus changed: from \(oldValue) to \(newValue)")
                    #endif
                    
                    if !newValue { canvasFocus = true }
                }
            
            let intermediateView = baseView
                .onChange(of: zoomScale) { oldValue, newValue in
                    let normalized = (newValue - minZoom) / (maxZoom - minZoom)
                    let targetCrown = Double(AppConstants.crownZoomSteps) * Double(normalized).clamped(to: 0...1)
                    if abs(targetCrown - crownPosition) > 0.01 {
                        crownPosition = targetCrown
                        
                        #if DEBUG
                        logger.debug("Zoom sync: zoomScale from \(oldValue) to \(newValue) -> crownPosition \(self.crownPosition)")
                        #endif
                    }
                }
                .onChange(of: viewModel.selectedNodeID) { oldValue, newValue in
                    #if DEBUG
                    logger.debug("ContentView: ViewModel selectedNodeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
                    #endif
                    
                    selectedNodeID = newValue  // Sync to local @State
                    viewModel.objectWillChange.send()  // Force re-render if needed
                }
                .onChange(of: viewModel.selectedEdgeID) { oldValue, newValue in
                    #if DEBUG
                    logger.debug("ContentView: ViewModel selectedEdgeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
                    #endif
                    
                    selectedEdgeID = newValue
                    viewModel.objectWillChange.send()
                }
                .onReceive(viewModel.model.$isStable) { isStable in
                    if isStable {
                        #if DEBUG
                        logger.debug("Simulation stable: Centering nodes")
                        #endif
                        
                        centerGraph()
                    }
                }
                .onReceive(viewModel.model.$simulationError) { error in
                    if let error = error {
                        #if DEBUG
                        logger.error("Simulation error: \(error.localizedDescription)")
                        #endif
                    }
                }
            
            intermediateView
        }
        
        let finalView = geoView
            .ignoresSafeArea()
            .focusable(true)  // Make the whole view focusable for crown
            .focused($canvasFocus)  // Bind focus state
            .digitalCrownRotation(  // Restored: Put back here for root-level handling
                $crownPosition,
                from: 0,
                through: Double(AppConstants.crownZoomSteps),
                sensitivity: .medium
            )
        
        finalView
    }
    
    private func mainContent(in geo: GeometryProxy) -> some View {
        ZStack {
            InnerView(config: InnerViewConfig(
                geo: geo,
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                showOverlays: $showOverlays,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                updateZoomRangesHandler: { size in updateZoomRanges(for: size) },
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                canvasFocus: _canvasFocus,
                onCenterGraph: centerGraph,
                isAddingEdge: $isAddingEdge,
                isSimulatingBinding: $isSimulating  // FIXED: Pass actual binding instance from @State
            ))
        }
        .overlay(alignment: .bottom) {
            HStack(spacing: 20) {
                if wristSide == .left {
                    addNodeButton(in: geo)
                    menuButton(in: geo)
                } else {
                    menuButton(in: geo)
                    addNodeButton(in: geo)
                }
            }
            .padding(.bottom, 1)
            .padding(.horizontal, 15)
            .transition(.move(edge: .bottom))
        }
        // Removed .hidden() to ensure the content renders
    }
    
    private func handleCrownRotation(newValue: Double) {
        #if DEBUG
        logger.debug("handleCrownRotation triggered with newValue: \(newValue)")
        #endif
        
        let normalized = newValue.clamped(to: 0...Double(AppConstants.crownZoomSteps)) / Double(AppConstants.crownZoomSteps)
        let targetZoom = minZoom + (maxZoom - minZoom) * CGFloat(normalized)
        
        // New: Animate the zoom change for smoothness
        withAnimation(.easeInOut(duration: 0.1)) {
            zoomScale = targetZoom
        }
        viewModel.centerGraph()  // Direct call
        
        #if DEBUG
        logger.debug("Updated zoomScale to: \(self.zoomScale)")
        #endif
    }
    
    private func updateZoomRanges(for viewSize: CGSize) {
        let ranges = viewModel.calculateZoomRanges(for: viewSize)
        minZoom = ranges.min
        maxZoom = ranges.max
        zoomScale = zoomScale.clamped(to: minZoom...maxZoom)
    }
    
    // New: Animated centering from new version (with corrected shift sign if needed; tested as-is)
    private func centerGraph() {
        let oldCentroid = viewModel.effectiveCentroid
        viewModel.centerGraph()
        let newCentroid = viewModel.effectiveCentroid
        let centroidShift = CGSize(
            width: (oldCentroid.x - newCentroid.x) * zoomScale,
            height: (oldCentroid.y - newCentroid.y) * zoomScale
        )
        withAnimation(.easeInOut(duration: 0.3)) {
            offset.width += centroidShift.width
            offset.height += centroidShift.height
        }
        
        #if DEBUG
        logger.debug("Centering graph: Old centroid x=\(oldCentroid.x), y=\(oldCentroid.y), Shift width=\(centroidShift.width), height=\(centroidShift.height), New target x=\(newCentroid.x), y=\(newCentroid.y)")
        #endif
    }
    
    // Existing add node button (unchanged, but renamed for clarity)
    private func addNodeButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            WKInterfaceDevice.current().play(.click)  // Haptic feedback
            
            #if DEBUG
            logger.debug("Add Node button tapped!")
            #endif
            
            let randomPos = CGPoint(x: CGFloat.random(in: -100...100), y: CGFloat.random(in: -100...100))
            Task { await viewModel.addNode(at: randomPos) }
        }, label: {
            Image(systemName: "plus.circle.fill")
                .font(.system(size: 30))
                .foregroundColor(.green)
        })
        .buttonStyle(.plain)
        .contentShape(Rectangle())
        .frame(minWidth: 44, minHeight: 44)
        .padding(10)
        .background(Color.blue.opacity(0.2))  // TEMP: Visualize tappable area; remove later
    }

    private func menuButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            WKInterfaceDevice.current().play(.click)  // Haptic feedback
            
            #if DEBUG
            logger.debug("Menu button tapped!")
            #endif
            
            showMenu.toggle()
        }, label: {
            Image(systemName: showMenu ? "point.3.filled.connected.trianglepath.dotted" : "line.3.horizontal")
                .font(.system(size: 30))
                .foregroundColor(showMenu ? .green : .blue)
        })
        .buttonStyle(.plain)
        .contentShape(Rectangle())
        .frame(minWidth: 44, minHeight: 44)
        .padding(10)
        .background(Color.red.opacity(0.2))  // TEMP: Visualize; different color for distinction
        .accessibilityLabel("Menu")
    }
}

extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    ContentView(viewModel: mockViewModel)
}
----------------------------------------------------------------------------------------------------
File: EditContentSheet.swift
Path: GraphEditorWatch/Views/EditContentSheet.swift
Last modified: 2025-09-19 14:48:19

Contents:
//
//  EditContentSheet.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

// EditContentSheet.swift

import SwiftUI
import GraphEditorShared

struct EditContentSheet: View {
    let selectedID: NodeID
    let viewModel: GraphViewModel
    let onSave: (NodeContent?) -> Void
    @State private var selectedType: String = "String"
    @State private var stringValue: String = ""
    @State private var dateValue: Date = Date()
    @State private var numberValue: Double = 0.0
    
    var body: some View {
        VStack {
            Picker("Type", selection: $selectedType) {
                Text("String").tag("String")
                Text("Date").tag("Date")
                Text("Number").tag("Number")
                Text("None").tag("None")
            }
            if selectedType == "String" {
                TextField("Enter text", text: $stringValue).frame(maxWidth: .infinity)
            } else if selectedType == "Date" {
                DatePicker("Select date", selection: $dateValue, displayedComponents: .date)
            } else if selectedType == "Number" {
                TextField("Enter number", value: $numberValue, format: .number)
            }
            Button("Save") {
                let newContent: NodeContent? = {
                    switch selectedType {
                    case "String": return stringValue.isEmpty ? nil : .string(stringValue)
                    case "Date": return .date(dateValue)
                    case "Number": return .number(numberValue)
                    default: return nil
                    }
                }()
                onSave(newContent)
            }
        }
        .onAppear {
            if let node = viewModel.model.nodes.first(where: { $0.id == selectedID }),
               let content = node.content {
                switch content {
                case .string(let str): selectedType = "String"; stringValue = str
                case .date(let date): selectedType = "Date"; dateValue = date
                case .number(let num): selectedType = "Number"; numberValue = num
                }
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: EditSection.swift
Path: GraphEditorWatch/Views/EditSection.swift
Last modified: 2025-10-10 13:16:11

Contents:
//
//  EditSection.swift
//  GraphEditor
//
//  Created by handcart on 10/5/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

struct EditSection: View {
    let viewModel: GraphViewModel
    let selectedNodeID: NodeID?  // Keep let for now (uses wrappedValue)
    let selectedEdgeID: UUID?    // Keep let for now (uses wrappedValue)
    let onDismiss: () -> Void
    let onEditNode: () -> Void
    
    @State private var isProcessing = false  // NEW: Loading state
    
    private func findSelectedEdge() -> GraphEdge? {
        viewModel.model.edges.first { $0.id == selectedEdgeID }
    }
    
    private func clearSelections() {
        // NEW: Clear bindings (passed as let, so call ViewModel to sync)
        viewModel.setSelectedNode(nil)
        viewModel.setSelectedEdge(nil)
    }
    
    var body: some View {
        Section(header: Text("Edit")) {
            if let selectedID = selectedNodeID {
                Button("Edit Node") {  // New
                    onEditNode()
                    onDismiss()
                    
                }
                .onSubmit { onEditNode(); onDismiss() }
                .disabled(isProcessing)
                .accessibilityIdentifier("editNodeButton")
                
                if viewModel.isSelectedToggleNode {
                    Button("Toggle Expand/Collapse") {
                        Task { await viewModel.toggleSelectedNode() }
                        onDismiss()
                    }
                    .onSubmit { /* Same as above */ }
                    .accessibilityIdentifier("toggleExpandCollapseButton")

                }
                
                Button("Delete Node", role: .destructive) {
                    Task {
                        isProcessing = true
                        await viewModel.model.deleteNode(withID: selectedID)
                        clearSelections()  // NEW: Clear after delete
                        isProcessing = false
                    }
                    onDismiss()
                }
                .onSubmit { /* Same as above, but for focus */ }
                .disabled(isProcessing)
                .accessibilityIdentifier("deleteNodeButton")
            }
            
            if let selectedEdgeID = selectedEdgeID,
               let selectedEdge = findSelectedEdge() {
                let fromID = selectedEdge.from
                let targetID = selectedEdge.target
                let isBi = viewModel.model.isBidirectionalBetween(fromID, targetID)
                let fromLabel = viewModel.model.nodes.first(where: { $0.id == fromID })?.label ?? 0
                let toLabel = viewModel.model.nodes.first(where: { $0.id == targetID })?.label ?? 0
                
                // Display edge info
                Text("Edge: \(fromLabel) → \(toLabel) (\(selectedEdge.type.rawValue))")
                    .font(.caption)
                    .foregroundColor(.secondary)
                
                Button(isBi ? "Delete Both Edges" : "Delete Edge", role: .destructive) {
                    Task {
                        isProcessing = true
                        await viewModel.model.snapshot()
                        if isBi {
                            let pair = viewModel.model.edgesBetween(fromID, targetID)
                            viewModel.model.edges.removeAll { pair.contains($0) }
                        } else {
                            viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                        }
                        await viewModel.model.startSimulation()
                        clearSelections()  // NEW: Clear after delete
                        isProcessing = false
                    }
                    onDismiss()
                }
                .onSubmit { /* Same as above */ }
                .disabled(isProcessing)
                .accessibilityIdentifier("deleteEdgeButton")

                if selectedEdge.type == .hierarchy {  // NEW: Only for directed edges
                    Button("Reverse Edge") {
                        Task {
                            isProcessing = true
                            await viewModel.model.snapshot()
                            viewModel.model.edges.removeAll { $0.id == selectedEdgeID }
                            viewModel.model.edges.append(GraphEdge(from: targetID, target: fromID, type: .hierarchy))
                            await viewModel.model.startSimulation()
                            clearSelections()  // NEW: Clear after reverse
                            isProcessing = false
                        }
                        onDismiss()
                    }
                    .onSubmit { /* Same as above */ }
                    .disabled(isProcessing)
                    .accessibilityIdentifier("reverseNodeButton")

                }
            }
        }
        .accessibilityLabel("Edit section")  // NEW: Accessibility
        .foregroundColor(isProcessing ? .gray : .primary)  // NEW: Visual feedback for processing
    }
}
----------------------------------------------------------------------------------------------------
File: GestureUtils.swift
Path: GraphEditorWatch/Views/GestureUtils.swift
Last modified: 2025-10-11 19:40:27

Contents:
// GestureUtils.swift
// Extracted utilities for hit testing and distance calculations

import SwiftUI
import GraphEditorShared

struct GestureUtils {
    static func closestNode(at screenPos: CGPoint, visibleNodes: [any NodeProtocol], context: GraphEditorShared.HitTestContext) -> (any NodeProtocol)? {
        var closest: (any NodeProtocol)?
        var minDist: CGFloat = .infinity
        let adjustedRadius = AppConstants.hitScreenRadius / max(1.0, context.zoomScale) * 2.0  // Double boost at zoom >1; tune to 3.0 if needed
        #if os(watchOS)
        let boostedRadius = adjustedRadius * 2.0  // Extra for watch touch (fingers obscure)
        #endif
        for node in visibleNodes {
            let nodeScreen = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let dist = hypot(screenPos.x - nodeScreen.x, screenPos.y - nodeScreen.y)
            if dist < boostedRadius && dist < minDist {
                minDist = dist
                closest = node
            }
        }
        return closest
    }
    
    static func closestEdge(at screenPos: CGPoint, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], context: HitTestContext) -> GraphEdge? {
        var closestEdge: GraphEdge?
        var minDist: CGFloat = .infinity
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let targetNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                targetNode.position,
                effectiveCentroid: context.effectiveCentroid,
                zoomScale: context.zoomScale,
                offset: context.offset,
                viewSize: context.viewSize
            )
            
            let dist = pointToLineDistance(point: screenPos, from: fromScreen, to: toScreen)
            let hitThreshold: CGFloat = 20.0
            if dist < hitThreshold && dist < minDist {
                minDist = dist
                closestEdge = edge
            }
        }
        return closestEdge
    }
    
    static func pointToLineDistance(point: CGPoint, from startPoint: CGPoint, to endPoint: CGPoint) -> CGFloat {
        let pointX = Double(point.x), pointY = Double(point.y)
        let startX = Double(startPoint.x), startY = Double(startPoint.y)
        let endX = Double(endPoint.x), endY = Double(endPoint.y)
        
        let lineVecX = endX - startX
        let lineVecY = endY - startY
        let lineLen = hypot(lineVecX, lineVecY)
        
        if lineLen == 0 {
            return hypot(point.x - startPoint.x, point.y - startPoint.y)
        }
        
        let pointVecX = pointX - startX
        let pointVecY = pointY - startY
        let dot = pointVecX * lineVecX + pointVecY * lineVecY
        let denom = lineLen * lineLen
        let projectionParam = dot / denom
        let clampedParam = max(0.0, min(1.0, projectionParam))
        
        let projX = startX + lineVecX * clampedParam
        let projY = startY + lineVecY * clampedParam
        
        let proj = CGPoint(x: CGFloat(projX), y: CGFloat(projY))
        return hypot(point.x - proj.x, point.y - proj.y)
    }
    
    static func modelToScreen(_ modelPos: CGPoint, context: HitTestContext) -> CGPoint {
        return CoordinateTransformer.modelToScreen(
            modelPos,
            effectiveCentroid: context.effectiveCentroid,
            zoomScale: context.zoomScale,
            offset: context.offset,
            viewSize: context.viewSize
        )
    }
    
    // Add any other utility functions extracted from the original file here
}
--------------------------------------------------
