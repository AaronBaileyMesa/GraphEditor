## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-02 11:37:10
Table of Contents:
1. GraphEditorWatch/Views/ContentView.swift
2. GraphEditorWatch/Views/EditContentSheet.swift
3. GraphEditorWatch/Views/GraphCanvasView.swift--------------------------------------------------
File: ContentView.swift
Path: GraphEditorWatch/Views/ContentView.swift
Last modified: 2025-10-02 10:47:13

Contents:
// ContentView.swift (Reduced version: Extracted utilities, InnerView, and EditContentSheet)

import SwiftUI
import WatchKit
import GraphEditorShared
import Foundation
import CoreGraphics

struct ContentView: View {
    @ObservedObject var viewModel: GraphViewModel
    @State private var zoomScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var draggedNode: NodeWrapper = NodeWrapper(node: nil)
    @State private var dragOffset: CGPoint = .zero
    @State private var potentialEdgeTarget: NodeWrapper = NodeWrapper(node: nil)
    @State private var selectedNodeID: NodeID?
    @State private var selectedEdgeID: UUID?
    @State private var panStartOffset: CGSize?
    @State private var showMenu: Bool = false
    @State private var showOverlays: Bool = false
    @FocusState private var canvasFocus: Bool
    @State private var minZoom: CGFloat = AppConstants.defaultMinZoom
    @State private var maxZoom: CGFloat = AppConstants.defaultMaxZoom
    @State private var crownPosition: Double = Double(AppConstants.crownZoomSteps) / 2
    @State private var wristSide: WKInterfaceDeviceWristLocation = .left  // Default to left
    @State private var showEditSheet: Bool = false
    @State private var isAddingEdge: Bool = false
    @State private var viewSize: CGSize = .zero
    @State private var isSimulating: Bool = false
    
    // NEW: Custom Bindings to sync @State with ViewModel (two-way)
    private var selectedNodeIDBinding: Binding<NodeID?> {
        Binding(
            get: { selectedNodeID },
            set: { newValue in
                selectedNodeID = newValue
                viewModel.setSelectedNode(newValue)  // Sync to ViewModel
            }
        )
    }
    
    private var selectedEdgeIDBinding: Binding<UUID?> {
        Binding(
            get: { selectedEdgeID },
            set: { newValue in
                selectedEdgeID = newValue
                viewModel.setSelectedEdge(newValue)  // Sync to ViewModel
            }
        )
    }
    
    var body: some View {
        let geoView = GeometryReader { geo in
            let baseView = mainContent(in: geo)
                .onAppear {
                    Task { await viewModel.resumeSimulation() }
                    updateZoomRanges(for: geo.size)
                    wristSide = WKInterfaceDevice.current().wristLocation
                    print(geo.size)
                    canvasFocus = true
                    
                    let initialNormalized = crownPosition / Double(AppConstants.crownZoomSteps)
                    zoomScale = minZoom + (maxZoom - minZoom) * CGFloat(initialNormalized)
#if DEBUG
                    print("Initial sync: crownPosition \(crownPosition) -> zoomScale \(zoomScale)")
#endif
                    
                    viewSize = geo.size  // New: Set viewSize here
                }
                .onChange(of: viewModel.model.nodes) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: viewModel.model.edges) { _, _ in
                    updateZoomRanges(for: viewSize)  // New: Use viewSize
                }
                .onChange(of: crownPosition) { oldValue, newValue in
                    print("Crown position changed in ContentView: from \(oldValue) to \(newValue)")
                    handleCrownRotation(newValue: newValue)
                }
                .onChange(of: canvasFocus) { oldValue, newValue in
                    print("ContentView canvas focus changed: from \(oldValue) to \(newValue)")
                    if !newValue { canvasFocus = true }
                }
            
            let intermediateView = baseView
                .onChange(of: zoomScale) { oldValue, newValue in
                    let normalized = (newValue - minZoom) / (maxZoom - minZoom)
                    let targetCrown = Double(AppConstants.crownZoomSteps) * Double(normalized).clamped(to: 0...1)
                    if abs(targetCrown - crownPosition) > 0.01 {
                        crownPosition = targetCrown
#if DEBUG
                        print("Zoom sync: zoomScale from \(oldValue) to \(newValue) -> crownPosition \(crownPosition)")
#endif
                    }
                }
                .onChange(of: viewModel.selectedNodeID) { oldValue, newValue in
                    print("ContentView: ViewModel selectedNodeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
                    selectedNodeID = newValue  // Sync to local @State
                    viewModel.objectWillChange.send()  // Force re-render if needed
                }
                .onChange(of: viewModel.selectedEdgeID) { oldValue, newValue in
                    print("ContentView: ViewModel selectedEdgeID changed from \(oldValue?.uuidString.prefix(8) ?? "nil") to \(newValue?.uuidString.prefix(8) ?? "nil")")
                    selectedEdgeID = newValue
                    viewModel.objectWillChange.send()
                }
                .onReceive(viewModel.model.$isStable) { isStable in
                    if isStable {
                        print("Simulation stable: Centering nodes")
                        centerGraph()
                    }
                }
                .onReceive(viewModel.model.$simulationError) { error in
                    if let error = error {
                        print("Simulation error: \(error.localizedDescription)")
                    }
                }
                .sheet(isPresented: $showEditSheet) {
                    if let selectedID = selectedNodeID {
                        EditContentSheet(selectedID: selectedID, viewModel: viewModel, onSave: { newContent in
                            Task { await viewModel.model.updateNodeContent(withID: selectedID, newContent: newContent) }
                        })
                    }
                }
            
            intermediateView
        }
        
        let finalView = geoView
            .ignoresSafeArea()
            .focusable(true)  // Make the whole view focusable for crown
            .focused($canvasFocus)  // Bind focus state
            .digitalCrownRotation(  // Restored: Put back here for root-level handling
                $crownPosition,
                from: 0,
                through: Double(AppConstants.crownZoomSteps),
                sensitivity: .medium
            )
        
        finalView
    }
    
    private func mainContent(in geo: GeometryProxy) -> some View {
        ZStack {
            InnerView(config: InnerViewConfig(
                geo: geo,
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                showOverlays: $showOverlays,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                updateZoomRangesHandler: { size in updateZoomRanges(for: size) },
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                canvasFocus: _canvasFocus,
                onCenterGraph: centerGraph,
                isAddingEdge: $isAddingEdge,
                isSimulatingBinding: $isSimulating  // FIXED: Pass actual binding instance from @State
            ))
            
            Color.clear
                .safeAreaInset(edge: .bottom, spacing: -2) {
                    addNodeButton(in: geo)
                    menuButton(in: geo)
                }
                .transition(.move(edge: .bottom))
                .padding(.horizontal, 15)  // Extra side padding to avoid left/right clipping
        }
        // Removed .hidden() to ensure the content renders
    }
    
    private func handleCrownRotation(newValue: Double) {
#if DEBUG
        print("handleCrownRotation triggered with newValue: \(newValue)")
#endif
        let normalized = newValue.clamped(to: 0...Double(AppConstants.crownZoomSteps)) / Double(AppConstants.crownZoomSteps)
        let targetZoom = minZoom + (maxZoom - minZoom) * CGFloat(normalized)
        
        // New: Animate the zoom change for smoothness
        withAnimation(.easeInOut(duration: 0.1)) {
            zoomScale = targetZoom
        }
        viewModel.centerGraph()  // Direct call
#if DEBUG
        print("Updated zoomScale to: \(zoomScale)")
#endif
    }
    
    private func updateZoomRanges(for viewSize: CGSize) {
        let ranges = viewModel.calculateZoomRanges(for: viewSize)
        minZoom = ranges.min
        maxZoom = ranges.max
        zoomScale = zoomScale.clamped(to: minZoom...maxZoom)
    }
    
    // New: Animated centering from new version (with corrected shift sign if needed; tested as-is)
    private func centerGraph() {
        let oldCentroid = viewModel.effectiveCentroid
        viewModel.centerGraph()
        let newCentroid = viewModel.effectiveCentroid
        let centroidShift = CGSize(
            width: (oldCentroid.x - newCentroid.x) * zoomScale,
            height: (oldCentroid.y - newCentroid.y) * zoomScale
        )
        withAnimation(.easeInOut(duration: 0.3)) {
            offset.width += centroidShift.width
            offset.height += centroidShift.height
        }
        print("Centering graph: Old centroid \(oldCentroid), Shift \(centroidShift), New target \(newCentroid)")
    }
    
    // Existing add node button (unchanged, but renamed for clarity)
    private func addNodeButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            let randomPos = CGPoint(x: CGFloat.random(in: -100...100), y: CGFloat.random(in: -100...100))  // Random spread
            Task { await viewModel.addNode(at: randomPos) }  // Changed to addNode for regular nodes; use addToggleNode if desired
        }, label: {
            Image(systemName: "plus.circle.fill")
                .font(.system(size: 30))
                .foregroundColor(.green)
        })
        .buttonStyle(.plain)
        .position(x: wristSide == .left ? 20 : geo.size.width - 20, y: geo.size.height - 20)
    }
    
    private func menuButton(in geo: GeometryProxy) -> some View {
        Button(action: {
            if showMenu {
                showMenu = false  // Back to graph
            } else {
                showMenu = true   // Open menu
            }
        }, label: {
            Image(systemName: showMenu ? "point.3.filled.connected.trianglepath.dotted" : "line.3.horizontal")  // NEW: Dynamic icon (graph for back, menu for open)
                .font(.system(size: 30))
                .foregroundColor(showMenu ? .green : .blue)  // NEW: Color change for state
        })
        .buttonStyle(.plain)
        .position(x: wristSide == .left ? 60 : geo.size.width - 60, y: geo.size.height - 20)  // Preserve adjacent positioning
        .accessibilityLabel("Menu")
    }
}

extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    ContentView(viewModel: mockViewModel)
}
----------------------------------------------------------------------------------------------------
File: EditContentSheet.swift
Path: GraphEditorWatch/Views/EditContentSheet.swift
Last modified: 2025-09-19 14:48:19

Contents:
//
//  EditContentSheet.swift
//  GraphEditor
//
//  Created by handcart on 9/19/25.
//

// EditContentSheet.swift

import SwiftUI
import GraphEditorShared

struct EditContentSheet: View {
    let selectedID: NodeID
    let viewModel: GraphViewModel
    let onSave: (NodeContent?) -> Void
    @State private var selectedType: String = "String"
    @State private var stringValue: String = ""
    @State private var dateValue: Date = Date()
    @State private var numberValue: Double = 0.0
    
    var body: some View {
        VStack {
            Picker("Type", selection: $selectedType) {
                Text("String").tag("String")
                Text("Date").tag("Date")
                Text("Number").tag("Number")
                Text("None").tag("None")
            }
            if selectedType == "String" {
                TextField("Enter text", text: $stringValue).frame(maxWidth: .infinity)
            } else if selectedType == "Date" {
                DatePicker("Select date", selection: $dateValue, displayedComponents: .date)
            } else if selectedType == "Number" {
                TextField("Enter number", value: $numberValue, format: .number)
            }
            Button("Save") {
                let newContent: NodeContent? = {
                    switch selectedType {
                    case "String": return stringValue.isEmpty ? nil : .string(stringValue)
                    case "Date": return .date(dateValue)
                    case "Number": return .number(numberValue)
                    default: return nil
                    }
                }()
                onSave(newContent)
            }
        }
        .onAppear {
            if let node = viewModel.model.nodes.first(where: { $0.id == selectedID }),
               let content = node.content {
                switch content {
                case .string(let str): selectedType = "String"; stringValue = str
                case .date(let date): selectedType = "Date"; dateValue = date
                case .number(let num): selectedType = "Number"; numberValue = num
                }
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: GraphCanvasView.swift
Path: GraphEditorWatch/Views/GraphCanvasView.swift
Last modified: 2025-10-02 11:03:02

Contents:
import SwiftUI
import WatchKit
import GraphEditorShared

// Reverted: Custom wrapper for reliable crown focus (without crown—handled in ContentView now)
struct FocusableView<Content: View>: View {
    let content: Content
    @FocusState private var isFocused: Bool
    
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        content
            .id("CrownFocusableCanvas")
            .focused($isFocused)
            .onAppear {
                isFocused = true
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                    isFocused = true  // Double-focus for WatchOS reliability
                }
            }
            .onChange(of: isFocused) { oldValue, newValue in
                print("Canvas focus changed: from \(oldValue) to \(newValue)")
                if !newValue {
                    isFocused = true  // Auto-recover focus loss
                }
            }
    }
}

struct GraphCanvasView: View {
    let viewModel: GraphViewModel
    @Binding var zoomScale: CGFloat
    @Binding var offset: CGSize
    @Binding var draggedNode: (any NodeProtocol)?
    @Binding var dragOffset: CGPoint
    @Binding var potentialEdgeTarget: (any NodeProtocol)?
    @Binding var selectedNodeID: NodeID?
    let viewSize: CGSize
    @Binding var panStartOffset: CGSize?
    @Binding var showMenu: Bool
    let maxZoom: CGFloat
    @Binding var crownPosition: Double
    let onUpdateZoomRanges: () -> Void
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var zoomTimer: Timer?
    @Binding var selectedEdgeID: UUID?
    @Binding var showOverlays: Bool
    @Binding var isAddingEdge: Bool
    
    init(
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<(any NodeProtocol)?>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<(any NodeProtocol)?>,
        selectedNodeID: Binding<NodeID?>,
        viewSize: CGSize,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        onUpdateZoomRanges: @escaping () -> Void,
        selectedEdgeID: Binding<UUID?>,
        showOverlays: Binding<Bool>,
        isAddingEdge: Binding<Bool>
    ) {
        self.viewModel = viewModel
        self._zoomScale = zoomScale
        self._offset = offset
        self._draggedNode = draggedNode
        self._dragOffset = dragOffset
        self._potentialEdgeTarget = potentialEdgeTarget
        self._selectedNodeID = selectedNodeID
        self.viewSize = viewSize
        self._panStartOffset = panStartOffset
        self._showMenu = showMenu
        self.maxZoom = maxZoom
        self._crownPosition = crownPosition
        self.onUpdateZoomRanges = onUpdateZoomRanges
        self._selectedEdgeID = selectedEdgeID
        self._showOverlays = showOverlays
        self._isAddingEdge = isAddingEdge
    }
    
    private var boundingBoxOverlay: some View {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let minScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.minX, y: graphBounds.minY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let maxScreen = CoordinateTransformer.modelToScreen(
            CGPoint(x: graphBounds.maxX, y: graphBounds.maxY),
            effectiveCentroid: viewModel.effectiveCentroid,
            zoomScale: zoomScale,
            offset: offset,
            viewSize: viewSize
        )
        let scaledBounds = CGRect(x: minScreen.x, y: minScreen.y, width: maxScreen.x - minScreen.x, height: maxScreen.y - minScreen.y)
        return Rectangle()
            .stroke(Color.blue, lineWidth: 2)
            .frame(width: scaledBounds.width, height: scaledBounds.height)
            .position(x: scaledBounds.midX, y: scaledBounds.midY)
            .opacity(0.5)
    }
    
    private var accessibleCanvas: some View {
        ZStack {
            Canvas { context, size in
                // Define visibleNodes and visibleEdges
                let visibleNodes = viewModel.model.visibleNodes()
                let visibleEdges = viewModel.model.visibleEdges()  // Fix: Use visibleEdges() instead of all edges
                let hiddenIDs = viewModel.model.hiddenNodeIDs.map { $0.uuidString.prefix(8) }
                print("Visible: \(visibleNodes.count), Hidden IDs: \(hiddenIDs)")
                
                if visibleNodes.isEmpty {
                    print("Warning: No visible nodes")  // Transient; remove if desired
                    return
                }
                
                // Compute effectiveCentroid: True model center (fixes panning/offset)
                let effectiveCentroid = centroid(of: visibleNodes)  // Non-optional CGPoint
                
                print("Drawing: \(visibleNodes.count) nodes, \(visibleEdges.count) edges | Centroid: \(effectiveCentroid) | Zoom: \(zoomScale) | Offset: \(offset)")  // Debug
                
                // Draw elements using helpers
                drawNodes(in: context, size: size, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawEdgeLines(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawEdgeArrows(in: context, size: size, visibleEdges: visibleEdges, visibleNodes: visibleNodes, effectiveCentroid: effectiveCentroid)
                drawDraggedNodeAndPotentialEdge(in: context, size: size, effectiveCentroid: effectiveCentroid)
            }
            .frame(width: viewSize.width, height: viewSize.height)
            .accessibilityLabel("GraphCanvas")
            .accessibilityIdentifier("GraphCanvas")  // Add this line
            
            if showOverlays {
                boundingBoxOverlay
            }
            
            if let selectedID = selectedNodeID {
                Text("Selected: \(selectedID.uuidString.prefix(8))")  // Debug label
                    .position(x: 20, y: 10)
                    .foregroundColor(.yellow)
            }
        }
    }
    
    private func centroid(of nodes: [any NodeProtocol]) -> CGPoint {
        guard !nodes.isEmpty else { return .zero }  // Safe default (no optional)
        let sumX = nodes.reduce(0.0) { $0 + $1.position.x }
        let sumY = nodes.reduce(0.0) { $0 + $1.position.y }
        return CGPoint(x: sumX / CGFloat(nodes.count), y: sumY / CGFloat(nodes.count))
    }
    
    var body: some View {
        Group {
            FocusableView {  // Reverted: No crown params
                accessibleCanvas
            }
            .modifier(GraphGesturesModifier(
                viewModel: viewModel,
                zoomScale: $zoomScale,
                offset: $offset,
                draggedNode: $draggedNode,
                dragOffset: $dragOffset,
                potentialEdgeTarget: $potentialEdgeTarget,
                selectedNodeID: $selectedNodeID,
                selectedEdgeID: $selectedEdgeID,
                viewSize: viewSize,
                panStartOffset: $panStartOffset,
                showMenu: $showMenu,
                maxZoom: maxZoom,
                crownPosition: $crownPosition,
                onUpdateZoomRanges: onUpdateZoomRanges,
                isAddingEdge: $isAddingEdge  // Pass to modifier
            ))
        }
        .onChange(of: selectedNodeID) {
            viewModel.saveViewState()  // Existing: Triggers view state save on selection change
        }
        .onChange(of: selectedEdgeID) {
            viewModel.saveViewState()  // Existing
        }
        .onChange(of: offset) {  // NEW: Save on offset/zoom changes for full view persistence
            viewModel.saveViewState()
        }
        .onChange(of: zoomScale) {
            viewModel.saveViewState()
        }
        .ignoresSafeArea()
    }
}

extension GraphCanvasView {
    func drawNodes(in context: GraphicsContext, size: CGSize, visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 0: Draw nodes FIRST (under edges/arrows)
        for node in visibleNodes {
            let screenPos = CoordinateTransformer.modelToScreen(
                node.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let isSelected = (node.id == selectedNodeID)
            print("Drawing node \(node.label) at screen \(screenPos), selected: \(isSelected)")  // Debug
            node.draw(in: context, at: screenPos, zoomScale: zoomScale, isSelected: isSelected)
        }
    }
    
    func drawEdgeLines(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 1: Draw edges (lines only)
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
            let length = hypot(direction.dx, direction.dy)
            if length <= 0 { continue }
            
            let unitDx = direction.dx / length
            let unitDy = direction.dy / length
            let fromRadiusScreen = fromNode.radius * zoomScale
            let toRadiusScreen = toNode.radius * zoomScale
            let margin: CGFloat = 3.0
            
            let isSelected = edge.id == selectedEdgeID
            let lineColor: Color = isSelected ? .red : .gray
            let lineWidth: CGFloat = 3.0
            
            let startPoint = CGPoint(x: fromScreen.x + unitDx * (fromRadiusScreen + margin),
                                     y: fromScreen.y + unitDy * (fromRadiusScreen + margin))
            let endPoint = CGPoint(x: toScreen.x - unitDx * (toRadiusScreen + margin),
                                   y: toScreen.y - unitDy * (toRadiusScreen + margin))
            
            let linePath = Path { path in
                path.move(to: startPoint)
                path.addLine(to: endPoint)
            }
            
            context.stroke(linePath, with: .color(lineColor), lineWidth: lineWidth)
            print("Drawing line for edge \(edge.id.uuidString.prefix(8)) from \(startPoint) to \(endPoint)")  // Debug
        }
    }
    
    func drawEdgeArrows(in context: GraphicsContext, size: CGSize, visibleEdges: [GraphEdge], visibleNodes: [any NodeProtocol], effectiveCentroid: CGPoint) {
        // Pass 2: Draw arrows (over lines)
        for edge in visibleEdges {
            guard let fromNode = visibleNodes.first(where: { $0.id == edge.from }),
                  let toNode = visibleNodes.first(where: { $0.id == edge.target }) else { continue }
            
            let fromScreen = CoordinateTransformer.modelToScreen(
                fromNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            let toScreen = CoordinateTransformer.modelToScreen(
                toNode.position,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            
            let direction = CGVector(dx: toScreen.x - fromScreen.x, dy: toScreen.y - fromScreen.y)
            let length = hypot(direction.dx, direction.dy)
            if length <= 0 { continue }
            
            let unitDx = direction.dx / length
            let unitDy = direction.dy / length
            let toRadiusScreen = toNode.radius * zoomScale
            let boundaryPoint = CGPoint(x: toScreen.x - unitDx * toRadiusScreen,
                                        y: toScreen.y - unitDy * toRadiusScreen)
            
            let lineAngle = atan2(unitDy, unitDx)
            let arrowLength: CGFloat = 10.0
            let arrowAngle: CGFloat = .pi / 6
            let arrowPoint1 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle - arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle - arrowAngle)
            )
            let arrowPoint2 = CGPoint(
                x: boundaryPoint.x - arrowLength * cos(lineAngle + arrowAngle),
                y: boundaryPoint.y - arrowLength * sin(lineAngle + arrowAngle)
            )
            
            let arrowPath = Path { path in
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint1)
                path.move(to: boundaryPoint)
                path.addLine(to: arrowPoint2)
            }
            
            let isSelected = edge.id == selectedEdgeID
            let arrowColor: Color = isSelected ? .red : .gray
            let arrowLineWidth: CGFloat = 3.0
            
            context.stroke(arrowPath, with: .color(arrowColor), lineWidth: arrowLineWidth)
            print("Drawing arrow for edge \(edge.id.uuidString.prefix(8)) to boundary \(boundaryPoint)")  // Debug
        }
    }
    
    func drawDraggedNodeAndPotentialEdge(in context: GraphicsContext, size: CGSize, effectiveCentroid: CGPoint) {
        // Draw dragged node and potential edge
        if let dragged = draggedNode {
            let draggedScreen = CoordinateTransformer.modelToScreen(
                dragged.position + dragOffset,
                effectiveCentroid: effectiveCentroid,
                zoomScale: zoomScale,
                offset: offset,
                viewSize: size
            )
            context.fill(Circle().path(in: CGRect(center: draggedScreen, size: CGSize(width: Constants.App.nodeModelRadius * 2 * zoomScale, height: Constants.App.nodeModelRadius * 2 * zoomScale))), with: .color(.green))
            
            if let target = potentialEdgeTarget {
                let targetScreen = CoordinateTransformer.modelToScreen(
                    target.position,
                    effectiveCentroid: effectiveCentroid,
                    zoomScale: zoomScale,
                    offset: offset,
                    viewSize: size
                )
                let tempLinePath = Path { path in
                    path.move(to: draggedScreen)
                    path.addLine(to: targetScreen)
                }
                context.stroke(tempLinePath, with: .color(.green), lineWidth: 2.0)
            }
        }
    }
}

struct Line: Shape, Animatable {
    var from: CGPoint
    var end: CGPoint
    
    var animatableData: AnimatablePair<CGPoint.AnimatableData, CGPoint.AnimatableData> {
        get { AnimatablePair(from.animatableData, end.animatableData) }
        set {
            from.animatableData = newValue.first
            end.animatableData = newValue.second
        }
    }
    
    func path(in rect: CGRect) -> Path {
        var path = Path()
        path.move(to: from)
        path.addLine(to: end)
        return path
    }
}

extension CGRect {
    init(center: CGPoint, size: CGSize) {
        self.init(x: center.x - size.width / 2, y: center.y - size.height / 2, width: size.width, height: size.height)
    }
}
--------------------------------------------------
