## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-09-16 11:40:21
Table of Contents:
1. GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
2. GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
3. GraphEditorWatch/GraphEditorWatch.swift
4. GraphEditorWatch/Models/AppConstants.swift
5. GraphEditorWatch/ViewModels/GraphViewModel.swift--------------------------------------------------
File: ToggleNode.swift
Path: GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
Last modified: 2025-09-12 11:54:22

Contents:
//
//  ToggleNode.swift
//  GraphEditorShared
//
//  Created by handcart on [date]; updated for completeness.
//

import SwiftUI
import Foundation

@available(iOS 13.0, *)
@available(watchOS 9.0, *)
public struct ToggleNode: NodeProtocol, Equatable {
    public let id: NodeID
    public let label: Int
    public var position: CGPoint
    public var velocity: CGPoint = .zero
    public var radius: CGFloat = Constants.App.nodeModelRadius  // Use constant for consistency
    public var isExpanded: Bool = true
    public var content: NodeContent? = nil
    public var fillColor: Color { isExpanded ? .green : .red }

    public init(id: NodeID = NodeID(), label: Int, position: CGPoint, velocity: CGPoint = .zero, radius: CGFloat = Constants.App.nodeModelRadius, isExpanded: Bool = true, content: NodeContent? = nil) {
        self.id = id
        self.label = label
        self.position = position
        self.velocity = velocity
        self.radius = radius
        self.isExpanded = isExpanded
        self.content = content
    }

    public func with(position: CGPoint, velocity: CGPoint) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, content: content)
    }

    public func with(position: CGPoint, velocity: CGPoint, content: NodeContent?) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded, content: content ?? self.content)
    }

    public func handlingTap() -> Self {
        var updated = self
        updated.isExpanded.toggle()
        updated.velocity = .zero  // Reset to prevent immediate jumps
        return updated
    }
    
    public func shouldHideChildren() -> Bool {
        !isExpanded
    }
    
    @available(iOS 15.0, *)
    @available(watchOS 9.0, *)
    public func renderView(zoomScale: CGFloat, isSelected: Bool) -> AnyView {
        AnyView(Circle().fill(fillColor).frame(width: radius * 2 * zoomScale, height: radius * 2 * zoomScale))  // Simple default
    }

    @available(iOS 15.0, *)
    @available(watchOS 9.0, *)
    public func draw(in context: GraphicsContext, at position: CGPoint, zoomScale: CGFloat, isSelected: Bool) {
        let scaledRadius = radius * zoomScale
        let borderWidth: CGFloat = isSelected ? max(3.0, 4 * zoomScale) : 0
        let borderRadius = scaledRadius + borderWidth / 2

        // Draw border if selected
        if borderWidth > 0 {
            let borderPath = Path(ellipseIn: CGRect(x: position.x - borderRadius, y: position.y - borderRadius, width: 2 * borderRadius, height: 2 * borderRadius))
            context.stroke(borderPath, with: .color(.yellow), lineWidth: borderWidth)
        }

        // Draw node circle
        let innerPath = Path(ellipseIn: CGRect(x: position.x - scaledRadius, y: position.y - scaledRadius, width: 2 * scaledRadius, height: 2 * scaledRadius))
        context.fill(innerPath, with: .color(fillColor))

        // Draw +/- icon centered in node
        let iconText = isExpanded ? "-" : "+"
        let iconFontSize = max(8.0, 12.0 * zoomScale)
        let iconResolved = context.resolve(Text(iconText).foregroundColor(.white).font(.system(size: iconFontSize, weight: .bold)))
        context.draw(iconResolved, at: position, anchor: .center)

        // Draw label above node
        let labelFontSize = max(8.0, 12.0 * zoomScale)
        let labelResolved = context.resolve(Text("\(label)").foregroundColor(.white).font(.system(size: labelFontSize)))
        let labelPosition = CGPoint(x: position.x, y: position.y - (scaledRadius + 10 * zoomScale))
        context.draw(labelResolved, at: labelPosition, anchor: .center)

        // Draw content below node if present and zoomed in
        if let content = content, zoomScale > 0.5 {
            let contentFontSize = max(6.0, 8.0 * zoomScale)
            let contentResolved = context.resolve(Text(content.displayText).foregroundColor(.gray).font(.system(size: contentFontSize)))
            let contentPosition = CGPoint(x: position.x, y: position.y + (scaledRadius + 10 * zoomScale))
            context.draw(contentResolved, at: contentPosition, anchor: .center)
        }
    }

    // Codable conformance (ensure completeness)
    enum CodingKeys: String, CodingKey {
        case id, label, positionX, positionY, velocityX, velocityY, radius, isExpanded, content
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(NodeID.self, forKey: .id)
        label = try container.decode(Int.self, forKey: .label)
        radius = try container.decode(CGFloat.self, forKey: .radius)
        isExpanded = try container.decode(Bool.self, forKey: .isExpanded)
        content = try container.decodeIfPresent(NodeContent.self, forKey: .content)
        let posX = try container.decode(CGFloat.self, forKey: .positionX)
        let posY = try container.decode(CGFloat.self, forKey: .positionY)
        position = CGPoint(x: posX, y: posY)
        let velX = try container.decode(CGFloat.self, forKey: .velocityX)
        let velY = try container.decode(CGFloat.self, forKey: .velocityY)
        velocity = CGPoint(x: velX, y: velY)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(label, forKey: .label)
        try container.encode(radius, forKey: .radius)
        try container.encode(isExpanded, forKey: .isExpanded)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encode(position.x, forKey: .positionX)
        try container.encode(position.y, forKey: .positionY)
        try container.encode(velocity.x, forKey: .velocityX)
        try container.encode(velocity.y, forKey: .velocityY)
    }

    public static func == (lhs: ToggleNode, rhs: ToggleNode) -> Bool {
        lhs.id == rhs.id &&
        lhs.label == rhs.label &&
        lhs.position == rhs.position &&
        lhs.velocity == rhs.velocity &&
        lhs.radius == rhs.radius &&
        lhs.isExpanded == rhs.isExpanded &&
        lhs.content == rhs.content
    }
}
----------------------------------------------------------------------------------------------------
File: Utilities.swift
Path: GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
Last modified: 2025-09-16 11:36:49

Contents:
// Utilities.swift (Updated with rounding in screenToModel)

import Foundation
import CoreGraphics

public extension Double {
    func clamped(to range: ClosedRange<Double>) -> Double {
        max(range.lowerBound, min(self, range.upperBound))
    }
}

public extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

public extension CGFloat {
    func rounded(to decimalPlaces: Int) -> CGFloat {
        let divisor = pow(10.0, CGFloat(decimalPlaces))
        return (self * divisor).rounded() / divisor
    }
}

public extension CGPoint {
    func normalized() -> CGPoint {
            let len = hypot(x, y)
            return len > 0 ? self / len : .zero
        }
    
    static func + (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
    }
    
    static func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)
    }
    
    static func * (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x * rhs, y: lhs.y * rhs)
    }
    
    static func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs + rhs
    }
    
    static func -= (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs - rhs
    }
    
    static func *= (lhs: inout CGPoint, rhs: CGFloat) {
        lhs = lhs * rhs
    }
    
    static func + (lhs: CGPoint, rhs: CGSize) -> CGPoint {
        CGPoint(x: lhs.x + rhs.width, y: lhs.y + rhs.height)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGSize) {
        lhs = lhs + rhs
    }
    
    static func /= (lhs: inout CGPoint, rhs: CGFloat) {
            lhs.x /= rhs
            lhs.y /= rhs
        }
    
    var magnitude: CGFloat {
        hypot(x, y)
    }
}

public extension CGSize {
    static func / (lhs: CGSize, rhs: CGFloat) -> CGSize {
        CGSize(width: lhs.width / rhs, height: lhs.height / rhs)
    }
    
    static func + (lhs: CGSize, rhs: CGSize) -> CGSize {
        CGSize(width: lhs.width + rhs.width, height: lhs.height + rhs.height)
    }
    
    static func += (lhs: inout CGSize, rhs: CGSize) {
        lhs = lhs + rhs
    }
}

// Shared utility functions
public func distance(_ fromPoint: CGPoint, _ targetPoint: CGPoint) -> CGFloat {
    hypot(fromPoint.x - targetPoint.x, fromPoint.y - targetPoint.y)
}

public extension Array where Element: NodeProtocol {
    func centroid() -> CGPoint? {
        guard !isEmpty else { return nil }
        let totals = reduce((x: 0.0, y: 0.0)) { acc, node in
            (x: acc.x + node.position.x, y: acc.y + node.position.y)
        }
        return CGPoint(x: totals.x / CGFloat(count), y: totals.y / CGFloat(count))
    }
}

public func centroid(of nodes: [any NodeProtocol]) -> CGPoint? {
    guard !nodes.isEmpty else { return nil }
    let totals = nodes.reduce((x: 0.0, y: 0.0)) { acc, node in
        (x: acc.x + node.position.x, y: acc.y + node.position.y)
    }
    return CGPoint(x: totals.x / CGFloat(nodes.count), y: totals.y / CGFloat(nodes.count))
}

import SwiftUI  // For GeometryProxy if needed

public struct CoordinateTransformer {
    
    public static func screenToModel(
        _ screenPos: CGPoint,
        effectiveCentroid: CGPoint,
        zoomScale: CGFloat,
        offset: CGSize,
        viewSize: CGSize
        // geometry: GeometryProxy? = nil  // Optional: Pass if you need safe area adjustments
    ) -> CGPoint {
        let safeZoom = max(zoomScale, 0.001)  // Tighter min to avoid div-by-zero; adjust based on your minZoom
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let panOffset = CGPoint(x: offset.width, y: offset.height)
        
        let translated = screenPos - viewCenter - panOffset
        
        // Optional: Adjust for safe areas (e.g., rounded corners on watchOS). Uncomment if touches miss near edges.
        // if let geo = geometry {
        //     translated.x -= geo.safeAreaInsets.leading
        //     translated.y -= geo.safeAreaInsets.top
        // }
        
        let unscaled = translated / safeZoom
        let modelPos = effectiveCentroid + unscaled
        
        #if DEBUG
        print("screenToModel: Screen \(screenPos) -> Model \(modelPos), Zoom \(safeZoom), Offset \(panOffset), Centroid \(effectiveCentroid), ViewSize \(viewSize)")
        #endif
        
        // New: Round to 3 decimals to eliminate floating-point drift
        return CGPoint(x: modelPos.x.rounded(to: 3), y: modelPos.y.rounded(to: 3))
    }
    
    public static func modelToScreen(
        _ modelPos: CGPoint,
        effectiveCentroid: CGPoint,
        zoomScale: CGFloat,
        offset: CGSize,
        viewSize: CGSize
        // geometry: GeometryProxy? = nil  // Optional for consistency
    ) -> CGPoint {
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let relativePos = modelPos - effectiveCentroid
        let scaledPos = relativePos * zoomScale
        let screenPos = viewCenter + scaledPos + CGPoint(x: offset.width, y: offset.height)
        
        // Optional: Adjust for safe areas (symmetric to screenToModel)
        // if let geo = geometry {
        //     screenPos.x += geo.safeAreaInsets.leading
        //     screenPos.y += geo.safeAreaInsets.top
        // }
        
        return screenPos
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatch.swift
Path: GraphEditorWatch/GraphEditorWatch.swift
Last modified: 2025-09-08 10:58:41

Contents:
//
//  GraphEditorWatch.swift
//  GraphEditorWatch Watch App
//
//  Created by handcart on 8/1/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

// In GraphEditorWatch.swift
@main
struct GraphEditorWatch: App {
    var body: some Scene {
        WindowGroup {
            let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
            let model = GraphModel(storage: PersistenceManager(), physicsEngine: physicsEngine)
            let viewModel = GraphViewModel(model: model)  // Sync init
            ContentView(
                viewModel: viewModel
            )
            .task {
                await viewModel.loadGraph()  // Async load inside
            }
        }
    }
}
----------------------------------------------------------------------------------------------------
File: AppConstants.swift
Path: GraphEditorWatch/Models/AppConstants.swift
Last modified: 2025-08-23 11:07:41

Contents:
//
//  AppConstants.swift
//  GraphEditor
//
//  Created by handcart on 8/3/25.
//


import CoreGraphics

struct AppConstants {
    // Graph visuals
    static let nodeModelRadius: CGFloat = 10.0
    static let hitScreenRadius: CGFloat = 30.0
    static let tapThreshold: CGFloat = 10.0
    
    // Zooming
    static let numZoomLevels = 10
    static let defaultMinZoom: CGFloat = 0.2
    static let defaultMaxZoom: CGFloat = 5.0
    public static let zoomPaddingFactor: CGFloat = 0.8  // Fit with some margin
    public static let crownZoomSteps: Int = 20  // Smooth steps for crown
}
----------------------------------------------------------------------------------------------------
File: GraphViewModel.swift
Path: GraphEditorWatch/ViewModels/GraphViewModel.swift
Last modified: 2025-09-16 11:25:41

Contents:
// GraphViewModel.swift (Fixed: Corrected handleTap function, removed invalid SwiftUI code, fixed scoping/syntax errors, added proper ToggleNode handling)

import Combine
import GraphEditorShared
import WatchKit  // For WKApplication

@MainActor public class GraphViewModel: ObservableObject {
    @Published public var model: GraphModel
    @Published public var selectedEdgeID: UUID? = nil
    @Published public var pendingEdgeType: EdgeType = .association
    @Published public var selectedNodeID: UUID? = nil
    @Published public var offset: CGPoint = .zero
    @Published public var zoomScale: CGFloat = 1.0
    
    private var saveTimer: Timer? = nil
    private var cancellable: AnyCancellable?
    
    public var canUndo: Bool {
        model.canUndo
    }
    
    public var canRedo: Bool {
        model.canRedo
    }
    
    private var pauseObserver: NSObjectProtocol?
    private var resumeObserver: NSObjectProtocol?
    
    private var resumeTimer: Timer?
    
    public var effectiveCentroid: CGPoint {
        let visibleNodes = model.visibleNodes()
        if let id = selectedNodeID, let node = visibleNodes.first(where: { $0.id == id }) {
            return node.position
        } else if let id = selectedEdgeID, let edge = model.edges.first(where: { $0.id == id }),
                  let from = visibleNodes.first(where: { $0.id == edge.from }),
                  let to = visibleNodes.first(where: { $0.id == edge.target }) {
            return CGPoint(x: (from.position.x + to.position.x) / 2, y: (from.position.y + to.position.y) / 2)
        }
        return centroid(of: visibleNodes) ?? .zero
    }
    
    public enum AppFocusState: Equatable {
        case graph
        case node(UUID)
        case edge(UUID)
        case menu
    }

    @Published public var focusState: AppFocusState = .graph
    
    public init(model: GraphModel) {
        self.model = model
        cancellable = model.objectWillChange.sink { [weak self] _ in
            self?.objectWillChange.send()
        }
        
        pauseObserver = NotificationCenter.default.addObserver(forName: .graphSimulationPause, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.model.pauseSimulation()
            }
        }
        
        resumeObserver = NotificationCenter.default.addObserver(forName: .graphSimulationResume, object: nil, queue: .main) { [weak self] _ in
            Task { @MainActor in  // Ensure main for publishes
                await self?.resumeSimulationAfterDelay()
            }
        }

        model.nodes = model.nodes.map { AnyNode($0.with(position: $0.position, velocity: .zero)) }
    }
    
    public func calculateZoomRanges(for viewSize: CGSize) -> (min: CGFloat, max: CGFloat) {
        var graphBounds = model.physicsEngine.boundingBox(nodes: model.nodes)
        if graphBounds.width < 100 || graphBounds.height < 100 {
            graphBounds = graphBounds.insetBy(dx: -50, dy: -50)
        }
        let contentPadding: CGFloat = Constants.App.contentPadding
        let paddedWidth = graphBounds.width + 2 * contentPadding
        let paddedHeight = graphBounds.height + 2 * contentPadding
        let fitWidth = viewSize.width / paddedWidth
        let fitHeight = viewSize.height / paddedHeight
        let calculatedMin = min(fitWidth, fitHeight)
        let minZoom = max(calculatedMin, 0.5)
        let maxZoom = minZoom * Constants.App.maxZoom  // Now higher (e.g., *5)
        print("Calculated zoom ranges: min=\(minZoom), max=\(maxZoom), based on bounds \(graphBounds)")  // Enhanced debug
        return (min: minZoom, max: maxZoom)
    }
    
    // Updated saveViewState in GraphViewModel.swift to handle throwing call with do-try-catch
    public func saveViewState() {
        saveTimer?.invalidate()
        saveTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: false) { [weak self] _ in
            Task { @MainActor in
                guard let self = self else { return }
                do {
                    try await self.model.saveViewState(
                        offset: self.offset,
                        zoomScale: self.zoomScale,
                        selectedNodeID: self.selectedNodeID,
                        selectedEdgeID: self.selectedEdgeID
                    )
                } catch {
                    print("Error saving view state: \(error)")
                    // Optionally, add user-facing error handling, e.g., set a @Published error property
                }
            }
        }
    }
    
    public func loadGraph() async {
            await model.load()  // Now compiles
            await model.startSimulation()
    }
    
    private func loadViewState() async {
        do {
            if let state = try await model.loadViewState() {
                self.offset = state.offset
                self.zoomScale = state.zoomScale.clamped(to: 0.01...Constants.App.maxZoom)
                self.selectedNodeID = state.selectedNodeID
                self.selectedEdgeID = state.selectedEdgeID
            } else {
                self.zoomScale = 1.0.clamped(to: 0.01...Constants.App.maxZoom)
                self.offset = .zero
            }
            model.centerGraph()  // Assuming sync; no 'await'
            self.offset = .zero
            await model.expandAllRoots()  // Keep if async
            self.objectWillChange.send()
        } catch {
            print("Failed to load view state: \(error)")
        }
        
        if let id = selectedNodeID {
            focusState = .node(id)
        } else if let id = selectedEdgeID {
            focusState = .edge(id)
        } else {
            focusState = .graph
        }
        model.centerGraph()  // Assuming sync; no 'await'
        self.objectWillChange.send()
    }
    
    deinit {
        if let pauseObserver = pauseObserver {
            NotificationCenter.default.removeObserver(pauseObserver)
        }
        if let resumeObserver = resumeObserver {
            NotificationCenter.default.removeObserver(resumeObserver)
        }
        resumeTimer?.invalidate()
    }
    
    public func snapshot() async {
        await model.snapshot()
    }
    
    public func undo() async {
        await model.undo()
    }
    
    public func redo() async {
        await model.redo()
    }
    
    public func addNode(at position: CGPoint) async {
        await model.addNode(at: position)
        await model.resizeSimulationBounds(for: model.nodes.count)  // New: Resize after adding
        model.objectWillChange.send()
    }

    public func resetGraph() async {  // Or rename clearGraph to resetGraph if preferred
        await model.clearGraph()
    }
    
    public func deleteNode(withID id: NodeID) async {
        await model.deleteNode(withID: id)
        selectedNodeID = nil
    }

    public func deleteEdge(withID id: UUID) async {
        await model.deleteEdge(withID: id)
        selectedEdgeID = nil
    }

    public func updateNodeContent(withID id: NodeID, newContent: NodeContent?) async {
        await model.updateNodeContent(withID: id, newContent: newContent)
    }
    
    public func updateNodePosition(id: NodeID, newPosition: CGPoint) async {
        if let index = model.nodes.firstIndex(where: { $0.id == id }) {
            model.nodes[index].position = newPosition
            model.nodes[index].velocity = .zero  // Stop movement
            await model.startSimulation()
        }
    }
    
    public func addToggleNode(at position: CGPoint) async {
        await model.addToggleNode(at: position)
    }
    
    public func addChild(to parentID: NodeID) async {
        await model.addChild(to: parentID)
    }
    
    // NEW: Add this method for edge creation (used in gestures/menu)
    public func addEdge(from: NodeID, target: NodeID, type: EdgeType) async {
        model.edges.append(GraphEdge(from: from, target: target, type: type))
        await model.startSimulation()
        await model.save()  // Persist if needed
            objectWillChange.send()
    }
    
    public func clearGraph() async {
        await model.clearGraph()
    }
    
    public func pauseSimulation() async {
        await model.pauseSimulation()
    }
    
    public func resumeSimulation() async {
        await model.resumeSimulation()
    }
    
    public func resumeSimulationAfterDelay() async {
        resumeTimer?.invalidate()
        resumeTimer = Timer.scheduledTimer(withTimeInterval: 0.3, repeats: false) { [weak self] _ in
            Task { @MainActor in  // Hop to main for safe access
                guard let self = self else { return }
                if WKApplication.shared().applicationState == .active {
                    await self.model.resumeSimulation()  // Consistent async call
                }
            }
        }
    }
    
    // Fixed: handleTap with proper scoping, removed invalid SwiftUI Text, added ToggleNode update logic (assumes model.updateNode method; adjust if needed)
    public func handleTap(at modelPos: CGPoint) async {
        await model.pauseSimulation()
        
        print("Handling tap at model pos: \(modelPos)")  // For testing
        
        // Efficient hit test with queryNearby
        let hitRadius: CGFloat = 25.0 / max(1.0, zoomScale)  // Dynamic: Smaller radius at higher zoom for precision; test and adjust
        let nearbyNodes = model.physicsEngine.queryNearby(position: modelPos, radius: hitRadius, nodes: model.visibleNodes())
        print("Nearby nodes found: \(nearbyNodes.count)")  // For testing
        
        // Sort by distance to get closest (if multiple)
        let sortedNearby = nearbyNodes.sorted {
            hypot($0.position.x - modelPos.x, $0.position.y - modelPos.y) < hypot($1.position.x - modelPos.x, $1.position.y - modelPos.y)
        }
        
        if let tappedNode = sortedNearby.first {
                selectedNodeID = (tappedNode.id == selectedNodeID) ? nil : tappedNode.id
                selectedEdgeID = nil
                print("Selected node \(tappedNode.label) (type: \(type(of: tappedNode))")
                
                // Add toggle if ToggleNode
            if let toggleNode = tappedNode as? ToggleNode {
                        let toggled = toggleNode.handlingTap()
                        if let index = model.nodes.firstIndex(where: { $0.id == toggled.id }) {
                            model.nodes[index] = AnyNode(toggled)
                            await model.handleTap(on: toggled.id)  // Reposition
                            // Immediate offset if expanded
                            if toggled.isExpanded {
                                let children = model.edges.filter { $0.from == toggled.id && $0.type == .hierarchy }.map { $0.target }
                                for (idx, childID) in children.enumerated() {
                                    if let childIdx = model.nodes.firstIndex(where: { $0.id == childID }) {
                                        var child = model.nodes[childIdx]
                                        let offX = CGFloat(idx * 20) - CGFloat(children.count * 10)
                                        child.position += CGPoint(x: offX, y: 20)
                                        model.nodes[childIdx] = child
                                    }
                                }
                            }
                        }
                    }
            model.objectWillChange.send()  // Trigger UI refresh
            
            // Delay simulation restart slightly to let changes settle
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                Task {
                    await self.model.startSimulation()
                }
            }
        } else {
            // Miss: Clear selections
            selectedNodeID = nil
            selectedEdgeID = nil
            print("Tap missed; cleared selections")
        }
        
        focusState = selectedNodeID.map { .node($0) } ?? .graph
        objectWillChange.send()
        await resumeSimulationAfterDelay()
    }
    
    public func setSelectedNode(_ id: UUID?) {
        selectedNodeID = id
        focusState = id.map { .node($0) } ?? .graph
        objectWillChange.send()
    }

    public func setSelectedEdge(_ id: UUID?) {
        selectedEdgeID = id
        focusState = id.map { .edge($0) } ?? .graph
        objectWillChange.send()
    }
    
    public func centerGraph() {
        // UPDATED: Enhanced to recalculate based on bounds
        let viewSize = CGSize(width: 300, height: 300)  // Replace with actual view size if passed
        let (minZoom, _) = calculateZoomRanges(for: viewSize)
        zoomScale = minZoom
        offset = .zero
        objectWillChange.send()
    }
    
}
--------------------------------------------------
