## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-08-25 11:05:04
Table of Contents:
1. GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
2. GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
3. GraphEditorWatch/GraphEditorWatch.swift
4. GraphEditorWatch/Models/AppConstants.swift
5. GraphEditorWatch/ViewModels/GraphViewModel.swift
6. GraphEditorWatch/Views/ContentView.swift--------------------------------------------------
File: ToggleNode.swift
Path: GraphEditorShared/Sources/GraphEditorShared/ToggleNode.swift
Last modified: 2025-08-13 13:47:33

Contents:
// Sources/GraphEditorShared/ToggleNode.swift

import SwiftUI
import Foundation

@available(iOS 13.0, *)
@available(watchOS 9.0, *)
public struct ToggleNode: NodeProtocol {
    public let id: NodeID
    public let label: Int
    public var position: CGPoint
    public var velocity: CGPoint = .zero
    public var radius: CGFloat = 10.0
    public var isExpanded: Bool = true  // Default to expanded
    public var fillColor: Color { isExpanded ? .green : .red }

    public init(id: NodeID = NodeID(), label: Int, position: CGPoint, velocity: CGPoint = .zero, radius: CGFloat = 10.0, isExpanded: Bool = true) {
        self.id = id
        self.label = label
        self.position = position
        self.velocity = velocity
        self.radius = radius
        self.isExpanded = isExpanded
    }

    public func with(position: CGPoint, velocity: CGPoint) -> Self {
        ToggleNode(id: id, label: label, position: position, velocity: velocity, radius: radius, isExpanded: isExpanded)
    }

    // In ToggleNode.swift, replace handlingTap with:
    public func handlingTap() -> Self {
        print("ToggleNode \(label) tapped. Expansion state before: \(isExpanded), after: \(!isExpanded)")
        var updated = self
        updated.isExpanded.toggle()
        return updated
    }

    // Override: Custom draw with +/- icon
    @available(iOS 15.0, *)
    @available(watchOS 9.0, *)
    public func draw(in context: GraphicsContext, at position: CGPoint, zoomScale: CGFloat, isSelected: Bool) {
        let scaledRadius = radius * zoomScale
        let borderWidth: CGFloat = isSelected ? 4 * zoomScale : 0
        let borderRadius = scaledRadius + borderWidth / 2

        if borderWidth > 0 {
            let borderPath = Path(ellipseIn: CGRect(x: position.x - borderRadius, y: position.y - borderRadius, width: 2 * borderRadius, height: 2 * borderRadius))
            context.stroke(borderPath, with: .color(.yellow), lineWidth: borderWidth)
        }

        let innerPath = Path(ellipseIn: CGRect(x: position.x - scaledRadius, y: position.y - scaledRadius, width: 2 * scaledRadius, height: 2 * scaledRadius))
        context.fill(innerPath, with: .color(fillColor))  // Use self.fillColor (e.g., .green if expanded, .red if collapsed)
        
        // Draw +/- icon
        let iconText = isExpanded ? "-" : "+"
        let fontSize = max(8.0, 12.0 * zoomScale)  // Readable min size
        let text = Text(iconText).foregroundColor(.white).font(.system(size: fontSize, weight: .bold))
        let resolved = context.resolve(text)
        context.draw(resolved, at: position, anchor: .center)  // Center in node

        // Draw label above (as in protocol default)
        let labelFontSize = max(8.0, 12.0 * zoomScale)
        let labelText = Text("\(label)").foregroundColor(.white).font(.system(size: labelFontSize))
        let labelResolved = context.resolve(labelText)
        let labelPosition = CGPoint(x: position.x, y: position.y - (scaledRadius + 10 * zoomScale))
        context.draw(labelResolved, at: labelPosition, anchor: .center)
    }

    // Codable conformance (for persistence)
    enum CodingKeys: String, CodingKey {
        case id, label, radius, isExpanded
        case positionX, positionY
        case velocityX, velocityY
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        id = try container.decode(NodeID.self, forKey: .id)
        label = try container.decode(Int.self, forKey: .label)
        radius = try container.decodeIfPresent(CGFloat.self, forKey: .radius) ?? 10.0
        isExpanded = try container.decodeIfPresent(Bool.self, forKey: .isExpanded) ?? true
        let posX = try container.decode(CGFloat.self, forKey: .positionX)
        let posY = try container.decode(CGFloat.self, forKey: .positionY)
        position = CGPoint(x: posX, y: posY)
        let velX = try container.decode(CGFloat.self, forKey: .velocityX)
        let velY = try container.decode(CGFloat.self, forKey: .velocityY)
        velocity = CGPoint(x: velX, y: velY)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(label, forKey: .label)
        try container.encode(radius, forKey: .radius)
        try container.encode(isExpanded, forKey: .isExpanded)
        try container.encode(position.x, forKey: .positionX)
        try container.encode(position.y, forKey: .positionY)
        try container.encode(velocity.x, forKey: .velocityX)
        try container.encode(velocity.y, forKey: .velocityY)
    }
}
----------------------------------------------------------------------------------------------------
File: Utilities.swift
Path: GraphEditorShared/Sources/GraphEditorShared/Utilities.swift
Last modified: 2025-08-23 10:04:45

Contents:
import Foundation
import CoreGraphics

public extension Double {
    func clamped(to range: ClosedRange<Double>) -> Double {
        max(range.lowerBound, min(self, range.upperBound))
    }
}

public extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}

public extension CGFloat {
    func rounded(to decimalPlaces: Int) -> CGFloat {
        let divisor = pow(10.0, CGFloat(decimalPlaces))
        return (self * divisor).rounded() / divisor
    }
}

public extension CGPoint {
    func normalized() -> CGPoint {
            let len = hypot(x, y)
            return len > 0 ? self / len : .zero
        }
    
    static func + (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x + rhs.x, y: lhs.y + rhs.y)
    }
    
    static func - (lhs: CGPoint, rhs: CGPoint) -> CGPoint {
        CGPoint(x: lhs.x - rhs.x, y: lhs.y - rhs.y)
    }
    
    static func * (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x * rhs, y: lhs.y * rhs)
    }
    
    static func / (lhs: CGPoint, rhs: CGFloat) -> CGPoint {
        CGPoint(x: lhs.x / rhs, y: lhs.y / rhs)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs + rhs
    }
    
    static func -= (lhs: inout CGPoint, rhs: CGPoint) {
        lhs = lhs - rhs
    }
    
    static func *= (lhs: inout CGPoint, rhs: CGFloat) {
        lhs = lhs * rhs
    }
    
    static func + (lhs: CGPoint, rhs: CGSize) -> CGPoint {
        CGPoint(x: lhs.x + rhs.width, y: lhs.y + rhs.height)
    }
    
    static func += (lhs: inout CGPoint, rhs: CGSize) {
        lhs = lhs + rhs
    }
    
    var magnitude: CGFloat {
        hypot(x, y)
    }
}

public extension CGSize {
    static func / (lhs: CGSize, rhs: CGFloat) -> CGSize {
        CGSize(width: lhs.width / rhs, height: lhs.height / rhs)
    }
    
    static func + (lhs: CGSize, rhs: CGSize) -> CGSize {
        CGSize(width: lhs.width + rhs.width, height: lhs.height + rhs.height)
    }
    
    static func += (lhs: inout CGSize, rhs: CGSize) {
        lhs = lhs + rhs
    }
}

// Shared utility functions
public func distance(_ a: CGPoint, _ b: CGPoint) -> CGFloat {
    hypot(a.x - b.x, a.y - b.y)
}

public extension Array where Element: NodeProtocol {
    func centroid() -> CGPoint? {
        guard !isEmpty else { return nil }
        let totals = reduce((x: 0.0, y: 0.0)) { acc, node in
            (x: acc.x + node.position.x, y: acc.y + node.position.y)
        }
        return CGPoint(x: totals.x / CGFloat(count), y: totals.y / CGFloat(count))
    }
}

public func centroid(of nodes: [any NodeProtocol]) -> CGPoint? {
    guard !nodes.isEmpty else { return nil }
    let totals = nodes.reduce((x: 0.0, y: 0.0)) { acc, node in
        (x: acc.x + node.position.x, y: acc.y + node.position.y)
    }
    return CGPoint(x: totals.x / CGFloat(nodes.count), y: totals.y / CGFloat(nodes.count))
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatch.swift
Path: GraphEditorWatch/GraphEditorWatch.swift
Last modified: 2025-08-22 12:19:13

Contents:
//
//  GraphEditorWatch.swift
//  GraphEditorWatch Watch App
//
//  Created by handcart on 8/1/25.
//

import SwiftUI
import WatchKit
import GraphEditorShared

// In GraphEditorWatch.swift
@main
struct GraphEditorWatch: App {
    var body: some Scene {
        WindowGroup {
            let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))  // Mock bounds; adjust as needed
            let model = GraphModel(storage: PersistenceManager(), physicsEngine: physicsEngine)
            let viewModel = GraphViewModel(model: model)  // Create viewModel here
            ContentView(viewModel: viewModel)  // <-- Pass viewModel to ContentView init
        }
    }
}
----------------------------------------------------------------------------------------------------
File: AppConstants.swift
Path: GraphEditorWatch/Models/AppConstants.swift
Last modified: 2025-08-23 11:07:41

Contents:
//
//  AppConstants.swift
//  GraphEditor
//
//  Created by handcart on 8/3/25.
//


import CoreGraphics

struct AppConstants {
    // Graph visuals
    static let nodeModelRadius: CGFloat = 10.0
    static let hitScreenRadius: CGFloat = 30.0
    static let tapThreshold: CGFloat = 10.0
    
    // Zooming
    static let numZoomLevels = 10
    static let defaultMinZoom: CGFloat = 0.2
    static let defaultMaxZoom: CGFloat = 5.0
    public static let zoomPaddingFactor: CGFloat = 0.8  // Fit with some margin
    public static let crownZoomSteps: Int = 20  // Smooth steps for crown
}
----------------------------------------------------------------------------------------------------
File: GraphViewModel.swift
Path: GraphEditorWatch/ViewModels/GraphViewModel.swift
Last modified: 2025-08-23 11:44:46

Contents:
// GraphViewModel.swift (Add access to model's physicsEngine and confirm centerGraph)

import SwiftUI
import Combine
import GraphEditorShared
import WatchKit  // For WKApplication

class GraphViewModel: ObservableObject {
    @Published var model: GraphModel
    @Published var selectedEdgeID: UUID? = nil
    @Published var selectedNodeID: UUID? = nil
    @Published var offset: CGPoint = .zero
    @Published var zoomScale: CGFloat = 1.0
    
    private var saveTimer: Timer? = nil
    private var cancellable: AnyCancellable?
    
    var canUndo: Bool {
        model.canUndo
    }
    
    var canRedo: Bool {
        model.canRedo
    }
    
    private var pauseObserver: NSObjectProtocol?
    private var resumeObserver: NSObjectProtocol?
    
    private var resumeTimer: Timer?
    
    var effectiveCentroid: CGPoint {
        let visibleNodes = model.visibleNodes()
        if let id = selectedNodeID, let node = visibleNodes.first(where: { $0.id == id }) {
            return node.position
        } else if let id = selectedEdgeID, let edge = model.edges.first(where: { $0.id == id }),
                  let from = visibleNodes.first(where: { $0.id == edge.from }),
                  let to = visibleNodes.first(where: { $0.id == edge.to }) {
            return CGPoint(x: (from.position.x + to.position.x) / 2, y: (from.position.y + to.position.y) / 2)
        }
        return centroid(of: visibleNodes) ?? .zero
    }
    
    enum AppFocusState: Equatable {
        case graph
        case node(UUID)
        case edge(UUID)
        case menu
    }

    @Published var focusState: AppFocusState = .graph
    
    init(model: GraphModel) {
        self.model = model
        cancellable = model.objectWillChange.sink { [weak self] _ in
            self?.objectWillChange.send()
        }
        pauseObserver = NotificationCenter.default.addObserver(forName: .graphSimulationPause, object: nil, queue: .main) { [weak self] _ in
            self?.model.pauseSimulation()
        }
        resumeObserver = NotificationCenter.default.addObserver(forName: .graphSimulationResume, object: nil, queue: .main) { [weak self] _ in
            self?.resumeSimulationAfterDelay()
        }
        
        loadGraph()
        loadViewState()
    }
    
    func calculateZoomRanges(for viewSize: CGSize) -> (min: CGFloat, max: CGFloat) {
        let graphBounds = model.physicsEngine.boundingBox(nodes: model.nodes)  // Fixed: Access via model.physicsEngine
        guard graphBounds.width > 0 && graphBounds.height > 0 else {
            return (AppConstants.defaultMinZoom, AppConstants.defaultMaxZoom)
        }
        
        let fitScaleWidth = viewSize.width / graphBounds.width * AppConstants.zoomPaddingFactor
        let fitScaleHeight = viewSize.height / graphBounds.height * AppConstants.zoomPaddingFactor
        let minZoom = min(fitScaleWidth, fitScaleHeight)
        let maxZoom = max(minZoom * 5, AppConstants.defaultMaxZoom)
        
        print("Updated zoom ranges: min=\(minZoom), max=\(maxZoom)")
        return (minZoom, maxZoom)
    }
    
    func saveViewState() {
        saveTimer?.invalidate()
        saveTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: false) { [weak self] _ in
            guard let self = self else { return }
            self.centerGraph()  // Center before save
            do {
                try self.model.saveViewState(offset: self.offset,
                                             zoomScale: self.zoomScale,
                                             selectedNodeID: self.selectedNodeID,
                                             selectedEdgeID: self.selectedEdgeID)
                print("Saved view state")
            } catch {
                print("Failed to save view state: \(error)")
            }
        }
    }
    
    private func loadGraph() {
        do {
            try model.loadFromStorage()
            model.centerGraph()
            model.startSimulation()
        } catch {
            print("Failed to load graph: \(error)")
        }
    }
    
    private func loadViewState() {
        do {
            if let state = try model.loadViewState() {
                self.offset = state.offset
                self.zoomScale = state.zoomScale.clamped(to: 0.01...Constants.App.maxZoom)
                self.selectedNodeID = state.selectedNodeID
                self.selectedEdgeID = state.selectedEdgeID
            } else {
                self.zoomScale = 1.0.clamped(to: 0.01...Constants.App.maxZoom)
                self.offset = .zero
            }
            model.centerGraph()
            self.offset = .zero
            model.expandAllRoots()
            self.objectWillChange.send()
        } catch {
            print("Failed to load view state: \(error)")
        }
        
        if let id = selectedNodeID {
            focusState = .node(id)
        } else if let id = selectedEdgeID {
            focusState = .edge(id)
        } else {
            focusState = .graph
        }
        model.centerGraph()
        self.objectWillChange.send()
    }
    
    deinit {
        if let pauseObserver = pauseObserver {
            NotificationCenter.default.removeObserver(pauseObserver)
        }
        if let resumeObserver = resumeObserver {
            NotificationCenter.default.removeObserver(resumeObserver)
        }
        resumeTimer?.invalidate()
    }
    
    func snapshot() {
        model.snapshot()
    }
    
    func undo() {
        model.undo()
    }
    
    func redo() {
        model.redo()
    }
    
    func deleteNode(withID id: NodeID) {
        model.deleteNode(withID: id)
    }
    
    func deleteSelectedEdge(id: UUID?) {
        model.deleteSelectedEdge(id: id)
    }
    
    func addNode(at position: CGPoint) {
        model.addNode(at: position)
    }
    
    func updateNode(_ updatedNode: any NodeProtocol) {
        model.updateNode(AnyNode(updatedNode))
    }
    
    func addToggleNode(at position: CGPoint) {
        model.addToggleNode(at: position)
    }
    
    func addChild(to parentID: NodeID) {
        model.addChild(to: parentID)
    }
    
    func clearGraph() {
        model.clearGraph()
    }
    
    func pauseSimulation() {
        model.pauseSimulation()
    }
    
    func resumeSimulation() {
        model.resumeSimulation()
    }
    
    func resumeSimulationAfterDelay() {
        resumeTimer?.invalidate()
        resumeTimer = Timer.scheduledTimer(withTimeInterval: 0.3, repeats: false) { [weak self] _ in
            guard let self = self else { return }
            if WKApplication.shared().applicationState == .active {
                self.model.resumeSimulation()
            }
        }
    }
    
    func handleTap() {
        model.pauseSimulation()
        resumeSimulationAfterDelay()
    }
    
    func setSelectedNode(_ id: UUID?) {
        selectedNodeID = id
        focusState = id.map { .node($0) } ?? .graph
        objectWillChange.send()
    }

    func setSelectedEdge(_ id: UUID?) {
        selectedEdgeID = id
        focusState = id.map { .edge($0) } ?? .graph
        objectWillChange.send()
    }
    
    func centerGraph() {
        offset = .zero  // Basic reset; enhance as needed
        objectWillChange.send()
    }
}
----------------------------------------------------------------------------------------------------
File: ContentView.swift
Path: GraphEditorWatch/Views/ContentView.swift
Last modified: 2025-08-23 11:44:46

Contents:
// ContentView.swift (Updated with Equatable fix via enhanced NodeWrapper and closure for onCenterGraph)

import SwiftUI
import WatchKit
import GraphEditorShared
import Foundation
import CoreGraphics

struct ViewSizeKey: PreferenceKey {
    static var defaultValue: CGSize = .zero
    static func reduce(value: inout CGSize, nextValue: () -> CGSize) {
        value = nextValue()
    }
}

struct NodeWrapper: Equatable, Identifiable {
    let id: UUID?
    let node: (any NodeProtocol)?
    
    init(node: (any NodeProtocol)?) {
        self.node = node
        self.id = node?.id
    }
    
    static func == (lhs: NodeWrapper, rhs: NodeWrapper) -> Bool {
        lhs.id == rhs.id
    }
}

struct InnerViewConfig {
    let geo: GeometryProxy
    let viewModel: GraphViewModel
    let zoomScale: Binding<CGFloat>
    let offset: Binding<CGSize>
    let draggedNode: Binding<NodeWrapper>
    let dragOffset: Binding<CGPoint>
    let potentialEdgeTarget: Binding<NodeWrapper>
    let panStartOffset: Binding<CGSize?>
    let showMenu: Binding<Bool>
    let showOverlays: Binding<Bool>
    let maxZoom: CGFloat
    let crownPosition: Binding<Double>
    let updateZoomRangesHandler: (CGSize) -> Void
    let selectedNodeID: Binding<NodeID?>
    let selectedEdgeID: Binding<UUID?>
    let canvasFocus: FocusState<Bool>
    let onCenterGraph: () -> Void
    
    init(
        geo: GeometryProxy,
        viewModel: GraphViewModel,
        zoomScale: Binding<CGFloat>,
        offset: Binding<CGSize>,
        draggedNode: Binding<NodeWrapper>,
        dragOffset: Binding<CGPoint>,
        potentialEdgeTarget: Binding<NodeWrapper>,
        panStartOffset: Binding<CGSize?>,
        showMenu: Binding<Bool>,
        showOverlays: Binding<Bool>,
        maxZoom: CGFloat,
        crownPosition: Binding<Double>,
        updateZoomRangesHandler: @escaping (CGSize) -> Void,
        selectedNodeID: Binding<NodeID?>,
        selectedEdgeID: Binding<UUID?>,
        canvasFocus: FocusState<Bool>,
        onCenterGraph: @escaping () -> Void
    ) {
        self.geo = geo
        self.viewModel = viewModel
        self.zoomScale = zoomScale
        self.offset = offset
        self.draggedNode = draggedNode
        self.dragOffset = dragOffset
        self.potentialEdgeTarget = potentialEdgeTarget
        self.panStartOffset = panStartOffset
        self.showMenu = showMenu
        self.showOverlays = showOverlays
        self.maxZoom = maxZoom
        self.crownPosition = crownPosition
        self.updateZoomRangesHandler = updateZoomRangesHandler
        self.selectedNodeID = selectedNodeID
        self.selectedEdgeID = selectedEdgeID
        self.canvasFocus = canvasFocus
        self.onCenterGraph = onCenterGraph
    }
}

struct ContentView: View {
    @ObservedObject var viewModel: GraphViewModel
    @State private var zoomScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var draggedNode: NodeWrapper = NodeWrapper(node: nil)
    @State private var dragOffset: CGPoint = .zero
    @State private var potentialEdgeTarget: NodeWrapper = NodeWrapper(node: nil)
    @State private var selectedNodeID: NodeID? = nil
    @State private var selectedEdgeID: UUID? = nil
    @State private var panStartOffset: CGSize? = nil
    @State private var showMenu: Bool = false
    @State private var showOverlays: Bool = false
    @FocusState private var canvasFocus: Bool
    @State private var minZoom: CGFloat = AppConstants.defaultMinZoom
    @State private var maxZoom: CGFloat = AppConstants.defaultMaxZoom
    @State private var crownPosition: Double = Double(AppConstants.crownZoomSteps) / 2

    var body: some View {
        GeometryReader { geo in
            mainContent(in: geo)
                .onAppear {
                    viewModel.resumeSimulation()
                    updateZoomRanges(for: geo.size)
                }
                .onChange(of: viewModel.model.nodes) { _ in
                    updateZoomRanges(for: geo.size)
                }
                .onChange(of: viewModel.model.edges) { _ in
                    updateZoomRanges(for: geo.size)
                }
                .onChange(of: crownPosition) { newValue in
                    handleCrownRotation(newValue: newValue)
                }
                .onChange(of: canvasFocus) { newValue in
                    if !newValue { canvasFocus = true }
                }
        }
        .ignoresSafeArea()
        .digitalCrownRotation($crownPosition, from: 0, through: Double(AppConstants.crownZoomSteps), by: 1, sensitivity: .high, isContinuous: false, isHapticFeedbackEnabled: true)
        .focusable(true)
    }

    private func mainContent(in geo: GeometryProxy) -> some View {
        ZStack {
            innerViewConfig(in: geo)
            graphDescriptionOverlay
        }
    }

    private func innerViewConfig(in geo: GeometryProxy) -> some View {
        let config = InnerViewConfig(
            geo: geo,
            viewModel: viewModel,
            zoomScale: $zoomScale,
            offset: $offset,
            draggedNode: $draggedNode,
            dragOffset: $dragOffset,
            potentialEdgeTarget: $potentialEdgeTarget,
            panStartOffset: $panStartOffset,
            showMenu: $showMenu,
            showOverlays: $showOverlays,
            maxZoom: maxZoom,
            crownPosition: $crownPosition,
            updateZoomRangesHandler: { size in updateZoomRanges(for: size) },
            selectedNodeID: $selectedNodeID,
            selectedEdgeID: $selectedEdgeID,
            canvasFocus: _canvasFocus,
            onCenterGraph: { viewModel.centerGraph() }  // Wrapped in closure to match () -> Void
        )
        return InnerView(config: config)
    }

    private var graphDescriptionOverlay: some View {
        Text(viewModel.model.graphDescription(selectedID: selectedNodeID, selectedEdgeID: selectedEdgeID))
            .accessibilityLabel(viewModel.model.graphDescription(selectedID: selectedNodeID, selectedEdgeID: selectedEdgeID))
            .hidden()
    }

    private func handleCrownRotation(newValue: Double) {
        let normalized = newValue.clamped(to: 0...Double(AppConstants.crownZoomSteps)) / Double(AppConstants.crownZoomSteps)
        zoomScale = minZoom + (maxZoom - minZoom) * CGFloat(normalized)
        viewModel.centerGraph()  // Direct call
    }

    private func updateZoomRanges(for viewSize: CGSize) {
        let ranges = viewModel.calculateZoomRanges(for: viewSize)
        minZoom = ranges.min
        maxZoom = ranges.max
        zoomScale = zoomScale.clamped(to: minZoom...maxZoom)
    }
}

struct InnerView: View {
    let config: InnerViewConfig
    
    var body: some View {
        let draggedNodeBinding = Binding<(any NodeProtocol)?>(
            get: { config.draggedNode.wrappedValue.node },
            set: { config.draggedNode.wrappedValue = NodeWrapper(node: $0) }
        )
        let potentialEdgeTargetBinding = Binding<(any NodeProtocol)?>(
            get: { config.potentialEdgeTarget.wrappedValue.node },
            set: { config.potentialEdgeTarget.wrappedValue = NodeWrapper(node: $0) }
        )
        
        let canvasView = GraphCanvasView(
            viewModel: config.viewModel,
            zoomScale: config.zoomScale,
            offset: config.offset,
            draggedNode: draggedNodeBinding,
            dragOffset: config.dragOffset,
            potentialEdgeTarget: potentialEdgeTargetBinding,
            selectedNodeID: config.selectedNodeID,
            viewSize: config.geo.size,
            panStartOffset: config.panStartOffset,
            showMenu: config.showMenu,
            maxZoom: config.maxZoom,
            crownPosition: config.crownPosition,
            onUpdateZoomRanges: { config.updateZoomRangesHandler(config.geo.size) },
            selectedEdgeID: config.selectedEdgeID,
            showOverlays: config.showOverlays
        )
        .accessibilityIdentifier("GraphCanvas")
        .focused(config.canvasFocus.projectedValue)
        
        if config.showMenu.wrappedValue {
            MenuView(
                viewModel: config.viewModel,
                showOverlays: config.showOverlays,
                showMenu: config.showMenu,
                onCenterGraph: config.onCenterGraph
            )
            .navigationTitle("Menu")
        } else {
            canvasView
        }
    }
}

extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}
/*Old ContentView
 // Supporting struct for config (expand if needed)
struct InnerViewConfig {
    let viewModel: GraphViewModel
    let zoomScale: Binding<CGFloat>
    let offset: Binding<CGSize>
    let draggedNode: Binding<(any NodeProtocol)?>
    let dragOffset: Binding<CGPoint>
    let potentialEdgeTarget: Binding<(any NodeProtocol)?>
    let selectedNodeID: Binding<NodeID?>
    let selectedEdgeID: Binding<UUID?>
    let geo: GeometryProxy
    let panStartOffset: Binding<CGSize?>
    let showMenu: Binding<Bool>
    let maxZoom: CGFloat
    let crownPosition: Binding<Double>
    let updateZoomRangesHandler: () -> Void
    let showOverlays: Binding<Bool>
    let canvasFocus: FocusState<Bool>.Binding
    let onCenterGraph: () -> Void
}

struct ContentView: View {
    @StateObject var viewModel: GraphViewModel
    @State private var zoomScale: CGFloat = 1.0
    @State private var offset: CGSize = .zero
    @State private var draggedNode: NodeWrapper = NodeWrapper(node: nil)
    @State private var dragOffset: CGPoint = .zero
    @State private var potentialEdgeTarget: NodeWrapper = NodeWrapper(node: nil)
    @State private var panStartOffset: CGSize? = nil
    @State private var showMenu: Bool = false
    @State private var showOverlays = false
    @State private var minZoom: CGFloat = 0.1
    @State private var maxZoom: CGFloat = Constants.App.maxZoom // 2.5
    @State private var numZoomLevels: Double = Double(Constants.App.numZoomLevels) // 20.0
    @State private var crownPosition: Double = 0.0  // Temp default; we'll set properly in .onAppear
    @State private var isZooming: Bool = false
    @Environment(\.scenePhase) private var scenePhase
    @State private var previousCrownPosition: Double = 0.5
    @State private var clampTimer: Timer?
    @State private var resumeTimer: Timer? = nil
    @State private var logOffsetChanges = true
    @State private var isPanning: Bool = false
    @State private var zoomTimer: Timer? = nil
    @State private var isLoaded: Bool = false
    @State private var previousSelection: (NodeID?, UUID?) = (nil, nil)
    @State private var viewSize: CGSize = .zero
    @State private var previousZoomScale: CGFloat = 1.0
    @State private var selectedNodeID: NodeID?  // <-- Add this if missing
        @State private var selectedEdgeID: UUID?    // <-- Add this if missing
    @FocusState private var isCanvasFocused: Bool
    @State private var lastDelta: Double = 0

    
    var body: some View {
        GeometryReader { geo in
                Group {  // New: Stable wrapper
                    ZStack {
                        InnerView(config: InnerViewConfig(
                            geo: geo,
                            viewModel: viewModel,
                            zoomScale: $zoomScale,
                            offset: $offset,
                            draggedNode: $draggedNode,
                            dragOffset: $dragOffset,
                            potentialEdgeTarget: $potentialEdgeTarget,
                            panStartOffset: $panStartOffset,
                            showMenu: $showMenu,
                            showOverlays: $showOverlays,
                            maxZoom: maxZoom,
                            crownPosition: $crownPosition,  // Already passed; ensure it's used if needed in InnerView
                            updateZoomRangesHandler: onUpdateZoomRanges,
                            selectedNodeID: $viewModel.selectedNodeID,
                            selectedEdgeID: $viewModel.selectedEdgeID,
                            canvasFocus: $isCanvasFocused,
                            onCenterGraph: { recenterOn(position: viewModel.effectiveCentroid) }
                        ))
                    }
                    .ignoresSafeArea()
                }
                .digitalCrownRotation($crownPosition, from: 0.0, through: numZoomLevels, sensitivity: .medium, isContinuous: false, isHapticFeedbackEnabled: true)  // Add isHaptic for feedback
                .focusable(true)  // Single here
                    .focusEffectDisabled(false)
            }
            .ignoresSafeArea()
            .onChange(of: crownPosition, initial: true) { oldValue, newValue in
                if oldValue == 0.0 && newValue == 0.0 {
                    print("Skipping initial onChange for crownPosition")
                    return
                }
                
                let clampedCrown = newValue.clamped(to: 0.0...numZoomLevels)
                if abs(clampedCrown - crownPosition) > 0.01 {
                    crownPosition = clampedCrown
                }
                
                let normalized = clampedCrown / numZoomLevels
                    let effectiveMin = max(minZoom, 0.1)  // Safety
                    let effectiveMax = max(maxZoom, effectiveMin + 1.0)
                    let targetZoom = effectiveMin + normalized * (effectiveMax - effectiveMin)
                    let clampedZoom = targetZoom.cÏlamped(to: effectiveMin...effectiveMax)
                
                
                if abs(clampedZoom - zoomScale) > 0.01 {
                    withAnimation(.easeInOut(duration: 0.1)) {
                        let oldZoom = zoomScale
                        zoomScale = clampedZoom
                        
                        // Fixed focal (as before)
                        let focal = viewModel.effectiveCentroid
                        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
                        let oldRelative = focal - viewCenter
                        let shift = oldRelative * (1 - zoomScale / oldZoom)
                        offset = CGSize(width: offset.width + shift.x, height: offset.height + shift.y)
                    }
                    print("Crown zoom applied: \(zoomScale), clamped? \(clampedZoom != targetZoom)")
                    viewModel.saveViewState()
                }
            }
            .onChange(of: viewModel.selectedNodeID) { _ in
                if let id = viewModel.selectedNodeID, let node = viewModel.model.nodes.first(where: { $0.id == id }) {
                    print("Selection change: Recentering on node \(id) at \(node.position)")
                    recenterOn(position: node.position)
                } else {
                    print("Selection cleared: Recentering on graph centroid \(viewModel.effectiveCentroid)")
                    recenterOn(position: viewModel.effectiveCentroid)
                }
                viewModel.saveViewState()  // Existing
            }
        
        .onChange(of: showMenu) { newValue in
            print("Show menu changed to \(newValue)")
            viewModel.focusState = newValue ? .menu : .graph
            if !newValue {
                isCanvasFocused = true
            }
        }

        .onAppear {
            do {
                if let state = try? viewModel.model.loadViewState() {
                    offset = CGSize(width: state.offset.x, height: state.offset.y)
                    zoomScale = state.zoomScale.clamped(to: 0.01...maxZoom)  // Clamp here before assigning
                    selectedNodeID = state.selectedNodeID
                    selectedEdgeID = state.selectedEdgeID
                }
            } catch {
                print("Failed to load view state: \(error)")
            }
            
            if crownPosition == 0.0 {
                    let normalized = (1.0 - minZoom) / (maxZoom - minZoom)
                    crownPosition = normalized * numZoomLevels
                    print("Initial crownPosition set to \(crownPosition) for zoom 1.0")
                }
                
                print("Direct initial zoom set to 1.0")  // Debug; remove later
            
            print("Loaded nodes count: \(viewModel.model.nodes.count)")  // Add this
            onUpdateZoomRanges()
            isLoaded = true
            recenterOn(position: viewModel.effectiveCentroid)
            onUpdateZoomRanges()
            viewModel.model.startSimulation()
            isCanvasFocused = true
        }
        
        // Existing .onAppear, .onChange(of: showMenu), etc...
        .onChange(of: scenePhase) { newPhase in
            if newPhase == .active {
                isCanvasFocused = true  // Re-focus on activation
                print("App activated: Re-focusing crown view")
            }
        }
        
        .onChange(of: zoomScale) { newValue in
            if abs(newValue - previousZoomScale) > 0.01 {
                previousZoomScale = newValue
                viewModel.model.isSimulating = false
                viewModel.model.stopSimulation()
                zoomTimer?.invalidate()
                zoomTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: false) { _ in
                    isZooming = false
                    viewModel.model.isSimulating = true
                    viewModel.model.startSimulation()
                }
            }
        }
        .onChange(of: showMenu) { newValue in
            print("Show menu changed to \(newValue)")
            if !newValue {
                isCanvasFocused = true
            }
        }
        .onChange(of: isCanvasFocused) { newValue in
            print("Canvas focus changed to \(newValue)")
        }
    }
    
    private func recenterOn(position: CGPoint) {
        let viewCenter = CGPoint(x: viewSize.width / 2, y: viewSize.height / 2)
        let newOffset = CGSize(width: viewCenter.x - position.x * zoomScale, height: viewCenter.y - position.y * zoomScale)
        offset = clampOffset(newOffset)
    }
    
    private func clampOffset(_ proposedOffset: CGSize) -> CGSize {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        let scaledWidth = graphBounds.width * zoomScale
        let scaledHeight = graphBounds.height * zoomScale
        let maxX = max(0, (scaledWidth - viewSize.width) / 2)
        let maxY = max(0, (scaledHeight - viewSize.height) / 2)
        return CGSize(width: proposedOffset.width.clamped(to: -maxX...maxX), height: proposedOffset.height.clamped(to: -maxY...maxY))
    }
    
    private func onUpdateZoomRanges() {
        let graphBounds = viewModel.model.physicsEngine.boundingBox(nodes: viewModel.model.nodes)
        if graphBounds.width <= 0 || graphBounds.height <= 0 {
            minZoom = 0.1  // Default if bounds invalid (e.g., empty graph)
            maxZoom = Constants.App.maxZoom
            print("Defaulting zoom ranges due to invalid bounds")  // Debug; remove later
            return
        }
        
        let fitScaleWidth = viewSize.width / graphBounds.width
        let fitScaleHeight = viewSize.height / graphBounds.height
        minZoom = min(fitScaleWidth, fitScaleHeight) * 0.5
        maxZoom = max(fitScaleWidth, fitScaleHeight) * 3.0
        
        // Enforce sane limits
        minZoom = max(minZoom, 0.1)
        maxZoom = max(maxZoom, minZoom + 1.0)  // Ensure max > min
        print("Updated zoom ranges: min=\(minZoom), max=\(maxZoom)")  // Debug
    }
    
    // Add other private functions if needed
}

extension CGFloat {
    func clamped(to range: ClosedRange<CGFloat>) -> CGFloat {
        Swift.max(range.lowerBound, Swift.min(self, range.upperBound))
    }
}
 
 struct InnerView: View {
     let config: InnerViewConfig
     
     var body: some View {
         let draggedNodeBinding = Binding<(any NodeProtocol)?>(
             get: { config.draggedNode.wrappedValue.node },
             set: { config.draggedNode.wrappedValue = NodeWrapper(node: $0) }
         )
         let potentialEdgeTargetBinding = Binding<(any NodeProtocol)?>(
             get: { config.potentialEdgeTarget.wrappedValue.node },
             set: { config.potentialEdgeTarget.wrappedValue = NodeWrapper(node: $0) }
         )
         
         let canvasView: some View = GraphCanvasView(
             viewModel: config.viewModel,
             zoomScale: config.zoomScale,
             offset: config.offset,
             draggedNode: draggedNodeBinding,
             dragOffset: config.dragOffset,
             potentialEdgeTarget: potentialEdgeTargetBinding,
             selectedNodeID: config.selectedNodeID,
             viewSize: config.geo.size,
             panStartOffset: config.panStartOffset,
             showMenu: config.showMenu,
             maxZoom: config.maxZoom,
             crownPosition: config.crownPosition,
             onUpdateZoomRanges: config.updateZoomRangesHandler,
             selectedEdgeID: config.selectedEdgeID,
             showOverlays: config.showOverlays
         )
         .accessibilityIdentifier("GraphCanvas")
         .focused(config.canvasFocus)
         //.focusable(true)

         if config.showMenu.wrappedValue {
             MenuView(
                 viewModel: config.viewModel,
                 showOverlays: config.showOverlays,
                 showMenu: config.showMenu,
                 onCenterGraph: config.onCenterGraph
             )
             .navigationTitle("Menu")
         } else {
             canvasView
         }
     }
 }

 */
// If in #Preview (update the entire preview):
#Preview {
    let mockViewModel = GraphViewModel(model: GraphModel(storage: PersistenceManager(), physicsEngine: PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))))
    ContentView(viewModel: mockViewModel)  // <-- If ContentView now takes viewModel, add it here too (see next fix)
}
--------------------------------------------------
