## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-08 15:39:33
Table of Contents:
1. GraphEditorWatchTests/GraphModelTests.swift
2. GraphEditorWatchTests/MenuViewTests.swift
3. GraphEditorWatchUITests/GraphEditorWatchUITests.swift
4. GraphEditorWatchUITests/GraphEditorWatchUITestsLaunchTests.swift--------------------------------------------------
File: GraphModelTests.swift
Path: GraphEditorWatchTests/GraphModelTests.swift
Last modified: 2025-10-07 17:31:30

Contents:
//
//  GraphModelTests.swift
//  GraphEditor
//
//  Created by handcart on 9/22/25.
//

import Testing
import Foundation
import CoreGraphics
@testable import GraphEditorWatch
@testable import GraphEditorShared
import XCTest
import SwiftUI

struct GraphModelTests {
    private func mockPhysicsEngine() -> GraphEditorShared.PhysicsEngine {
        GraphEditorShared.PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
    }
    
    private func setupDefaults(for storage: MockGraphStorage) async throws {
        let node1 = AnyNode(Node(label: 1, position: CGPoint(x: 100, y: 100)))
        let node2 = AnyNode(Node(label: 2, position: CGPoint(x: 200, y: 200)))
        let node3 = AnyNode(Node(label: 3, position: CGPoint(x: 150, y: 150)))
        let edge1 = GraphEdge(from: node1.id, target: node2.id)
        let edge2 = GraphEdge(from: node2.id, target: node3.id)
        let edge3 = GraphEdge(from: node3.id, target: node1.id)
        try await storage.save(nodes: [node1, node2, node3], edges: [edge1, edge2, edge3])
    }
    
    private func generateNodesAndEdges(seed: Int) async -> ([AnyNode], [GraphEdge]) {
        struct SeededRandomNumberGenerator: RandomNumberGenerator {
            private var state: UInt64
            init(seed: UInt64) {
                state = seed
            }
            mutating func next() -> UInt64 {
                state &+= 1442695040888963407
                state &*= 6364136223846793005
                return state
            }
        }
        var rng = SeededRandomNumberGenerator(seed: UInt64(seed))
        var nodesToAssign: [AnyNode] = []
        for _ in 0..<5 {
            let label = Int.random(in: 0..<10, using: &rng)
            let positionX = CGFloat.random(in: 0..<300, using: &rng)
            let positionY = CGFloat.random(in: 0..<300, using: &rng)
            nodesToAssign.append(AnyNode(Node(label: label, position: CGPoint(x: positionX, y: positionY))))
        }
        var edgesToAssign: [GraphEdge] = []
        for _ in 0..<3 {
            let fromIndex = Int.random(in: 0..<nodesToAssign.count, using: &rng)
            let targetIndex = Int.random(in: 0..<nodesToAssign.count, using: &rng)
            edgesToAssign.append(GraphEdge(from: nodesToAssign[fromIndex].id, target: nodesToAssign[targetIndex].id))
        }
        return (nodesToAssign, edgesToAssign)
    }
    
    private func runSimulation(on model: GraphModel, subStepsPerIteration: Int = 20) async {
        await model.startSimulation()
        await model.stopSimulation()  // Ensure completion
        for _ in 0..<Constants.Physics.maxSimulationSteps {
            var nodes = await model.nodes
            var activeAccum = false
            for _ in 0..<subStepsPerIteration {
                let currentNodes = nodes.map { $0.unwrapped }
                let physics = await MainActor.run { model.physicsEngine }
                let edges = await model.edges
                let (updatedNodes, stepActive) = physics.simulationStep(nodes: currentNodes, edges: edges)
                nodes = updatedNodes.map(AnyNode.init)
                activeAccum = activeAccum || stepActive
                if !stepActive { break }
            }
            let updatedNodesForMain = nodes
            await MainActor.run { model.nodes = updatedNodesForMain }
            if !activeAccum { break }
        }
    }
    
    @Test(arguments: 1..<5) func testConvergencePropertyBased(seed: Int) async throws {
        let storage = MockGraphStorage()
        let model = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await model.load()
        let (nodesToAssign, edgesToAssign) = await generateNodesAndEdges(seed: seed)
        await MainActor.run {
            model.nodes = nodesToAssign
            model.edges = edgesToAssign
        }
        await runSimulation(on: model)
        let totalVel = (await model.nodes).reduce(0.0) { $0 + hypot($1.velocity.x, $1.velocity.y) }
        #expect(totalVel < 4.0, "Simulation converged to low velocity for seed \(seed)")
    }
    
    @Test func testUndoRedoMixedOperations() async throws {
        let storage = MockGraphStorage()
        let model = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await model.load()
        await model.addNode(at: CGPoint.zero)
        await runSimulation(on: model)
        await model.snapshot()  // Explicit snapshot after initial simulation to capture positions
        let initialNodes = await model.nodes
        let initialNodeCount = initialNodes.count
        let initialEdgeCount = await model.edges.count
        let nodeToDelete = initialNodes[0].id
        let connectedEdges = (await model.edges).filter { $0.from == nodeToDelete || $0.target == nodeToDelete }.count
        await model.snapshot()  // Explicit before delete
        await model.deleteNode(withID: nodeToDelete)
        await runSimulation(on: model)
        await model.addNode(at: CGPoint(x: 50, y: 50))
        await runSimulation(on: model)
        await model.undo(resume: false) // To post-add sim? Wait, undo pops the last snapshot, which is after add? No, snapshot before add in addNode, but explicit after sim no.
        // Note: Since addNode calls snapshot before add, the last state is pre-add (post-delete sim, 0 nodes)
        // Then add, sim
        // So undo sets to pre-add, 0 nodes
        #expect(await MainActor.run { model.nodes.count } == initialNodeCount - 1, "Undo reverts to post-delete")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount - connectedEdges, "Edges match post-delete")
        await model.undo(resume: false) // To pre-delete (post-initial sim, 1 node)
        #expect(await MainActor.run { model.nodes.count } == initialNodeCount, "Second undo restores initial")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount, "Edges restored")
        let restoredNodes = await model.nodes
        #expect(zip(restoredNodes.sorted(by: { $0.id.uuidString < $1.id.uuidString }), initialNodes.sorted(by: { $0.id.uuidString < $1.id.uuidString })).allSatisfy { approximatelyEqual($0.position, $1.position, accuracy: 1e-5) && approximatelyEqual($0.velocity, $1.velocity, accuracy: 1e-5) }, "Positions and velocities restored")
        await model.redo(resume: false) // To post-delete
        #expect((await model.nodes).count == initialNodeCount - 1, "Redo applies delete")
        await model.redo(resume: false) // To post-add
        #expect((await model.nodes).count == initialNodeCount, "Redo applies add")
    }
    
    @Test func testInitializationWithDefaults() async throws {
        let storage = MockGraphStorage()
        try await setupDefaults(for: storage)
        let model = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await model.load()
        #expect(await MainActor.run { model.nodes.count } >= 3, "Should load default or saved nodes")
        #expect(await MainActor.run { model.edges.count } >= 3, "Should load default edges")
    }
    
    @Test func testDeleteNodeAndEdges() async throws {
        let storage = MockGraphStorage()
        try await setupDefaults(for: storage)
        let model = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await model.load()
        let nodes = await model.nodes
        try #require(!nodes.isEmpty, "Assumes default nodes exist")
        let nodeToDelete = nodes[0].id
        let initialEdgeCount = await model.edges.count
        let connectedEdges = (await model.edges).filter { $0.from == nodeToDelete || $0.target == nodeToDelete }.count
        await model.deleteNode(withID: nodeToDelete)
        #expect(await MainActor.run { model.nodes.count } == nodes.count - 1, "Node deleted")
        #expect(await MainActor.run { model.edges.count } == initialEdgeCount - connectedEdges, "Connected edges deleted")
    }
    
    @Test func testSaveLoadRoundTrip() async throws {
        let storage = MockGraphStorage()
        try await setupDefaults(for: storage)
        let model = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await model.load()
        let originalNodeCount = await MainActor.run { model.nodes.count }
        let originalEdges = await model.edges
        await model.addNode(at: CGPoint.zero)
        await runSimulation(on: model)
        let postAddNodes = await model.nodes  // Capture after add and simulation
        await model.snapshot()  // Triggers save() with stabilized positions
        let newModel = await MainActor.run { GraphModel(storage: storage, physicsEngine: mockPhysicsEngine()) }
        await newModel.load()
        // Skip runSimulation(on: newModel) - loaded positions should match saved exactly; re-sim amplifies FP errors
        #expect(await MainActor.run { newModel.nodes.count } == originalNodeCount + 1, "Loaded nodes include added one")
        #expect(await newModel.edges == originalEdges, "Edges unchanged")
        let loadedNodes = (await newModel.nodes).sorted(by: { $0.id.uuidString < $1.id.uuidString })
        let expectedNodes = postAddNodes.sorted(by: { $0.id.uuidString < $1.id.uuidString })
        #expect(zip(loadedNodes, expectedNodes).allSatisfy {
            $0.label == $1.label && approximatelyEqual($0.position, $1.position, accuracy: 1e-2)  // Further relaxed for any JSON/FP rounding
        }, "Loaded nodes match expected")
    }
    
    @MainActor @Test func testUndoRedoRoundTrip() async {
        let storage = MockGraphStorage()
        let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 500, height: 500))
        let model = GraphModel(storage: storage, physicsEngine: physicsEngine)
        try? await model.loadGraph()  // Explicit load to start empty
        let initialNode = AnyNode(Node(id: UUID(), label: 1, position: .zero))
        await model.snapshot()  // Pre-add initial (appends empty)
        model.nodes = [initialNode]  // "Add" initial
        let newNode = AnyNode(Node(id: UUID(), label: 2, position: .zero))
        await model.snapshot()  // Pre-add new (appends [initial])
        model.nodes.append(newNode)  // Add new
        await model.undo()  // Back to 1 node
        #expect(await model.nodes.count == 1, "Undo removes node")
        #expect(await model.nodes[0].id == initialNode.id, "Initial state restored")
        #expect(await model.redoStack.count == 1, "Redo stack populated")
        await model.redo()  // Forward to 2 nodes
        #expect(await model.nodes.count == 2, "Redo adds node")
        #expect(await model.undoStack.count == 2, "Undo stack updated")
    }
}
----------------------------------------------------------------------------------------------------
File: MenuViewTests.swift
Path: GraphEditorWatchTests/MenuViewTests.swift
Last modified: 2025-09-25 14:19:07

Contents:
//
//  MenuViewTests.swift
//  GraphEditor
//
//  Created by handcart on 9/25/25.
//
import Testing
import SwiftUI
@testable import GraphEditorWatch
@testable import GraphEditorShared

struct MenuViewTests {
    private func setupViewModel() async -> GraphViewModel {
        let storage = MockGraphStorage()
        let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
        let model = await GraphModel(storage: storage, physicsEngine: physicsEngine)
        return await GraphViewModel(model: model)
    }

    @Test func testEditSectionDeleteNode() async {
        let viewModel = await setupViewModel()
        let node = AnyNode(Node(label: 1, position: .zero))
        await MainActor.run { viewModel.model.nodes = [node] }
        _ = EditSection(viewModel: viewModel, selectedNodeID: node.id, selectedEdgeID: nil, onDismiss: {}, onEditNode: {})
        
        // Simulate button tap (manual test logic; for full UI test, use XCUITest)
        await viewModel.deleteNode(withID: node.id)
        #expect(await viewModel.model.nodes.isEmpty, "Node deleted")
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatchUITests.swift
Path: GraphEditorWatchUITests/GraphEditorWatchUITests.swift
Last modified: 2025-10-07 03:30:21

Contents:
//
//  GraphEditorWatchUITests.swift
//  GraphEditorWatchUITests
//
//  Created by handcart on 8/4/25.
//

import XCTest

extension XCUIApplication {
    @discardableResult
    func focusAndTypeInTextField(identifier: String, text: String, timeout: TimeInterval = 5.0, file: StaticString = #file, line: UInt = #line) -> XCUIElement {
        let field = textFields[identifier]
        XCTAssertTrue(field.waitForExistence(timeout: timeout), "TextField with identifier \(identifier) did not appear", file: file, line: line)
        field.tap()
        let expectation = XCTNSPredicateExpectation(predicate: NSPredicate(format: "hasFocus == true"), object: field)
        let result = XCTWaiter.wait(for: [expectation], timeout: timeout)
        if result != .completed {
            XCTFail("TextField did not gain focus after tap", file: file, line: line)
        }
        field.typeText(text)
        return field
    }

    func waitForElement(_ element: XCUIElement, timeout: TimeInterval = 5.0, file: StaticString = #file, line: UInt = #line) {
        XCTAssertTrue(element.waitForExistence(timeout: timeout), "Element did not appear: \(element)", file: file, line: line)
    }
}

final class GraphEditorWatchUITests: XCTestCase {
    override func setUpWithError() throws {
        let app = XCUIApplication()
        app.launch()
        
        // Open menu
        let menuButton = app.buttons["Menu"]  // Matches label (identifier is symbol name)
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        
        // Debug: Print full hierarchy (remove after fixing)
        print(app.debugDescription)
        
        // Tap "New Graph" (use identifier from your list)
        let newButton = app.buttons["newGraphButton"]
        scrollUntilVisible(element: newButton, in: app)
        XCTAssertTrue(newButton.waitForExistence(timeout: 5), "New Graph button should appear after scroll")
        newButton.tap()
        
        // Enter name in sheet's TextField (use identifier if available, otherwise fall back)
        if app.textFields["newGraphNameTextField"].exists {
            _ = app.focusAndTypeInTextField(identifier: "newGraphNameTextField", text: "TestGraph")
        } else {
            let sheetField = app.textFields["New Graph Name"].firstMatch
            XCTAssertTrue(sheetField.waitForExistence(timeout: 5), "New Graph Name field should appear")
            sheetField.tap()
            Thread.sleep(forTimeInterval: 0.5)  // Brief delay for watchOS
            let focusExpectation = XCTNSPredicateExpectation(predicate: NSPredicate(format: "hasKeyboardFocus == true"), object: sheetField)
            let focusResult = XCTWaiter.wait(for: [focusExpectation], timeout: 5.0)
            if focusResult != .completed {
                XCTFail("TextField did not gain keyboard focus after tap")
            }
            sheetField.typeText("TestGraph")
        }
        
        // Tap "Create" (use identifier from your list)
        let createButton = app.buttons["createButton"]
        XCTAssertTrue(createButton.waitForExistence(timeout: 5), "Create button should appear")
        createButton.tap()
        
        // Wait for async creation/dismiss
        XCTAssertTrue(app.otherElements["GraphCanvas"].waitForExistence(timeout: 5), "Back to empty graph after creation")
    }
    
    // Helper to scroll until visible/hittable (coordinate drag for precision; smaller dy to avoid overshoot)
    private func scrollUntilVisible(element: XCUIElement, in app: XCUIApplication, maxAttempts: Int = 10) {
        var attempts = 0
        while !element.isHittable && attempts < maxAttempts {
            // Coordinate-based drag (upward to reveal bottom items)
            let startCoord = app.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.8))  // Near bottom
            let endCoord = startCoord.withOffset(CGVector(dx: 0.0, dy: -50))  // Drag up, smaller offset
            startCoord.press(forDuration: 0.1, thenDragTo: endCoord)
            attempts += 1
        }
        if !element.isHittable {
            XCTFail("Element not visible after \(maxAttempts) attempts")
        }
    }
    
    override func tearDownWithError() throws {}
    
    func testLaunch() throws {
        let app = XCUIApplication()
        XCTAssertTrue(app.exists, "App should launch successfully")
    }
    
    func testDragToCreateEdge() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Graph canvas should appear")

        // Open menu and add two nodes (use identifier from your list)
        let menuButton = app.buttons["Menu"]
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        let addNodeButton = app.buttons["addNodeButton"]
        XCTAssertTrue(addNodeButton.waitForExistence(timeout: 5), "Add Node button should appear")
        addNodeButton.tap()
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Back to canvas after add")
        menuButton.tap()
        addNodeButton.tap()
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Back to canvas after second add")

        // Pre-tap start to ensure hit/select
        let startPoint = canvas.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.4))
        startPoint.tap()
        let endPoint = canvas.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.6))
        startPoint.press(forDuration: 0.2, thenDragTo: endPoint)
        
        // Check updated label (adjust for empty start: 2 nodes, 1 edge)
        let expectedLabel = "Graph with 2 nodes and 1 edge. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", expectedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Directed edge created, updating graph description")
    }

    func testUndoAfterAddNode() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        // Open menu and add node (use identifier)
        let menuButton = app.buttons["Menu"]
        menuButton.tap()
        let addNodeButton = app.buttons["addNodeButton"]
        addNodeButton.tap()
        
        // Check added (from 0 -> 1 node, 0 edges)
        let addedLabel = "Graph with 1 node and 0 edges. No node or edge selected."
        let addedPredicate = NSPredicate(format: "label == %@", addedLabel)
        let addedExpectation = self.expectation(for: addedPredicate, evaluatedWith: canvas)
        let addedResult = XCTWaiter.wait(for: [addedExpectation], timeout: 10.0)
        XCTAssert(addedResult == .completed, "Node added")
        
        // Open menu and undo (use identifier)
        menuButton.tap()
        let undoButton = app.buttons["undoButton"]
        scrollUntilVisible(element: undoButton, in: app)
        XCTAssertTrue(undoButton.waitForExistence(timeout: 5), "Undo button should appear")
        undoButton.tap()
        
        // Check reverted (back to 0 nodes, 0 edges)
        let revertedLabel = "Graph with 0 nodes and 0 edges. No node or edge selected."
        let revertedPredicate = NSPredicate(format: "label == %@", revertedLabel)
        let revertedExpectation = self.expectation(for: revertedPredicate, evaluatedWith: canvas)
        let revertedResult = XCTWaiter.wait(for: [revertedExpectation], timeout: 10.0)
        XCTAssert(revertedResult == .completed, "Undo reverts add")
    }

    func testMenuDisplayAndAction() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        // Tap menu button
        let menuButton = app.buttons["Menu"]
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        
        // Check add button in menu (use identifier)
        let addButton = app.buttons["addNodeButton"]
        XCTAssertTrue(addButton.waitForExistence(timeout: 5), "Menu shows with actions")
        
        addButton.tap()
        
        // Check updated label (from 0 -> 1 node, 0 edges)
        let updatedLabel = "Graph with 1 node and 0 edges. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", updatedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Menu action adds node")
    }

    func testDigitalCrownZooming() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        XCUIDevice.shared.rotateDigitalCrown(delta: 5.0, velocity: 1.0)  // Zoom in
        
        // Check label unchanged post-zoom (empty graph)
        let zoomedLabel = "Graph with 0 nodes and 0 edges. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", zoomedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Zoom updates view")
    }
    
    @MainActor
    func testExample() throws {
        let app = XCUIApplication()
    }
    
    @MainActor
    func testLaunchPerformance() throws {
        measure(metrics: [XCTApplicationLaunchMetric()]) {
            XCUIApplication().launch()
        }
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatchUITestsLaunchTests.swift
Path: GraphEditorWatchUITests/GraphEditorWatchUITestsLaunchTests.swift
Last modified: 2025-09-19 13:15:40

Contents:
//
//  GraphEditorWatchUITestsLaunchTests.swift
//  GraphEditorWatchUITests
//
//  Created by handcart on 8/4/25.
//

import XCTest

final class GraphEditorWatchUITestsLaunchTests: XCTestCase {

    override static var runsForEachTargetApplicationUIConfiguration: Bool {
        true
    }

    override func setUpWithError() throws {
        continueAfterFailure = false
    }

    @MainActor
    func testLaunch() throws {
        let app = XCUIApplication()
        app.launch()

        // Insert steps here to perform after app launch but before taking a screenshot,
        // such as logging into a test account or navigating somewhere in the app

        let attachment = XCTAttachment(screenshot: app.screenshot())
        attachment.name = "Launch Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
}
--------------------------------------------------
