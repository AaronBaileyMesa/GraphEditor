## Focused Project Concatenation
This file includes only UI, interactivity, model, and core logic files.
Excluded: Tests/*, UITests/*, Package.swift, AppDelegate.swift, and other non-UI items.
Current date: 2025-10-14 08:14:28
Table of Contents:
1. GraphEditorWatchTests/MenuViewTests.swift
2. GraphEditorWatchUITests/GraphEditorWatchUITests.swift
3. GraphEditorWatchUITests/GraphEditorWatchUITestsLaunchTests.swift--------------------------------------------------
File: MenuViewTests.swift
Path: GraphEditorWatchTests/MenuViewTests.swift
Last modified: 2025-09-25 14:19:07

Contents:
//
//  MenuViewTests.swift
//  GraphEditor
//
//  Created by handcart on 9/25/25.
//
import Testing
import SwiftUI
@testable import GraphEditorWatch
@testable import GraphEditorShared

struct MenuViewTests {
    private func setupViewModel() async -> GraphViewModel {
        let storage = MockGraphStorage()
        let physicsEngine = PhysicsEngine(simulationBounds: CGSize(width: 300, height: 300))
        let model = await GraphModel(storage: storage, physicsEngine: physicsEngine)
        return await GraphViewModel(model: model)
    }

    @Test func testEditSectionDeleteNode() async {
        let viewModel = await setupViewModel()
        let node = AnyNode(Node(label: 1, position: .zero))
        await MainActor.run { viewModel.model.nodes = [node] }
        _ = EditSection(viewModel: viewModel, selectedNodeID: node.id, selectedEdgeID: nil, onDismiss: {}, onEditNode: {})
        
        // Simulate button tap (manual test logic; for full UI test, use XCUITest)
        await viewModel.deleteNode(withID: node.id)
        #expect(await viewModel.model.nodes.isEmpty, "Node deleted")
    }
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatchUITests.swift
Path: GraphEditorWatchUITests/GraphEditorWatchUITests.swift
Last modified: 2025-10-10 14:04:57

Contents:
//
//  GraphEditorWatchUITests.swift
//  GraphEditorWatchUITests
//
//  Created by handcart on 8/4/25.
//

import XCTest

extension XCUIApplication {
    func waitForElement(_ element: XCUIElement, timeout: TimeInterval = 5.0, file: StaticString = #file, line: UInt = #line) {
        XCTAssertTrue(element.waitForExistence(timeout: timeout), "Element did not appear: \(element)", file: file, line: line)
    }
}

extension XCTestCase {
    func waitUntilElementHasFocus(element: XCUIElement, timeout: TimeInterval = 5.0, file: StaticString = #file, line: UInt = #line) {
        let expectation = expectation(description: "waiting for element \(element) to have focus")
        let timer = Timer(timeInterval: 0.5, repeats: true) { timer in
            if element.value(forKey: "hasKeyboardFocus") as? Bool ?? false {
                expectation.fulfill()
                timer.invalidate()
            }
        }
        RunLoop.current.add(timer, forMode: .common)
        wait(for: [expectation], timeout: timeout)
    }
}

final class GraphEditorWatchUITests: XCTestCase {
    override func setUpWithError() throws {
        let app = XCUIApplication()
        app.launch()
        
        // Open menu
        let menuButton = app.buttons["Menu"]  // Matches label (identifier is symbol name)
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        
        // Debug: Print full hierarchy (remove after fixing)
        print(app.debugDescription)
        
        // Tap "New Graph" (use identifier from your list)
        let newButton = app.buttons["newGraphButton"]
        scrollUntilVisible(element: newButton, in: app)
        XCTAssertTrue(newButton.waitForExistence(timeout: 5), "New Graph button should appear after scroll")
        newButton.tap()

        // Tap text field to open input (required for submission, even with default)
        let sheetField = app.textFields["New Graph Name"].firstMatch
        XCTAssertTrue(sheetField.waitForExistence(timeout: 5), "New Graph Name field should appear")
        sheetField.tap()
        Thread.sleep(forTimeInterval: 1.0)  // Increased delay for input overlay
        
        // Custom wait for focus instead of predicate
        waitUntilElementHasFocus(element: sheetField)
        
        // Type text (override default if needed)
        sheetField.typeText("TestGraph")
        Thread.sleep(forTimeInterval: 0.5)  // Delay after typing

        // Dismiss input with "Done" (submits default value)
        let doneButton = app.buttons["Done"]
        if doneButton.waitForExistence(timeout: 5) {
            doneButton.tap()
        }  // Conditional if input doesn't always open

        Thread.sleep(forTimeInterval: 0.5)  // Delay for submission

        // Confirm sheet with "Create"
        let createButton = app.buttons["createButton"]
        XCTAssertTrue(createButton.waitForExistence(timeout: 5), "Create button should appear in sheet")
        createButton.tap()

        Thread.sleep(forTimeInterval: 2.0)  // Increased delay for sheet dismissal and graph loading

        // Wait for canvas
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 10), "Graph canvas should appear after creation")
    }
    
    // Helper to scroll until visible/hittable (coordinate drag for precision; smaller dy to avoid overshoot)
    private func scrollUntilVisible(element: XCUIElement, in app: XCUIApplication, maxAttempts: Int = 10) {
        var attempts = 0
        while !element.isHittable && attempts < maxAttempts {
            // Coordinate-based drag (upward to reveal bottom items)
            let startCoord = app.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.8))  // Near bottom
            let endCoord = startCoord.withOffset(CGVector(dx: 0.0, dy: -50))  // Drag up, smaller offset
            startCoord.press(forDuration: 0.1, thenDragTo: endCoord)
            attempts += 1
        }
        if !element.isHittable {
            XCTFail("Element not visible after \(maxAttempts) attempts")
        }
    }
    
    override func tearDownWithError() throws {}
    
    /*
    func testLaunch() throws {
        let app = XCUIApplication()
        XCTAssertTrue(app.exists, "App should launch successfully")
    }
    
    func testDragToCreateEdge() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Graph canvas should appear")

        // Open menu and add two nodes (use identifier from your list)
        let menuButton = app.buttons["Menu"]
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        let addNodeButton = app.buttons["addNodeButton"]
        scrollUntilVisible(element: addNodeButton, in: app)
        XCTAssertTrue(addNodeButton.waitForExistence(timeout: 5), "Add Node button should appear")
        addNodeButton.tap()
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Back to canvas after add")
        menuButton.tap()
        scrollUntilVisible(element: addNodeButton, in: app)
        addNodeButton.tap()
        XCTAssertTrue(canvas.waitForExistence(timeout: 5), "Back to canvas after second add")

        // Pre-tap start to ensure hit/select
        let startPoint = canvas.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.4))
        startPoint.tap()
        let endPoint = canvas.coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.6))
        startPoint.press(forDuration: 0.2, thenDragTo: endPoint)
        
        // Check updated label (adjust for empty start: 2 nodes, 1 edge)
        let expectedLabel = "Graph with 2 nodes and 1 edge. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", expectedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Directed edge created, updating graph description")
    }

    func testUndoAfterAddNode() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        // Open menu and add node (use identifier)
        let menuButton = app.buttons["Menu"]
        menuButton.tap()
        let addNodeButton = app.buttons["addNodeButton"]
        scrollUntilVisible(element: addNodeButton, in: app)
        addNodeButton.tap()
        
        // Check added (from 0 -> 1 node, 0 edges)
        let addedLabel = "Graph with 1 node and 0 edges. No node or edge selected."
        let addedPredicate = NSPredicate(format: "label == %@", addedLabel)
        let addedExpectation = self.expectation(for: addedPredicate, evaluatedWith: canvas)
        let addedResult = XCTWaiter.wait(for: [addedExpectation], timeout: 10.0)
        XCTAssert(addedResult == .completed, "Node added")
        
        // Open menu and undo (use identifier)
        menuButton.tap()
        let undoButton = app.buttons["undoButton"]
        scrollUntilVisible(element: undoButton, in: app)
        XCTAssertTrue(undoButton.waitForExistence(timeout: 5), "Undo button should appear")
        undoButton.tap()
        
        // Check reverted (back to 0 nodes, 0 edges)
        let revertedLabel = "Graph with 0 nodes and 0 edges. No node or edge selected."
        let revertedPredicate = NSPredicate(format: "label == %@", revertedLabel)
        let revertedExpectation = self.expectation(for: revertedPredicate, evaluatedWith: canvas)
        let revertedResult = XCTWaiter.wait(for: [revertedExpectation], timeout: 10.0)
        XCTAssert(revertedResult == .completed, "Undo reverts add")
    }

    func testMenuDisplayAndAction() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        // Tap menu button
        let menuButton = app.buttons["Menu"]
        XCTAssertTrue(menuButton.waitForExistence(timeout: 5), "Menu button should appear")
        menuButton.tap()
        
        // Check add button in menu (use identifier)
        let addButton = app.buttons["addNodeButton"]
        scrollUntilVisible(element: addButton, in: app)
        XCTAssertTrue(addButton.waitForExistence(timeout: 5), "Menu shows with actions")
        
        addButton.tap()
        
        // Check updated label (from 0 -> 1 node, 0 edges)
        let updatedLabel = "Graph with 1 node and 0 edges. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", updatedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Menu action adds node")
    }
    
    @MainActor
    func testExample() throws {
        _ = XCUIApplication()
    }
    
    @MainActor
    func testLaunchPerformance() throws {
        measure(metrics: [XCTApplicationLaunchMetric()]) {
            XCUIApplication().launch()
        }
    }
    */
    /*
    func testDigitalCrownZooming() throws {
        let app = XCUIApplication()
        let canvas = app.otherElements["GraphCanvas"]
        XCTAssertTrue(canvas.waitForExistence(timeout: 5))
        
        XCUIDevice.shared.rotateDigitalCrown(delta: 5.0, velocity: 1.0)  // Zoom in
        
        // Check label unchanged post-zoom (empty graph)
        let zoomedLabel = "Graph with 0 nodes and 0 edges. No node or edge selected."
        let predicate = NSPredicate(format: "label == %@", zoomedLabel)
        let expectation = self.expectation(for: predicate, evaluatedWith: canvas)
        let result = XCTWaiter.wait(for: [expectation], timeout: 10.0)
        XCTAssert(result == .completed, "Zoom updates view")
    }
     */
}
----------------------------------------------------------------------------------------------------
File: GraphEditorWatchUITestsLaunchTests.swift
Path: GraphEditorWatchUITests/GraphEditorWatchUITestsLaunchTests.swift
Last modified: 2025-09-19 13:15:40

Contents:
//
//  GraphEditorWatchUITestsLaunchTests.swift
//  GraphEditorWatchUITests
//
//  Created by handcart on 8/4/25.
//

import XCTest

final class GraphEditorWatchUITestsLaunchTests: XCTestCase {

    override static var runsForEachTargetApplicationUIConfiguration: Bool {
        true
    }

    override func setUpWithError() throws {
        continueAfterFailure = false
    }

    @MainActor
    func testLaunch() throws {
        let app = XCUIApplication()
        app.launch()

        // Insert steps here to perform after app launch but before taking a screenshot,
        // such as logging into a test account or navigating somewhere in the app

        let attachment = XCTAttachment(screenshot: app.screenshot())
        attachment.name = "Launch Screen"
        attachment.lifetime = .keepAlways
        add(attachment)
    }
}
--------------------------------------------------
